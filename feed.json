{
    "version": "https://jsonfeed.org/version/1",
    "title": "Icicles of Thought",
    "description": "",
    "home_page_url": "https://lorefnon.me",
    "items": [
        {
            "id": "https://lorefnon.me/2023/01/29/gradle-kotlin-dsl-running-main-class/",
            "url": "https://lorefnon.me/2023/01/29/gradle-kotlin-dsl-running-main-class/",
            "title": "Running an arbitrary main class as a Gradle task using the kotlin DSL",
            "date_published": "2023-01-29T00:00:00.000Z",
            "content_html": "<p>This post is a simple recipe illustrating how we can run an arbitrary main class as a gradle task through the <a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Gradle JavaExec utility</a>. Because we love kotlin, both our gradle configuration and main class are written in kotlin.</p>\n<pre><code class=\"hljs kt\"><span class=\"hljs-comment\">// build.gradle.kts</span>\n\ntasks.register&lt;JavaExec&gt;(<span class=\"hljs-string\">&quot;sampleTask&quot;</span>) &#123;\n    mainClass.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;com.example.util.SampleTaskKt&quot;</span>)\n    classpath = sourceSets[<span class=\"hljs-string\">&quot;main&quot;</span>].runtimeClasspath\n&#125;</code></pre>\n\n<pre><code class=\"hljs kt\"><span class=\"hljs-comment\">// src/main/kotlin/com/example/util/sampleTask.kt</span>\n\n<span class=\"hljs-keyword\">package</span> com.example.util\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(args: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">String</span>&gt;)</span></span> &#123;\n    print(<span class=\"hljs-string\">&quot;hello world&quot;</span>)\n&#125;</code></pre>\n\n<p>Now if you run <code>./gradlew sampleTask</code> in cli (or use your IDE&#39;s gradle panel to execute it) you should see &quot;hello world&quot; printed in the console.</p>\n<p>Gradle&#39;s JavaExec is quite handy for one off project specific tasks for which you don&#39;t want to implement a dedicated plugin.</p>\n",
            "tags": [
                "Kotlin",
                "Gradle"
            ]
        },
        {
            "id": "https://lorefnon.me/2023/01/25/snapshot-testing-with-node-test-runner/",
            "url": "https://lorefnon.me/2023/01/25/snapshot-testing-with-node-test-runner/",
            "title": "Snapshot testing with node test runner (node:test)",
            "date_published": "2023-01-25T00:00:00.000Z",
            "content_html": "<p>While there are a lot of popular test runners in node.js ecosystem, like jest, mocha etc. node has recently introduced a built in test runner available as <code>test</code> package in the standard library. The <a href=\"https://nodejs.org/api/test.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">official documentation</a> describe the usage, and it should look familiar to people coming from most popular testing libraries.</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> &#123; describe, it &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;node:test&quot;</span>;\n<span class=\"hljs-keyword\">import</span> assert <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;node:assert&quot;</span>\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;A thing&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should work&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;\n    assert.<span class=\"hljs-title function_\">strictEqual</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n  &#125;);\n&#125;);</code></pre>\n\n<p>However, one aspect that it does not handle currently is snapshot testing. </p>\n<p>As popularised by <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Jest</a>, snapshot testing is a convenient mechanism to ensure that certain computed values don&#39;t change across test runs by storing the result on first run and comparing with the stored value in subsequent runs. <a href=\"https://jestjs.io/docs/snapshot-testing\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Jest docs</a> explain the concept in more detail.</p>\n<p>Fortuantely, using the library  <a href=\"https://www.npmjs.com/package/snap-shot-core\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">snap-shot-core</a> we can easily integrate snapshot testing with <code>node:test</code> without needing to switch to another testing library.</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Snap</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;snap-shot-core&quot;</span>\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;User insertion&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;inserts new row&#x27;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; &#123;\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">UserService</span>.<span class=\"hljs-title function_\">createUser</span>(&#123;\n            <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;janedoe@example.com&#x27;</span>\n        &#125;)\n        <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">UserService</span>.<span class=\"hljs-title function_\">findByEmail</span>(<span class=\"hljs-string\">&#x27;janedoe@example.com&#x27;</span>)\n        <span class=\"hljs-title class_\">Snap</span>.<span class=\"hljs-title function_\">core</span>(&#123;\n            <span class=\"hljs-attr\">what</span>: user,\n            <span class=\"hljs-attr\">file</span>: __filename,\n            <span class=\"hljs-attr\">specName</span>: <span class=\"hljs-string\">&#x27;inserts new row&#x27;</span>\n        &#125;)\n    &#125;)\n&#125;)</code></pre>\n\n<p>This will write a snapshot file if not present, or validate against once if present. </p>\n<p>Note that one caveat here is that, being a standalone library we needed to explicitly specify the specName.</p>\n<p>If using the <code>test</code> function from <code>node:test</code>, we have access to the test name through <code>testContext.name</code>, which we can pass to this lib. </p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Snap</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;snap-shot-core&quot;</span>\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;user insertion&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">testCtx</span>) =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">UserService</span>.<span class=\"hljs-title function_\">createUser</span>(&#123;\n        <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;janedoe@example.com&#x27;</span>\n    &#125;)\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">UserService</span>.<span class=\"hljs-title function_\">findByEmail</span>(<span class=\"hljs-string\">&#x27;janedoe@example.com&#x27;</span>)\n    <span class=\"hljs-title class_\">Snap</span>.<span class=\"hljs-title function_\">core</span>(&#123;\n        <span class=\"hljs-attr\">what</span>: user,\n        <span class=\"hljs-attr\">file</span>: __filename,\n        <span class=\"hljs-attr\">specName</span>: testCtx.<span class=\"hljs-property\">name</span>\n    &#125;)\n&#125;)</code></pre>\n\n<p>However, for BDD style tests, we don&#39;t have the test context injected. One convenient solution to prevent the spec names from getting out of sync is to use named functions. </p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;User insertion&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">insertsNewRow</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-comment\">// &lt;-- Spec name inferred from function name</span>\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">UserService</span>.<span class=\"hljs-title function_\">createUser</span>(&#123;\n            <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;janedoe@example.com&#x27;</span>\n        &#125;)\n        <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">UserService</span>.<span class=\"hljs-title function_\">findByEmail</span>(<span class=\"hljs-string\">&#x27;janedoe@example.com&#x27;</span>)\n        <span class=\"hljs-title class_\">Snap</span>.<span class=\"hljs-title function_\">core</span>(&#123;\n            <span class=\"hljs-attr\">what</span>: user,\n            <span class=\"hljs-attr\">file</span>: __filename,\n            <span class=\"hljs-attr\">specName</span>: insertsNewRow.<span class=\"hljs-property\">name</span>\n        &#125;)\n    &#125;)\n&#125;)</code></pre>\n\n<p>Lastly, if our test files are ES modules, we won&#39;t have access to <code>__filename</code>. We can instead use the <code>fileURLToPath</code> utility.</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Snap</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;snap-shot-core&quot;</span>\n<span class=\"hljs-keyword\">import</span> &#123; fileURLToPath &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;url&#x27;</span>\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;User insertion&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">insertsNewRow</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">UserService</span>.<span class=\"hljs-title function_\">createUser</span>(&#123;\n            <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;janedoe@example.com&#x27;</span>\n        &#125;)\n        <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">UserService</span>.<span class=\"hljs-title function_\">findByEmail</span>(<span class=\"hljs-string\">&#x27;janedoe@example.com&#x27;</span>)\n        <span class=\"hljs-title class_\">Snap</span>.<span class=\"hljs-title function_\">core</span>(&#123;\n            <span class=\"hljs-attr\">what</span>: user,\n            <span class=\"hljs-attr\">file</span>: <span class=\"hljs-title function_\">fileURLToPath</span>(<span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">url</span>),\n            <span class=\"hljs-attr\">specName</span>: insertsNewRow.<span class=\"hljs-property\">name</span>\n        &#125;)\n    &#125;)\n&#125;)</code></pre>\n",
            "tags": [
                "Javascript",
                "Node.js"
            ]
        },
        {
            "id": "https://lorefnon.me/2022/12/13/auto-transforming-modules-to-mjs-node/",
            "url": "https://lorefnon.me/2022/12/13/auto-transforming-modules-to-mjs-node/",
            "title": "Auto-transforming modules to mjs using babel",
            "date_published": "2022-12-13T00:00:00.000Z",
            "content_html": "<p>The unfortunate reality of being a js library author in present day world is that we need to deal with multiple module systems and bundlers, which make life hard. </p>\n<p>While commonjs usage is declining, many users are yet to move to esm fully.</p>\n<p>Solutions like tsup provide a nice DX for deploying libraries by bundling separately to an artifact of each configured module type. </p>\n<p>However, for nodejs libraries I often prefer to not bundle my libraries, and thankfully babel ecosystem makes it easy to handle these scenarios.</p>\n<p>This post outlines a simple babel setup where: </p>\n<ol>\n<li><p>We author code without needing explicit extensions in import: </p>\n <pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// bar.ts</span>\n\n<span class=\"hljs-keyword\">import</span> &#123; foo &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./foo&quot;</span></code></pre>\n</li>\n<li><p>As part of build, we generate <code>.mjs</code> modules where the relative imports are also transformed to use <code>.mjs</code>:</p>\n <pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// bar.mjs</span>\n\n<span class=\"hljs-keyword\">import</span> &#123; foo &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./foo.mjs&quot;</span></code></pre></li>\n</ol>\n<p>Benefit of this setup is that the generated .mjs modules can co-exist alongside .cjs modules.</p>\n<p>Consumers of the module can either explicitly import with mjs extension (eg. <code>import &#123; foo &#125; from &quot;foo-lib/foo.mjs&quot;</code>) or configure their bundler&#x2F;runtime to default to mjs if they prefer mjs.</p>\n<p>Note that this setup does not fully emulate node-specific module resolution. For example: <code>import &#123; foo &#125; from &quot;./foo&quot;</code> will not be auto-resolved to <code>import &#123; foo &#125; from &quot;./foo/index.js&quot;</code> if foo is directory.</p>\n<p>Babel config: </p>\n<pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;\n    <span class=\"hljs-attr\">presets</span>: [\n        <span class=\"hljs-string\">&#x27;@babel/preset-typescript&#x27;</span>,\n        [<span class=\"hljs-string\">&#x27;@babel/preset-env&#x27;</span>, &#123;\n            <span class=\"hljs-attr\">targets</span>: &#123;\n                <span class=\"hljs-attr\">node</span>: <span class=\"hljs-number\">16</span>\n            &#125;,\n            <span class=\"hljs-attr\">modules</span>: <span class=\"hljs-literal\">false</span>\n        &#125;]\n    ],\n    <span class=\"hljs-attr\">plugins</span>: [\n        [<span class=\"hljs-string\">&#x27;babel-plugin-replace-import-extension&#x27;</span>, &#123;\n            <span class=\"hljs-attr\">extMapping</span>: &#123;\n                <span class=\"hljs-string\">&#x27;&#x27;</span>: <span class=\"hljs-string\">&#x27;.mjs&#x27;</span>\n            &#125;\n        &#125;]\n    ]\n&#125;</code></pre>\n\n<pre><code class=\"hljs sh\">babel src \\\n    --config-file ./babel.esm.config.js \\\n    --out-dir dist \\\n    --out-file-extension <span class=\"hljs-string\">&quot;.mjs&quot;</span> \\\n    --extensions <span class=\"hljs-string\">&quot;.ts&quot;</span> \\\n    --ignore <span class=\"hljs-string\">&quot;**/*.d.ts&quot;</span></code></pre>\n\n",
            "tags": [
                "Javascript",
                "Babel"
            ]
        },
        {
            "id": "https://lorefnon.me/2022/12/06/being-explicit-about-implementing-interfaces-in-golang/",
            "url": "https://lorefnon.me/2022/12/06/being-explicit-about-implementing-interfaces-in-golang/",
            "title": "Being explicit about implementing interfaces in Golang",
            "date_published": "2022-12-06T00:00:00.000Z",
            "content_html": "<p>Go embraces structural typing, so struct types don&#39;t need to explicitly implement interfaces in order to be used a concrete instance of the interface. This offers more flexibility over nominative typing (as in Java, C# etc.) esp. when integrating libraries that are unaware of each other. </p>\n<p>However, unlike typescript etc. go also does not offer a way to explicitly declare that a struct type is <strong>intended</strong> to satisfy an interface. </p>\n<p>The result of this is that if someone later refactors a method of the struct such that it no longer implements the interface it used to before, then a type error is not immediately visible in the same file. Rather the location of error is the use site where an instance of the interface is expected. This is more problematic if such a use site does not even exist in the current repo.</p>\n<p>I found this to be a periodic annoyance when implementing gRPC API specs where the service structs are always intended to implement the interfaces generated from the API spec, and any breakage should be immediately noticed and preferrably identified close to the service implementation.</p>\n<p>Fortunately, the solution is pretty simple: just add a struct method that returns an instance of the interface. </p>\n<pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> UserQueryService <span class=\"hljs-keyword\">struct</span> &#123;\n    <span class=\"hljs-comment\">// Members omitted</span>\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *UserQueryService)</span></span> ASUserQueryServiceHandler() pbconnect.UserQueryServiceHandler &#123;\n\t<span class=\"hljs-keyword\">return</span> s\n&#125;</code></pre>\n\n<p>Now if we introduce any error that makes UserQueryService incompatible with <code>pbconnect.UserQueryServiceHandler</code> interface, a compile time error will be reported in the above method.</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://lorefnon.me/2022/12/06/configuring-cloudfront-as-non-caching-reverse-proxy-for-api-backend/",
            "url": "https://lorefnon.me/2022/12/06/configuring-cloudfront-as-non-caching-reverse-proxy-for-api-backend/",
            "title": "Using CDK to configure cloudfront as non-caching reverse proxy for API backend",
            "date_published": "2022-12-06T00:00:00.000Z",
            "content_html": "<p>Cloudfront is primarily a CDN, but it is often also convenient to use it as reverse proxy for a backend service. This is especially convenient when the entire frontend SPA (including HTML) is already hosted from Cloudfront and we don&#39;t want to support CORS in our backend API that this frontend talks to.</p>\n<p>Reusing Cloudfront as a reverse proxy in such cases ensures that both our frontend and backend can be available from the same domain. However, in such case we must take special care to ensure that our backend responses do get unexpectedly cached by Cloudfront. This post outlines the CDK configuration to facilitate this.</p>\n<p>A minimal Cloudfront setup for an SPA may look something like this: </p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> cdk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib&quot;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> s3 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib/aws-s3&quot;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> cf <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib/aws-cloudfront&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FrontendStack</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">cdk.Stack</span> &#123;\n  publicAssetsS3Bucket = <span class=\"hljs-keyword\">new</span> s3.<span class=\"hljs-title class_\">Bucket</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&#x27;PublicAssetsS3Bucket&#x27;</span>, &#123;\n    <span class=\"hljs-attr\">removalPolicy</span>: cdk.<span class=\"hljs-property\">RemovalPolicy</span>.<span class=\"hljs-property\">RETAIN</span>,\n    <span class=\"hljs-attr\">publicReadAccess</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">websiteIndexDocument</span>: <span class=\"hljs-string\">&quot;index.html&quot;</span>,\n    <span class=\"hljs-attr\">versioned</span>: <span class=\"hljs-literal\">false</span>,\n  &#125;)\n\n  s3Origin = <span class=\"hljs-keyword\">new</span> origins.<span class=\"hljs-title function_\">S3Origin</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">publicAssetsS3Bucket</span>);\n\n  cfDistribution = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">Distribution</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&#x27;CFDistribution&#x27;</span>, &#123;\n    <span class=\"hljs-attr\">defaultBehavior</span>: &#123;\n      <span class=\"hljs-attr\">origin</span>: s3Origin,\n    &#125;,\n    <span class=\"hljs-comment\">// Certificate and domain configuration omitted</span>\n  &#125;);\n&#125;</code></pre>\n\n<p>Here our CF Distribution is backed by an S3 bucket.</p>\n<p>Now, to support reverse proxying to an API we need an additional origin. While adding this origin, we will also want to configure additional policies to ensure that the responses from this origin do not get cached: </p>\n<pre><code class=\"hljs ts\">dist.<span class=\"hljs-title function_\">addBehavior</span>(<span class=\"hljs-string\">&quot;/api/*&quot;</span>, apiOrigin, &#123;\n    <span class=\"hljs-attr\">responseHeadersPolicy</span>: cfAPIRespHeadersPolicy,\n    <span class=\"hljs-attr\">allowedMethods</span>: cf.<span class=\"hljs-property\">AllowedMethods</span>.<span class=\"hljs-property\">ALLOW_ALL</span>,\n    <span class=\"hljs-attr\">cachePolicy</span>: cfApiCachePolicy,\n    <span class=\"hljs-attr\">originRequestPolicy</span>: cfApiOriginReqPolicy,\n&#125;);</code></pre>\n\n<p>It is important to explicitly allow all methods because CF by default permits only GET &amp; HEAD requests, and other HTTP verbs will be rejected.</p>\n<p>Let&#39;s next look at the associated policies: </p>\n<p>Following Response headers policy primary hints browsers to not cache the API responses:</p>\n<pre><code class=\"hljs ts\">cfAPIRespHeadersPolicy = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">ResponseHeadersPolicy</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;CFAPIRespHeadersPolicy&quot;</span>, &#123;\n    <span class=\"hljs-attr\">customHeadersBehavior</span>: &#123;\n      <span class=\"hljs-attr\">customHeaders</span>: [\n        &#123;\n          <span class=\"hljs-attr\">header</span>: <span class=\"hljs-string\">&quot;Cache-Control&quot;</span>,\n          <span class=\"hljs-attr\">override</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;no-cache&quot;</span>,\n        &#125;,\n      ],\n    &#125;,\n&#125;);</code></pre>\n\n<p>The Cache policy will ensure that cloudfront itself does not cache the responses from our API backend: </p>\n<pre><code class=\"hljs ts\">cfApiCachePolicy = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">CachePolicy</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;ApiCachePolicy&quot;</span>, &#123;\n  <span class=\"hljs-attr\">defaultTtl</span>: cdk.<span class=\"hljs-property\">Duration</span>.<span class=\"hljs-title function_\">seconds</span>(<span class=\"hljs-number\">0</span>),\n  <span class=\"hljs-attr\">maxTtl</span>: cdk.<span class=\"hljs-property\">Duration</span>.<span class=\"hljs-title function_\">seconds</span>(<span class=\"hljs-number\">1</span>),\n  <span class=\"hljs-attr\">queryStringBehavior</span>: cf.<span class=\"hljs-property\">CacheQueryStringBehavior</span>.<span class=\"hljs-title function_\">all</span>(),\n  <span class=\"hljs-attr\">headerBehavior</span>: cf.<span class=\"hljs-property\">CacheHeaderBehavior</span>.<span class=\"hljs-title function_\">allowList</span>(<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>)\n&#125;);</code></pre>\n\n<p>Note that we also need to explicitly allow the Authorization header otherwise it will be stripped by Cloudfront. </p>\n<p>Currently there appears to be a bug which prevents us from being able to specify a header behavior if all the ttls are 0, so we keep the maxTtl as 1s.</p>\n<p>Lastly, we need an OriginRequestPolicy that instructs Cloudfront to forward all query params &amp; cookies to the backend. In addition we can also specify any cloudfront specific headers here. In example below we add the <code>CloudFront-Viewer-Address</code> header which enables the backend to receive the actual IP of the user.</p>\n<pre><code class=\"hljs ts\">cfApiOriginReqPolicy = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">OriginRequestPolicy</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;ApiOriginReqPolicy&quot;</span>, &#123;\n    <span class=\"hljs-attr\">originRequestPolicyName</span>: <span class=\"hljs-string\">&quot;SampleApiOriginReqPolicy&quot;</span>,\n    <span class=\"hljs-attr\">cookieBehavior</span>: cf.<span class=\"hljs-property\">OriginRequestCookieBehavior</span>.<span class=\"hljs-title function_\">all</span>(),\n    <span class=\"hljs-attr\">headerBehavior</span>: cf.<span class=\"hljs-property\">OriginRequestHeaderBehavior</span>.<span class=\"hljs-title function_\">all</span>(\n      <span class=\"hljs-string\">&quot;CloudFront-Viewer-Address&quot;</span>\n    ),\n    <span class=\"hljs-attr\">queryStringBehavior</span>: cf.<span class=\"hljs-property\">OriginRequestQueryStringBehavior</span>.<span class=\"hljs-title function_\">all</span>(),\n&#125;);</code></pre>\n\n<p>Our final integration looks like this:</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> cdk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib&quot;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> s3 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib/aws-s3&quot;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> cf <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib/aws-cloudfront&quot;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> origins <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib/aws-cloudfront-origins&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FrontendStack</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">cdk.Stack</span> &#123;\n  publicAssetsS3Bucket = <span class=\"hljs-keyword\">new</span> s3.<span class=\"hljs-title class_\">Bucket</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&#x27;PublicAssetsS3Bucket&#x27;</span>, &#123;\n    <span class=\"hljs-attr\">removalPolicy</span>: cdk.<span class=\"hljs-property\">RemovalPolicy</span>.<span class=\"hljs-property\">RETAIN</span>,\n    <span class=\"hljs-attr\">publicReadAccess</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">websiteIndexDocument</span>: <span class=\"hljs-string\">&quot;index.html&quot;</span>,\n    <span class=\"hljs-attr\">versioned</span>: <span class=\"hljs-literal\">false</span>,\n  &#125;)\n\n  cfApiCachePolicy = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">CachePolicy</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;ApiCachePolicy&quot;</span>, &#123;\n    <span class=\"hljs-attr\">defaultTtl</span>: cdk.<span class=\"hljs-property\">Duration</span>.<span class=\"hljs-title function_\">seconds</span>(<span class=\"hljs-number\">0</span>),\n    <span class=\"hljs-attr\">maxTtl</span>: cdk.<span class=\"hljs-property\">Duration</span>.<span class=\"hljs-title function_\">seconds</span>(<span class=\"hljs-number\">1</span>),\n    <span class=\"hljs-attr\">queryStringBehavior</span>: cf.<span class=\"hljs-property\">CacheQueryStringBehavior</span>.<span class=\"hljs-title function_\">all</span>(),\n    <span class=\"hljs-attr\">headerBehavior</span>: cf.<span class=\"hljs-property\">CacheHeaderBehavior</span>.<span class=\"hljs-title function_\">allowList</span>(<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>)\n  &#125;);\n\n  cfApiOriginReqPolicy = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">OriginRequestPolicy</span>(\n    <span class=\"hljs-variable language_\">this</span>,\n    <span class=\"hljs-string\">&quot;ApiOriginReqPolicy&quot;</span>,\n    &#123;\n      <span class=\"hljs-attr\">originRequestPolicyName</span>: <span class=\"hljs-string\">&quot;SampleApiOriginReqPolicy&quot;</span>,\n      <span class=\"hljs-attr\">cookieBehavior</span>: cf.<span class=\"hljs-property\">OriginRequestCookieBehavior</span>.<span class=\"hljs-title function_\">all</span>(),\n      <span class=\"hljs-attr\">headerBehavior</span>: cf.<span class=\"hljs-property\">OriginRequestHeaderBehavior</span>.<span class=\"hljs-title function_\">all</span>(\n        <span class=\"hljs-string\">&quot;CloudFront-Viewer-Address&quot;</span>,\n        <span class=\"hljs-string\">&quot;CloudFront-Viewer-Country&quot;</span>,\n        <span class=\"hljs-string\">&quot;CloudFront-Viewer-City&quot;</span>,\n        <span class=\"hljs-string\">&quot;CloudFront-Viewer-Country-Region&quot;</span>\n      ),\n      <span class=\"hljs-attr\">queryStringBehavior</span>: cf.<span class=\"hljs-property\">OriginRequestQueryStringBehavior</span>.<span class=\"hljs-title function_\">all</span>(),\n    &#125;\n  );\n\n  s3Origin = <span class=\"hljs-keyword\">new</span> origins.<span class=\"hljs-title function_\">S3Origin</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">publicAssetsS3Buckets</span>[idx]);\n\n  apiOrigin = <span class=\"hljs-keyword\">new</span> origins.<span class=\"hljs-title class_\">HttpOrigin</span>(serverHost!);\n  \n  cfAPIRespHeadersPolicy = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">ResponseHeadersPolicy</span>(\n    <span class=\"hljs-variable language_\">this</span>,\n    <span class=\"hljs-string\">&quot;cfHTMLRespHeadersPolicy&quot;</span>,\n    &#123;\n      <span class=\"hljs-attr\">customHeadersBehavior</span>: &#123;\n        <span class=\"hljs-attr\">customHeaders</span>: [\n          &#123;\n            <span class=\"hljs-attr\">header</span>: <span class=\"hljs-string\">&quot;Cache-Control&quot;</span>,\n            <span class=\"hljs-attr\">override</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;no-cache&quot;</span>,\n          &#125;,\n        ],\n      &#125;,\n    &#125;\n  );\n\n  configureCFDistribution = (): cf.<span class=\"hljs-property\">Distribution</span> =&gt; &#123;\n      <span class=\"hljs-keyword\">const</span> dist = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">Distribution</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&#x27;CFDistribution&#x27;</span>, &#123;\n        <span class=\"hljs-attr\">defaultBehavior</span>: &#123;\n          <span class=\"hljs-attr\">origin</span>: s3Origin,\n        &#125;,\n        <span class=\"hljs-comment\">// Certificate and domain configuration omitted</span>\n      &#125;);\n\n      dist.<span class=\"hljs-title function_\">addBehavior</span>(<span class=\"hljs-string\">&quot;/api/*&quot;</span>, apiOrigin, &#123;\n        <span class=\"hljs-attr\">responseHeadersPolicy</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfAPIRespHeadersPolicy</span>,\n        <span class=\"hljs-attr\">allowedMethods</span>: cf.<span class=\"hljs-property\">AllowedMethods</span>.<span class=\"hljs-property\">ALLOW_ALL</span>,\n        <span class=\"hljs-attr\">cachePolicy</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfApiCachePolicy</span>,\n        <span class=\"hljs-attr\">originRequestPolicy</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfApiOriginReqPolicy</span>,\n      &#125;);\n\n      <span class=\"hljs-keyword\">return</span> dist;\n  &#125;\n\n  cfDistribution = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">configureCFDistribution</span>()\n&#125;</code></pre>\n",
            "tags": [
                "typescript",
                "cloudfront",
                "AWS",
                "CDK"
            ]
        },
        {
            "id": "https://lorefnon.me/2022/11/15/configuring-cloudfront-functions-for-spa-routing-using-cdk/",
            "url": "https://lorefnon.me/2022/11/15/configuring-cloudfront-functions-for-spa-routing-using-cdk/",
            "title": "Configuring cloudfront functions for SPA routing with CDK",
            "date_published": "2022-11-15T00:00:00.000Z",
            "content_html": "<p>When building <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">single page applications</a>, it is convenient to serve the complete website including the HTML files from a CDN like AWS cloudfront. All the assets can then be potentially served from a location close to the user. This works particularly well for PWAs and dynamic client rendered websites. </p>\n<p>It is also common to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">push based</a> routing in single page applications. However the first request would always go the server so we need to setup some server side routing as well to route these requests to an appropriate HTML file. In the simplest case we&#39;d route all incoming requests to our domain to a single index.html file, and the javascript referenced in the HTML file will take over once the browser renders it.</p>\n<p>This is easily accomplished via <a href=\"https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">cloudfront functions</a>, which are a <a href=\"https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">recently introduced</a> cost effective alternative to <a href=\"https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">lambda@edge</a>. </p>\n<p>lambda@edge may be more suitable if you need to execute complex logic and need access to a more full-fledged execution environment like node.js (For example if you are doing server side rendering). However for simpler use cases like changing routes, adapting headers etc. cloudfront functions offer a simpler and more cost effective alternative.</p>\n<p>Here is a simple function to route all requests which don&#39;t have an extension in the url to index.html: </p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// path-redir-rule.js</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\">event</span>) &#123;\n    <span class=\"hljs-keyword\">var</span> request = event.<span class=\"hljs-property\">request</span>\n    <span class=\"hljs-keyword\">var</span> hasExtension = request.<span class=\"hljs-property\">uri</span>.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>)\n    <span class=\"hljs-keyword\">if</span> (!hasExtension) &#123;\n        request.<span class=\"hljs-property\">uri</span> = <span class=\"hljs-string\">&#x27;/app/index.html&#x27;</span>\n    &#125;\n    <span class=\"hljs-keyword\">return</span> request;\n&#125;</code></pre>\n\n<p>Because we love <a href=\"https://en.wikipedia.org/wiki/Infrastructure_as_code\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">IaC</a>, we will use <a href=\"https://aws.amazon.com/cdk/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">CDK</a> to wire up our cloudfront. This post is not intended to be a good first intro to CDK, but here are a few if you are using it for first time: <a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-cdk-getting-started.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">[1]</a>, <a href=\"https://dev.to/kevin_odongo35/getting-started-with-aws-cdk-2k19\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">[2]</a>.</p>\n<p>It should not surprise anyone that AWS CDK has good support for AWS Cloudfront. </p>\n<p>Here is a simple stack that uses CDK with typescript to wire up a cloudfront stack backed by an S3 bucket. </p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;node:path&quot;</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> cdk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib&quot;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> s3 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib/aws-s3&quot;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> cf <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib/aws-cloudfront&quot;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> origins <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;aws-cdk-lib/aws-cloudfront-origins&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FrontendStack</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">cdk.Stack</span> &#123;\n  publicAssetsS3Bucket = <span class=\"hljs-keyword\">new</span> s3.<span class=\"hljs-title class_\">Bucket</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;PublicAssetsBucket&quot;</span>, &#123;\n    <span class=\"hljs-attr\">removalPolicy</span>: cdk.<span class=\"hljs-property\">RemovalPolicy</span>.<span class=\"hljs-property\">RETAIN</span>,\n    <span class=\"hljs-attr\">publicReadAccess</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">websiteIndexDocument</span>: <span class=\"hljs-string\">&quot;index.html&quot;</span>,\n    <span class=\"hljs-attr\">versioned</span>: <span class=\"hljs-literal\">false</span>,\n  &#125;);\n\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfOrigin</span> = <span class=\"hljs-keyword\">new</span> origins.<span class=\"hljs-title function_\">S3Origin</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">publicAssetsS3Bucket</span>);\n\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfDistribution</span> = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">Distribution</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;CFDistribution&quot;</span>, &#123;\n    <span class=\"hljs-attr\">defaultBehavior</span>: &#123;\n      <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfOrigin</span>\n    &#125;\n  &#125;);\n&#125;</code></pre>\n\n<p>In a production application we will also configure certifications and domains for the distribution, which I have omited to keep the post focussed, but here is <a href=\"https://blog.dennisokeeffe.com/blog/2021-08-08-building-a-cdn-with-s3-cloudfront-and-the-aws-cdk\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">another post</a> that convers those things too.</p>\n<p>We can now update this CF distribution configuration to use our function.</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FrontendStack</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">cdk.Stack</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  publicAssetsS3Bucket = <span class=\"hljs-keyword\">new</span> s3.<span class=\"hljs-title class_\">Bucket</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;PublicAssetsBucket&quot;</span>, {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-attr\">removalPolicy</span>: cdk.<span class=\"hljs-property\">RemovalPolicy</span>.<span class=\"hljs-property\">RETAIN</span>,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-attr\">publicReadAccess</span>: <span class=\"hljs-literal\">true</span>,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-attr\">websiteIndexDocument</span>: <span class=\"hljs-string\">&quot;index.html&quot;</span>,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-attr\">versioned</span>: <span class=\"hljs-literal\">false</span>,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  })\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">  cfPathRedirFunction = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;PathRedirFunction&quot;</span>, {\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">      <span class=\"hljs-attr\">code</span>: cf.<span class=\"hljs-property\">FunctionCode</span>.<span class=\"hljs-title function_\">fromFile</span>({\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">        <span class=\"hljs-attr\">filePath</span>: path.<span class=\"hljs-title function_\">join</span>(\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">          __dirname,\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">          <span class=\"hljs-string\">&quot;./cf-functions/path-redir-rule.js&quot;</span>\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">        ),\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">      }),\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">    });\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfOrigin</span> = <span class=\"hljs-keyword\">new</span> origins.<span class=\"hljs-title function_\">S3Origin</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">publicAssetsS3Bucket</span>);\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfDistribution</span> = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">Distribution</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;CFDistribution&quot;</span>, {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-attr\">defaultBehavior</span>: {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">      <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfOrigin</span>,\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">      <span class=\"hljs-attr\">functionAssociations</span>: [\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">        {\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">          <span class=\"hljs-attr\">function</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfPathRedirFunction</span>,\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">          <span class=\"hljs-attr\">eventType</span>: cf.<span class=\"hljs-property\">FunctionEventType</span>.<span class=\"hljs-property\">VIEWER_REQUEST</span>,\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">        }\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">      ],\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    }\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  });\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n\n<p>Since this function will need to be run before the target is selected, we needed to use <code>VIEWER_REQUEST</code> event type.</p>\n<p>We can also consider adding a response function which adds headers to prevent the browser from caching our html pages, as we can expect it to frequently change.</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-comment\">// prevent-html-caching.js</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handler</span>(<span class=\"hljs-params\">event</span>) &#123;\n    <span class=\"hljs-keyword\">var</span> request = event.<span class=\"hljs-property\">request</span>\n    <span class=\"hljs-keyword\">var</span> parts = request.<span class=\"hljs-property\">uri</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>)\n    <span class=\"hljs-keyword\">var</span> lastPart = parts[parts.<span class=\"hljs-property\">length</span>-<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">var</span> response = event.<span class=\"hljs-property\">response</span>;\n    <span class=\"hljs-keyword\">var</span> headers = response.<span class=\"hljs-property\">headers</span>;\n    <span class=\"hljs-keyword\">if</span> (lastPart.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/\\.html$/</span>) || lastPart.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/^[^.]*$/</span>)) &#123;\n        headers[<span class=\"hljs-string\">&#x27;cache-control&#x27;</span>] = &#123; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;no-cache&#x27;</span> &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> response\n&#125;</code></pre>\n\n<p>Because this function needs access to the response being sent, the function event type needs to be <code>VIEWER_RESPONSE</code>.</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FrontendStack</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">cdk.Stack</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  <span class=\"hljs-comment\">// ...</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">  cfHtmlRespFunction = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;HTMLRespFunction&quot;</span>, {\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-attr\">code</span>: cf.<span class=\"hljs-property\">FunctionCode</span>.<span class=\"hljs-title function_\">fromFile</span>({\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">      <span class=\"hljs-attr\">filePath</span>: path.<span class=\"hljs-title function_\">join</span>(\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">        __dirname,\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">        <span class=\"hljs-string\">&quot;./cf-functions/prevent-html-caching.js&quot;</span>\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">      ),\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">    }),\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">  });\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfOrigin</span> = <span class=\"hljs-keyword\">new</span> origins.<span class=\"hljs-title function_\">S3Origin</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">publicAssetsS3Bucket</span>);\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfDistribution</span> = <span class=\"hljs-keyword\">new</span> cf.<span class=\"hljs-title class_\">Distribution</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;CFDistribution&quot;</span>, {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-attr\">defaultBehavior</span>: {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">      <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfDistribution</span>,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">      <span class=\"hljs-attr\">functionAssociations</span>: [\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">        {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">          <span class=\"hljs-attr\">function</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfPathRedirFunction</span>,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">          <span class=\"hljs-attr\">eventType</span>: cf.<span class=\"hljs-property\">FunctionEventType</span>.<span class=\"hljs-property\">VIEWER_REQUEST</span>,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">        },\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">        {\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">          <span class=\"hljs-attr\">function</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cfHtmlRespFunction</span>,\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">          <span class=\"hljs-attr\">eventType</span>: cf.<span class=\"hljs-property\">FunctionEventType</span>.<span class=\"hljs-property\">VIEWER_RESPONSE</span>,\n</td></tr><tr style=\"border:none;background:#fffacd;\" class=\"hlcode-line  hlcode-line-highlight\" ><td style=\"border:none\" class=\"hlcode-code-cell\">        },\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">      ],\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    }\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">  });\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n\n<p>And that is it. Run <code>cdk synth</code> and <code>cdk deploy</code> to deploy or update your cloudfront setup.</p>\n",
            "tags": [
                "cloudfront",
                "AWS",
                "CDK"
            ]
        },
        {
            "id": "https://lorefnon.me/2022/10/01/embedding-sql-migrations-in-go-binary/",
            "url": "https://lorefnon.me/2022/10/01/embedding-sql-migrations-in-go-binary/",
            "title": "Embedding sql migrations in go binary",
            "date_published": "2022-10-01T00:00:00.000Z",
            "content_html": "<p><a href=\"github.com/golang-migrate/migrate\">Go-migrate</a> is a simple and easy to use database migration (schema evolution) library for go with good support for many mainstream databases. This post is a quick recipe on how we can bundle the migrations (sql patch files) within our go binary - this is particularly helpful when the app is distributed a single binary without dependencies.</p>\n<p>Go stdlib includes an <a href=\"https://pkg.go.dev/embed\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">embed package</a> that simplifies accessing files embedded in the running go program. Also go-migrate has support for httpfs as a source that makes it easy to integrate the two.</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">package</span> store\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">import</span> (\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-string\">&quot;database/sql&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-string\">&quot;embed&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-string\">&quot;net/http&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-string\">&quot;path/filepath&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-string\">&quot;github.com/golang-migrate/migrate/v4&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-string\">&quot;github.com/golang-migrate/migrate/v4/database/sqlite3&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-string\">&quot;github.com/golang-migrate/migrate/v4/source/httpfs&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t_ <span class=\"hljs-string\">&quot;github.com/mattn/go-sqlite3&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Our migration files reside in db_migrations directory within this package</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// eg. db_migrations/</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//     |_ 001_create_tables.up.sql</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//     |_ 001_create_tables.down.sql</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//go:embed db_migrations</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">var</span> migrations embed.FS\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">migrateSchema</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">error</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    db, err := sql.Open(<span class=\"hljs-string\">&quot;sqlite3&quot;</span>, dbFilePath)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> { <span class=\"hljs-keyword\">return</span> err }\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    driver, err := sqlite3.WithInstance(db, <span class=\"hljs-built_in\">new</span>(sqlite3.Config))\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> { <span class=\"hljs-keyword\">return</span> err }\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    sourceInstance, err := httpfs.New(http.FS(migrations), <span class=\"hljs-string\">&quot;db_migrations&quot;</span>)    \n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> { <span class=\"hljs-keyword\">return</span> err }\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    migrator, err := migrate.NewWithInstance(<span class=\"hljs-string\">&quot;httpfs&quot;</span>, sourceInstance, <span class=\"hljs-string\">&quot;sqlite3&quot;</span>, driver) \n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> { <span class=\"hljs-keyword\">return</span> err }\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    err = migrator.Up()\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-keyword\">return</span> err\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n\n",
            "tags": [
                "go",
                "sql",
                "go-migrate"
            ]
        },
        {
            "id": "https://lorefnon.me/2022/10/01/using-buf-connect-with-chi/",
            "url": "https://lorefnon.me/2022/10/01/using-buf-connect-with-chi/",
            "title": "Using chi router and connect-go together",
            "date_published": "2022-10-01T00:00:00.000Z",
            "content_html": "<p><a href=\"https://github.com/bufbuild/connect-go\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">connect-go</a> is a protobuf RPC implementation, touted as a better gRPC. I have been using it for few weeks and have found it to be quite enjoyable.</p>\n<p>This post is a quick recipe on how to use it alongside chi router. The <a href=\"https://github.com/bufbuild/connect-go#a-small-example\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">official docs</a> already illustrate using connect with net&#x2F;http2 directly. But if you are incrementally adopting connect in a project, or need a few REST style endpoints for backward compatibility, or for file uploads or serving server generated templates, it is easy to use connect alongside the <a href=\"https://go-chi.io/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">chi router</a>. </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">mux := chi.NewRouter()\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Middlewares</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">mux.Use(middleware.Logger)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// HTTP Endpoints</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">mux.Post(<span class=\"hljs-string\">&quot;/upload&quot;</span>, handleFileUpload)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Connect API Endpoints</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Associate the Handlers generated from the protobuf file</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">path, handler := pbconnect.SampleServiceHandler(\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-comment\">// Pass service implementation here:</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    &amp;SampleServiceImpl{},\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">mux.Handle(path+<span class=\"hljs-string\">&quot;*&quot;</span>, handler) <span class=\"hljs-comment\">// &lt;----- Note The &quot;*&quot; wildcard suffix here</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Use h2c so we can serve HTTP/2 without TLS.</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">handler := h2c.NewHandler(mux, &amp;http2.Server{})\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">err := http.ListenAndServe(<span class=\"hljs-string\">&quot;localhost:8080&quot;</span>, handler)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;Failed to init http server&quot;</span>)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n",
            "tags": [
                "go",
                "chi",
                "connect"
            ]
        },
        {
            "id": "https://lorefnon.me/2022/09/04/getting-started-with-jet-query-builder-for-golang/",
            "url": "https://lorefnon.me/2022/09/04/getting-started-with-jet-query-builder-for-golang/",
            "title": "Getting started with Jet Query builder for Go",
            "date_published": "2022-09-04T00:00:00.000Z",
            "content_html": "<p>I was recently looking for a good query builder for a go application I am prototyping, and settled on <a href=\"https://github.com/go-jet/jet\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Jet</a>. Jet has a nice <a href=\"https://github.com/go-jet/jet/wiki\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">wiki</a>, but limited introductory material as of this writing, so this post is an attempt to collect a set of small recipies to help you get started with it quicker.</p>\n<h2 id=\"Why-Jet\"><a href=\"#Why-Jet\" class=\"headerlink\" title=\"Why Jet ?\"></a>Why Jet ?</h2><p>Usually larger applications tend to adopt fully featured ORMs early on, where as smaller micro-services often eschew the complexity that comes with a full ORM and directly use the low level database adapters.</p>\n<p>Query builders like jet sit somewhere between the two in the abstraction ladder. </p>\n<p>Unlike a full ORM it doesn&#39;t have features like dirty tracking, model lifecycle hooks etc. </p>\n<p>Also unlike directly using a database driver, it provides a type-safe API to construct SQL queries which I find much more ergonomic and less error-prone than raw parameterized queries or (ugh) constructing complex sql with string interpolations.</p>\n<p>Jet fits a sweet spot for me, because: </p>\n<ol>\n<li>It is not overly opinionated around how database should be accessed.</li>\n<li>Whatever you can do with SQL, you can also do with Jet</li>\n<li>It is performant, very little overhead over direct SQL</li>\n<li>It is type-safe - no ugly string interpolations, no SQL syntax errors in corner cases.</li>\n<li>The API closely matches the SQL syntax - so less learning curve is required</li>\n</ol>\n<h2 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use ?\"></a>How to use ?</h2><p>Jet is easy to get started with. It is designed to work with the <code>database/sql</code> package in go stdlib, and only offers a query builder. The database&#x2F;sql package is used for actually executing the queries on the database.</p>\n<p>In this post we will use a sqlite, but jet offers support for most mainstream databases.</p>\n<h3 id=\"Configuring-the-codegenerator\"><a href=\"#Configuring-the-codegenerator\" class=\"headerlink\" title=\"Configuring the codegenerator\"></a>Configuring the codegenerator</h3><p>Jet offers what is called a database-first approach. In this approach, you update your database first (a migration system is recommended) and then generate code from the database for all your tables. </p>\n<p>This ensures that the table mapping code is always up-to-date and you don&#39;t need to specify every column being added twice - once when updating the database, and once in application code. </p>\n<p>Let us say we have following sql tables defined in test.sqlite3: </p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span>\n  notebook (id <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">36</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> key, title <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">500</span>));\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span>\n  note (\n    id <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">36</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> key,\n    title <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">500</span>),\n    notebook_id <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">36</span>) <span class=\"hljs-keyword\">references</span> notebook (id) <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">delete</span> cascade <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">update</span> restrict\n  );</code></pre>\n\n<p>To generate the code, we&#39;ll first need to install the jet cli. We will also need to ensure that the specific database drivers we need are enabled through build tags: </p>\n<pre><code class=\"hljs plaintext\">go install -tags &#x27;sqlite3&#x27; github.com/go-jet/jet/v2/cmd/jet@latest</code></pre>\n\n<p>Note that you will need to change the tags if you are using another database.  Also if you are using sqlite, and need to use some of the sqlite extensions, you&#39;ll need additional build tags for those too, for example: </p>\n<pre><code class=\"hljs plaintext\">go install -tags &#x27;json1 fts5 sqlite3&#x27; github.com/go-jet/jet/v2/cmd/jet@latest</code></pre>\n\n<p>Inside a go project, we can generate the jet mapper code for this database using a command like: </p>\n<pre><code class=\"hljs plaintext\">jet -source=sqlite -dsn=&quot;/tmp/test.sqlite3&quot; -path=./gen/jet</code></pre>\n\n<p>if you use a migration system like dbmate, go-migrate or atlas, you&#39;d typically want to exclude the tables used only for migration bookkeeping.</p>\n<pre><code class=\"hljs plaintext\">jet -source=sqlite -dsn=&quot;/tmp/test.sqlite3&quot; -path=./gen/jet -ignore-tables=schema_migrations</code></pre>\n\n<p>Ok, so now let&#39;s look at the generated files: For every table we have a table mapper file and model file. For example for notebook we have the following table mapper file:</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Code generated by go-jet DO NOT EDIT.</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// WARNING: Changes to this file may cause incorrect behavior</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// and will be lost if the code is regenerated</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">package</span> table\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">import</span> (\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-string\">&quot;github.com/go-jet/jet/v2/sqlite&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">var</span> Notebook = newNotebookTable(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;notebook&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">type</span> notebookTable <span class=\"hljs-keyword\">struct</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tsqlite.Table\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">//Columns</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tID    sqlite.ColumnString\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tTitle sqlite.ColumnString\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tAllColumns     sqlite.ColumnList\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMutableColumns sqlite.ColumnList\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">type</span> NotebookTable <span class=\"hljs-keyword\">struct</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tnotebookTable\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tEXCLUDED notebookTable\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// AS creates new NotebookTable with assigned alias</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a NotebookTable)</span></span> AS(alias <span class=\"hljs-type\">string</span>) *NotebookTable {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> newNotebookTable(a.SchemaName(), a.TableName(), alias)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Schema creates new NotebookTable with assigned schema name</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a NotebookTable)</span></span> FromSchema(schemaName <span class=\"hljs-type\">string</span>) *NotebookTable {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> newNotebookTable(schemaName, a.TableName(), a.Alias())\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// WithPrefix creates new NotebookTable with assigned table prefix</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a NotebookTable)</span></span> WithPrefix(prefix <span class=\"hljs-type\">string</span>) *NotebookTable {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> newNotebookTable(a.SchemaName(), prefix+a.TableName(), a.TableName())\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// WithSuffix creates new NotebookTable with assigned table suffix</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a NotebookTable)</span></span> WithSuffix(suffix <span class=\"hljs-type\">string</span>) *NotebookTable {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> newNotebookTable(a.SchemaName(), a.TableName()+suffix, a.TableName())\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newNotebookTable</span><span class=\"hljs-params\">(schemaName, tableName, alias <span class=\"hljs-type\">string</span>)</span></span> *NotebookTable {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> &amp;NotebookTable{\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tnotebookTable: newNotebookTableImpl(schemaName, tableName, alias),\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tEXCLUDED:      newNotebookTableImpl(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;excluded&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>),\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newNotebookTableImpl</span><span class=\"hljs-params\">(schemaName, tableName, alias <span class=\"hljs-type\">string</span>)</span></span> notebookTable {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">var</span> (\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tIDColumn       = sqlite.StringColumn(<span class=\"hljs-string\">&quot;id&quot;</span>)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tTitleColumn    = sqlite.StringColumn(<span class=\"hljs-string\">&quot;title&quot;</span>)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tallColumns     = sqlite.ColumnList{IDColumn, TitleColumn}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tmutableColumns = sqlite.ColumnList{TitleColumn}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> notebookTable{\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tTable: sqlite.NewTable(schemaName, tableName, alias, allColumns...),\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\t<span class=\"hljs-comment\">//Columns</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tID:    IDColumn,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tTitle: TitleColumn,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tAllColumns:     allColumns,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tMutableColumns: mutableColumns,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n\n<p>This file initializes the specific table objects for constructing SQL queries.</p>\n<p>We also have a model file which is a simple go struct representing a row in a table: </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Code generated by go-jet DO NOT EDIT.</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// WARNING: Changes to this file may cause incorrect behavior</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// and will be lost if the code is regenerated</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">//</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">package</span> model\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">type</span> Notebook <span class=\"hljs-keyword\">struct</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tID    <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`sql:&quot;primary_key&quot;`</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tTitle *<span class=\"hljs-type\">string</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n\n<p>We will have this pair generated for each table in our db. </p>\n<h2 id=\"Executing-queries\"><a href=\"#Executing-queries\" class=\"headerlink\" title=\"Executing queries\"></a>Executing queries</h2><p>Now that we have our code generated, we can use the generated API to query our database. </p>\n<p>Jet&#39;s api closely matches the SQL syntax. So to fetch a note with known title we can do something like: </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">import</span> (\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tm <span class=\"hljs-string\">&quot;example.com/rts/gen/jet/model&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tt <span class=\"hljs-string\">&quot;example.com/rts/gen/jet/table&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tjet <span class=\"hljs-string\">&quot;github.com/go-jet/jet/v2/sqlite&quot;</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">query := t.Note.\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    SELECT(t.Notebook.AllColumns).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    WHERE(t.Notebook.Title.EQ(<span class=\"hljs-string\">&quot;Test&quot;</span>))\n</td></tr></table></code></pre>\n\n<p>Note that this just creates the query. To actually execute it, we need a sql.DB instance. This would be created through the database&#x2F;sql package in go stdlib and is not jet specific. </p>\n<p>For SQLite all we need is the path to the database. For other database we can pass connection strings.</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">db, err := sql.Open(<span class=\"hljs-string\">&quot;sqlite3&quot;</span>, dbFilePath)\n</td></tr></table></code></pre>\n\n<p>Now we can run the query through the db instance and map the rows to our generated model structs: </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">var</span> notebooks []m.Notebook\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">err := t.Notebook.\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    SELECT(t.Notebook.AllColumns).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    WHERE(t.Notebook.Title.EQ(<span class=\"hljs-string\">&quot;Test&quot;</span>)).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    Query(db, &amp;notebooks)\n</td></tr></table></code></pre>\n\n<p>If the query succeeds our notebooks slice will be populated with the fetched rows.</p>\n<p>Note that we didn&#39;t have to deal with untyped data at any point. </p>\n<p>We are also not restricted to using the generated model types. The generated model types are provided as a convenience for common crud operations, but we will often need to define custom types when fetching subset of columns or when fetching data from multiple tables. </p>\n<p>Let&#39;s say we want to fetch not only the notebook, but all associated notes. To represent a note along with member notes, we can define following struct which composes the generated models:</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">type</span> NotebookWithNotes <span class=\"hljs-keyword\">struct</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    m.Notebook,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    Notes []m.Note\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n\n<p>and use that in our query:</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">var</span> notebooks []m.NotebookWithNotes\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">err := t.Notebook.\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    INNER_JOIN(t.Note, t.Note.NotebookID.EQ(t.Notebook.ID))\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    SELECT(t.Notebook.AllColumns).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    WHERE(t.Notebook.Title.EQ(<span class=\"hljs-string\">&quot;Test&quot;</span>)).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    Query(db, &amp;notebooks)\n</td></tr></table></code></pre>\n\n<p>The join syntax is pretty similar to what we would have expected from SQL. Also we didn&#39;t have to do anything special here to support mapping the flattened rows to hierarchical model. jet is able to automatically identify the Notebook fields from embedded struct and the Note fields in the member slice and populate them all from the rows in database. </p>\n<h2 id=\"Integration-with-context-propagation\"><a href=\"#Integration-with-context-propagation\" class=\"headerlink\" title=\"Integration with context propagation\"></a>Integration with context propagation</h2><p>Almost all web frameworks integrate with Go&#39;s context propagation system, and it is useful to take advantage of it so that when the context gets cancelled, unnecessary operations can be avoided in the backend. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-contexts-in-go\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">This DO post</a> goes into more details about the context mechanism in go. </p>\n<p>jet makes it easier to integrate this mechanism. If we have a context instance at our disposal (likely coming as an argument in our request handler from a web framework), we can pass that to the <code>QueryContext</code> function instead of using the <code>Query</code> function as above:</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">var</span> notebooks []m.NotebookWithNotes\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">err := t.Notebook.\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    INNER_JOIN(t.Note, t.Note.NotebookID.EQ(t.Notebook.ID))\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    SELECT(t.Notebook.AllColumns).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    WHERE(t.Notebook.Title.EQ(<span class=\"hljs-string\">&quot;Test&quot;</span>)).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    Query(db, &amp;notebooks)\n</td></tr></table></code></pre>\n\n<h2 id=\"Query-Logging\"><a href=\"#Query-Logging\" class=\"headerlink\" title=\"Query Logging\"></a>Query Logging</h2><p>It is clear now that jet enables us to construct complex queries dynamically in our application. It is often useful to log these queries in development so that we can see what exactly is getting executed. This is also useful for DBA audits.</p>\n<p>To make this possible, jet provides a <code>SetQueryLogger</code> API, which can be used to log operations through any logging library: </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">jet.SetQueryLogger(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, info jet.QueryInfo)</span></span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tquery, args := info.Statement.Sql()\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tzerolog.Debug().\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tInt64(<span class=\"hljs-string\">&quot;DurationMS&quot;</span>, info.Duration.Milliseconds()).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tMsgf(<span class=\"hljs-string\">&quot;SQL Query: SQL: %s\\nArgs: %+v&quot;</span>, query, args)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">})\n</td></tr></table></code></pre>\n\n<p>Above example uses zerolog, but we are free to use any logging library available for go.</p>\n<h2 id=\"Insert-x2F-Update\"><a href=\"#Insert-x2F-Update\" class=\"headerlink\" title=\"Insert&#x2F;Update\"></a>Insert&#x2F;Update</h2><p>Insert&#x2F;update APIs are also pretty similar to what we&#39;d expect from SQL. We can pass raw values or make use of model structs generated for us (recommended). Following example illustrates the latter approach for insertion: </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">_, err := t.Notebook.\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tINSERT(t.Notebook.AllColumns).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMODEL(&amp;m.Notebook{\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tTitle: &amp;title,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t}).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tExec(db)\n</td></tr></table></code></pre>\n\n<p>The wiki goes into more detail about available APIs, but it is particularly notable that jet has good support for on conflict update APIs which are often useful for preventing get-check-insert race-conditions: </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">_, err := t.Notebook.\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tINSERT(t.Notebook.AllColumns).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMODEL(&amp;m.Notebook{\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tID:    someId,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tTitle: &amp;title,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t}).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tON_CONFLICT(t.Notebook.ID).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tDO_UPDATE(jet.SET(t.Notebook.Title.SET(t.Notebook.EXCLUDED.Title))).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tExec(db)\n</td></tr></table></code></pre>\n\n<p>In contrast, if did a select to check whether a notebook exists, and issued an insert if it didn&#39;t, the insert could still fail because a notebook could have been inserted in the meanwhile.</p>\n<h2 id=\"Subqueries\"><a href=\"#Subqueries\" class=\"headerlink\" title=\"Subqueries\"></a>Subqueries</h2><p>As we may expect by now, jet has good support for subqueries too. </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">_, err = t.Note.DELETE().\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tWHERE(\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tt.Note.ID.IN(\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\t\tt.Note.LEFT_JOIN(t.NoteFile, t.NoteFile.NoteID.EQ(t.Note.ID)).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\t\t\tSELECT(t.Note.ID).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\t\t\tWHERE(t.Note.NotebookID.EQ(jet.String(notebookId)).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\t\t\t\tAND(t.NoteFile.ID.IS_NULL())),\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\t),\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t).\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tExecContext(ctx, store.db)\n</td></tr></table></code></pre>\n\n<p>Hopefully this provides a high-level overview that can jumpstart your go project that needs database access.</p>\n<p>This post has, however, just scratched the surface of what is possible with jet, and the aforementioned <a href=\"https://github.com/go-jet/jet/wiki\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">jet wiki</a> goes into a lot more detail.</p>\n",
            "tags": [
                "go",
                "golang",
                "jet",
                "sql"
            ]
        },
        {
            "id": "https://lorefnon.me/2022/09/01/setting-up-log-rotation-for-zerolog/",
            "url": "https://lorefnon.me/2022/09/01/setting-up-log-rotation-for-zerolog/",
            "title": "Setting up log-rotation for zerolog",
            "date_published": "2022-09-01T00:00:00.000Z",
            "content_html": "<p><a href=\"https://github.com/rs/zerolog\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Zerolog</a> is a popular structured logging library for go. This post is a quick recipie for configuring it to use log rotation. </p>\n<p>Log rotation is a mechanism where instead of having a single log file which keeps growing forever, the application switches to a new log file when a time threshold or a size threshold is exceeded. Optionally files which are too old to be of significance can be deleted.</p>\n<p>Now a days, it is a more common practice to log to a stream and have an external service manage it for you. This is indeed nice if you can embrace it. However, Log rotation can be useful for desktop applications or isolated deployments.</p>\n<p><a href=\"https://github.com/natefinch/lumberjack\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Lumberjack</a> is a nice utility for go that supports log rotation. It is also easy to hook up with zerolog because a lumberjack logger implements io.Writer which zerolog can target.</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">/** Configuration options for log rotation */</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">type</span> LoggerConfig <span class=\"hljs-keyword\">struct</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">/** Max size of the logfile before it&#x27;s rolled */</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMaxSizeMB <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;max_size_mb,omitempty&quot;`</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">/** Max number of rolled files to keep */</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMaxBackupCount <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;max_backup_count,omitempty&quot;`</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">/** Max age in days to keep a logfile */</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMaxAgeDays <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;max_age_days,omitempty&quot;`</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initLogger</span><span class=\"hljs-params\">(config *config.LoggerConfig)</span></span> *zerolog.Logger {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">var</span> writers []io.Writer\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">// Optional: Log to console</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\twriters = <span class=\"hljs-built_in\">append</span>(writers, zerolog.ConsoleWriter{Out: os.Stderr})\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">// Log to rolling file</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\twriters = <span class=\"hljs-built_in\">append</span>(writers, initRollingFileLogger(config))\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">// Multiwriter encapsulates multiple writers</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tmw := io.MultiWriter(writers...)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tlogger := zerolog.New(mw).With().\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tTimestamp().\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tLogger()\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> &amp;logger\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initRollingFileLogger</span><span class=\"hljs-params\">(config *config.LoggerConfig)</span></span> *lumberjack.Logger {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tloggerPath := filepath.Join(xdg.DataHome, <span class=\"hljs-string\">&quot;example&quot;</span>, <span class=\"hljs-string\">&quot;app.log&quot;</span>)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tfmt.Printf(<span class=\"hljs-string\">&quot;logging to file: %s\\n&quot;</span>, loggerPath)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> &amp;lumberjack.Logger{\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tFilename:   loggerPath,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tMaxBackups: config.MaxBackupCount,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tMaxSize:    config.MaxSizeMB,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tMaxAge:     config.MaxAgeDays,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n\n<p>We can now use the logger returned by initLogger to write logs, and they will be written to a file which will be rotated by lumberjack.</p>\n",
            "tags": [
                "go",
                "golang",
                "zerolog"
            ]
        }
    ]
}