<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Icicles of Thought â€¢ Posts by &#34;babel&#34; tag</title>
        <link>https://lorefnon.me</link>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
        <lastBuildDate>Tue, 13 Dec 2022 00:00:00 +0000</lastBuildDate>
        <category>Javascript</category>
        <category>KnockoutJS</category>
        <category>Ruby</category>
        <category>EventMachine</category>
        <category>Websockets</category>
        <category>SQLite</category>
        <category>Jade</category>
        <category>Node.js</category>
        <category>Rails</category>
        <category>Emacs</category>
        <category>Gulp</category>
        <category>ActiveAdmin</category>
        <category>ActiveRecord</category>
        <category>Devise</category>
        <category>Integration</category>
        <category>ZSH</category>
        <category>Productivity Hacks</category>
        <category>OCR</category>
        <category>Design Patterns</category>
        <category>InfluxDB</category>
        <category>Grafana</category>
        <category>React</category>
        <category>Functional Programming</category>
        <category>ES6</category>
        <category>Helm</category>
        <category>SPF</category>
        <category>CSS</category>
        <category>Redux</category>
        <category>Redux-loop</category>
        <category>Frontend</category>
        <category>Vagrant</category>
        <category>Clojure</category>
        <category>Hashicorp</category>
        <category>Typescript</category>
        <category>ReasonML</category>
        <category>Next.js</category>
        <category>Koa</category>
        <category>Apollo</category>
        <category>GraphQL</category>
        <category>MongoDB</category>
        <category>Automerge</category>
        <category>CRDT</category>
        <category>SVG</category>
        <category>VSCode</category>
        <category>Comlink</category>
        <category>Web-workers</category>
        <category>io-ts</category>
        <category>MobX</category>
        <category>MobX-State-Tree</category>
        <category>Routing</category>
        <category>HAR</category>
        <category>Jq</category>
        <category>Lit-html</category>
        <category>Stimulus</category>
        <category>Kotlin</category>
        <category>Vert.X</category>
        <category>Vert.X-Web</category>
        <category>Backend-development</category>
        <category>API-development</category>
        <category>Java</category>
        <category>JOOQ</category>
        <category>Ruby on Rails</category>
        <category>Liquibase</category>
        <category>tbls</category>
        <category>jOOQ</category>
        <category>Vue</category>
        <category>TypeScript</category>
        <category>Gradle</category>
        <category>Spring</category>
        <category>Spring-Boot</category>
        <category>gRPC</category>
        <category>Redis</category>
        <category>Database</category>
        <category>Exposed</category>
        <category>vim</category>
        <category>kotlin</category>
        <category>spring</category>
        <category>spring-security</category>
        <category>komapper</category>
        <category>spring-boot</category>
        <category>typescript</category>
        <category>zod</category>
        <category>ts-pattern</category>
        <category>ts-sql-query</category>
        <category>go</category>
        <category>golang</category>
        <category>zerolog</category>
        <category>jet</category>
        <category>sql</category>
        <category>go-migrate</category>
        <category>chi</category>
        <category>connect</category>
        <category>cloudfront</category>
        <category>AWS</category>
        <category>CDK</category>
        <category>Go</category>
        <category>Babel</category>
        <item>
            <guid isPermalink="true">https://lorefnon.me/2022/12/13/auto-transforming-modules-to-mjs-node/</guid>
            <title>Auto-transforming modules to mjs using babel</title>
            <link>https://lorefnon.me/2022/12/13/auto-transforming-modules-to-mjs-node/</link>
            <category>Javascript</category>
            <category>Babel</category>
            <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;The unfortunate reality of being a js library author in present day world is that we need to deal with multiple module systems and bundlers, which make life hard. &lt;/p&gt;
&lt;p&gt;While commonjs usage is declining, many users are yet to move to esm fully.&lt;/p&gt;
&lt;p&gt;Solutions like tsup provide a nice DX for deploying libraries by bundling separately to an artifact of each configured module type. &lt;/p&gt;
&lt;p&gt;However, for nodejs libraries I often prefer to not bundle my libraries, and thankfully babel ecosystem makes it easy to handle these scenarios.&lt;/p&gt;
&lt;p&gt;This post outlines a simple babel setup where: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We author code without needing explicit extensions in import: &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// bar.ts&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; foo &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./foo&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As part of build, we generate &lt;code&gt;.mjs&lt;/code&gt; modules where the relative imports are also transformed to use &lt;code&gt;.mjs&lt;/code&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// bar.mjs&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; foo &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./foo.mjs&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Benefit of this setup is that the generated .mjs modules can co-exist alongside .cjs modules.&lt;/p&gt;
&lt;p&gt;Consumers of the module can either explicitly import with mjs extension (eg. &lt;code&gt;import &amp;#123; foo &amp;#125; from &amp;quot;foo-lib/foo.mjs&amp;quot;&lt;/code&gt;) or configure their bundler&amp;#x2F;runtime to default to mjs if they prefer mjs.&lt;/p&gt;
&lt;p&gt;Note that this setup does not fully emulate node-specific module resolution. For example: &lt;code&gt;import &amp;#123; foo &amp;#125; from &amp;quot;./foo&amp;quot;&lt;/code&gt; will not be auto-resolved to &lt;code&gt;import &amp;#123; foo &amp;#125; from &amp;quot;./foo/index.js&amp;quot;&lt;/code&gt; if foo is directory.&lt;/p&gt;
&lt;p&gt;Babel config: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt; = &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;presets&lt;/span&gt;: [
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;@babel/preset-typescript&amp;#x27;&lt;/span&gt;,
        [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;@babel/preset-env&amp;#x27;&lt;/span&gt;, &amp;#123;
            &lt;span class=&#34;hljs-attr&#34;&gt;targets&lt;/span&gt;: &amp;#123;
                &lt;span class=&#34;hljs-attr&#34;&gt;node&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;
            &amp;#125;,
            &lt;span class=&#34;hljs-attr&#34;&gt;modules&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;
        &amp;#125;]
    ],
    &lt;span class=&#34;hljs-attr&#34;&gt;plugins&lt;/span&gt;: [
        [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;babel-plugin-replace-import-extension&amp;#x27;&lt;/span&gt;, &amp;#123;
            &lt;span class=&#34;hljs-attr&#34;&gt;extMapping&lt;/span&gt;: &amp;#123;
                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;.mjs&amp;#x27;&lt;/span&gt;
            &amp;#125;
        &amp;#125;]
    ]
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;babel src \
    --config-file ./babel.esm.config.js \
    --out-dir dist \
    --out-file-extension &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.mjs&amp;quot;&lt;/span&gt; \
    --extensions &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.ts&amp;quot;&lt;/span&gt; \
    --ignore &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;**/*.d.ts&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

 ]]></description>
        </item>
    </channel>
</rss>
