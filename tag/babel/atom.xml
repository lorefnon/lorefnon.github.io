<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lorefnon.me</id>
    <title>Icicles of Thought â€¢ Posts by &#34;babel&#34; tag</title>
    <link href="https://lorefnon.me" />
    <updated>2022-12-13T00:00:00.000Z</updated>
    <category term="Javascript" />
    <category term="KnockoutJS" />
    <category term="Ruby" />
    <category term="EventMachine" />
    <category term="Websockets" />
    <category term="SQLite" />
    <category term="Jade" />
    <category term="Node.js" />
    <category term="Rails" />
    <category term="Emacs" />
    <category term="Gulp" />
    <category term="ActiveAdmin" />
    <category term="ActiveRecord" />
    <category term="Devise" />
    <category term="Integration" />
    <category term="ZSH" />
    <category term="Productivity Hacks" />
    <category term="OCR" />
    <category term="Design Patterns" />
    <category term="InfluxDB" />
    <category term="Grafana" />
    <category term="React" />
    <category term="Functional Programming" />
    <category term="ES6" />
    <category term="Helm" />
    <category term="SPF" />
    <category term="CSS" />
    <category term="Redux" />
    <category term="Redux-loop" />
    <category term="Frontend" />
    <category term="Vagrant" />
    <category term="Clojure" />
    <category term="Hashicorp" />
    <category term="Typescript" />
    <category term="ReasonML" />
    <category term="Next.js" />
    <category term="Koa" />
    <category term="Apollo" />
    <category term="GraphQL" />
    <category term="MongoDB" />
    <category term="Automerge" />
    <category term="CRDT" />
    <category term="SVG" />
    <category term="VSCode" />
    <category term="Comlink" />
    <category term="Web-workers" />
    <category term="io-ts" />
    <category term="MobX" />
    <category term="MobX-State-Tree" />
    <category term="Routing" />
    <category term="HAR" />
    <category term="Jq" />
    <category term="Lit-html" />
    <category term="Stimulus" />
    <category term="Kotlin" />
    <category term="Vert.X" />
    <category term="Vert.X-Web" />
    <category term="Backend-development" />
    <category term="API-development" />
    <category term="Java" />
    <category term="JOOQ" />
    <category term="Ruby on Rails" />
    <category term="Liquibase" />
    <category term="tbls" />
    <category term="jOOQ" />
    <category term="Vue" />
    <category term="TypeScript" />
    <category term="Gradle" />
    <category term="Spring" />
    <category term="Spring-Boot" />
    <category term="gRPC" />
    <category term="Redis" />
    <category term="Database" />
    <category term="Exposed" />
    <category term="vim" />
    <category term="kotlin" />
    <category term="spring" />
    <category term="spring-security" />
    <category term="komapper" />
    <category term="spring-boot" />
    <category term="typescript" />
    <category term="zod" />
    <category term="ts-pattern" />
    <category term="ts-sql-query" />
    <category term="go" />
    <category term="golang" />
    <category term="zerolog" />
    <category term="jet" />
    <category term="sql" />
    <category term="go-migrate" />
    <category term="chi" />
    <category term="connect" />
    <category term="cloudfront" />
    <category term="AWS" />
    <category term="CDK" />
    <category term="Go" />
    <category term="Babel" />
    <entry>
        <id>https://lorefnon.me/2022/12/13/auto-transforming-modules-to-mjs-node/</id>
        <title>Auto-transforming modules to mjs using babel</title>
        <link rel="alternate" href="https://lorefnon.me/2022/12/13/auto-transforming-modules-to-mjs-node/"/>
        <content type="html">&lt;p&gt;The unfortunate reality of being a js library author in present day world is that we need to deal with multiple module systems and bundlers, which make life hard. &lt;/p&gt;
&lt;p&gt;While commonjs usage is declining, many users are yet to move to esm fully.&lt;/p&gt;
&lt;p&gt;Solutions like tsup provide a nice DX for deploying libraries by bundling separately to an artifact of each configured module type. &lt;/p&gt;
&lt;p&gt;However, for nodejs libraries I often prefer to not bundle my libraries, and thankfully babel ecosystem makes it easy to handle these scenarios.&lt;/p&gt;
&lt;p&gt;This post outlines a simple babel setup where: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We author code without needing explicit extensions in import: &lt;/p&gt;
 &lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// bar.ts&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; foo &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./foo&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As part of build, we generate &lt;code&gt;.mjs&lt;/code&gt; modules where the relative imports are also transformed to use &lt;code&gt;.mjs&lt;/code&gt;:&lt;/p&gt;
 &lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// bar.mjs&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; foo &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./foo.mjs&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Benefit of this setup is that the generated .mjs modules can co-exist alongside .cjs modules.&lt;/p&gt;
&lt;p&gt;Consumers of the module can either explicitly import with mjs extension (eg. &lt;code&gt;import &amp;#123; foo &amp;#125; from &amp;quot;foo-lib/foo.mjs&amp;quot;&lt;/code&gt;) or configure their bundler&amp;#x2F;runtime to default to mjs if they prefer mjs.&lt;/p&gt;
&lt;p&gt;Note that this setup does not fully emulate node-specific module resolution. For example: &lt;code&gt;import &amp;#123; foo &amp;#125; from &amp;quot;./foo&amp;quot;&lt;/code&gt; will not be auto-resolved to &lt;code&gt;import &amp;#123; foo &amp;#125; from &amp;quot;./foo/index.js&amp;quot;&lt;/code&gt; if foo is directory.&lt;/p&gt;
&lt;p&gt;Babel config: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt; = &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;presets&lt;/span&gt;: [
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;@babel/preset-typescript&amp;#x27;&lt;/span&gt;,
        [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;@babel/preset-env&amp;#x27;&lt;/span&gt;, &amp;#123;
            &lt;span class=&#34;hljs-attr&#34;&gt;targets&lt;/span&gt;: &amp;#123;
                &lt;span class=&#34;hljs-attr&#34;&gt;node&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;
            &amp;#125;,
            &lt;span class=&#34;hljs-attr&#34;&gt;modules&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;
        &amp;#125;]
    ],
    &lt;span class=&#34;hljs-attr&#34;&gt;plugins&lt;/span&gt;: [
        [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;babel-plugin-replace-import-extension&amp;#x27;&lt;/span&gt;, &amp;#123;
            &lt;span class=&#34;hljs-attr&#34;&gt;extMapping&lt;/span&gt;: &amp;#123;
                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;.mjs&amp;#x27;&lt;/span&gt;
            &amp;#125;
        &amp;#125;]
    ]
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;babel src \
    --config-file ./babel.esm.config.js \
    --out-dir dist \
    --out-file-extension &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.mjs&amp;quot;&lt;/span&gt; \
    --extensions &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.ts&amp;quot;&lt;/span&gt; \
    --ignore &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;**/*.d.ts&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

</content>
        <category term="Javascript" />
        <category term="Babel" />
        <updated>2022-12-13T00:00:00.000Z</updated>
    </entry>
</feed>
