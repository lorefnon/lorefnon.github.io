<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Icicles of Thought â€¢ Posts by &#34;zod&#34; tag</title>
        <link>https://lorefnon.me</link>
        <description></description>
        <language>en</language>
        <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
        <lastBuildDate>Sat, 25 Jun 2022 00:00:00 +0000</lastBuildDate>
        <category>Javascript</category>
        <category>KnockoutJS</category>
        <category>Ruby</category>
        <category>EventMachine</category>
        <category>Websockets</category>
        <category>SQLite</category>
        <category>Jade</category>
        <category>Node.js</category>
        <category>Rails</category>
        <category>Emacs</category>
        <category>Gulp</category>
        <category>ActiveAdmin</category>
        <category>ActiveRecord</category>
        <category>Devise</category>
        <category>Integration</category>
        <category>ZSH</category>
        <category>Productivity Hacks</category>
        <category>OCR</category>
        <category>Design Patterns</category>
        <category>InfluxDB</category>
        <category>Grafana</category>
        <category>React</category>
        <category>Functional Programming</category>
        <category>ES6</category>
        <category>Helm</category>
        <category>SPF</category>
        <category>CSS</category>
        <category>Redux</category>
        <category>Redux-loop</category>
        <category>Frontend</category>
        <category>Vagrant</category>
        <category>Clojure</category>
        <category>Hashicorp</category>
        <category>Typescript</category>
        <category>ReasonML</category>
        <category>Next.js</category>
        <category>Koa</category>
        <category>Apollo</category>
        <category>GraphQL</category>
        <category>MongoDB</category>
        <category>Automerge</category>
        <category>CRDT</category>
        <category>SVG</category>
        <category>VSCode</category>
        <category>Comlink</category>
        <category>Web-workers</category>
        <category>io-ts</category>
        <category>MobX</category>
        <category>MobX-State-Tree</category>
        <category>Routing</category>
        <category>HAR</category>
        <category>Jq</category>
        <category>Lit-html</category>
        <category>Stimulus</category>
        <category>Kotlin</category>
        <category>Vert.X</category>
        <category>Vert.X-Web</category>
        <category>Backend-development</category>
        <category>API-development</category>
        <category>Java</category>
        <category>JOOQ</category>
        <category>Ruby on Rails</category>
        <category>Liquibase</category>
        <category>tbls</category>
        <category>jOOQ</category>
        <category>Vue</category>
        <category>TypeScript</category>
        <category>Gradle</category>
        <category>Spring</category>
        <category>Spring-Boot</category>
        <category>gRPC</category>
        <category>Redis</category>
        <category>Database</category>
        <category>Exposed</category>
        <category>vim</category>
        <category>kotlin</category>
        <category>spring</category>
        <category>spring-security</category>
        <category>komapper</category>
        <category>spring-boot</category>
        <category>typescript</category>
        <category>zod</category>
        <category>ts-pattern</category>
        <category>ts-sql-query</category>
        <category>go</category>
        <category>golang</category>
        <category>zerolog</category>
        <category>jet</category>
        <category>sql</category>
        <category>go-migrate</category>
        <category>chi</category>
        <category>connect</category>
        <category>cloudfront</category>
        <category>AWS</category>
        <category>CDK</category>
        <category>Go</category>
        <item>
            <guid isPermalink="true">https://lorefnon.me/2022/06/25/generating-api-docs-for-zod-types/</guid>
            <title>Generating API docs for zod-types</title>
            <link>https://lorefnon.me/2022/06/25/generating-api-docs-for-zod-types/</link>
            <category>typescript</category>
            <category>zod</category>
            <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;I often like to use &lt;a href=&#34;https://github.com/colinhacks/zod&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;zod&lt;/a&gt; for validating user provided options in the public API in typescript projects. Zod offers a really nice validation &amp;amp; type inference support and it is nice to be able to fail early for invalid options even if consumer is not using typescript.&lt;/p&gt;
&lt;p&gt;Generating API documentation is a bit of trouble though, for these types. &lt;a href=&#34;https://typedoc.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Typedoc&lt;/a&gt; is a nice documentation generator I frequently use, but it does not have any specialized zod support and works best when types are defined through normal typescript interfaces.&lt;/p&gt;
&lt;p&gt;So what do we do ? &lt;/p&gt;
&lt;p&gt;Interestingly, typescript is able to propagate comments through inheritance hierarchy and mapped types.&lt;/p&gt;
&lt;p&gt;So if we have a zod-type as follows: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; z &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zod&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-comment&#34;&gt;/** Full name of user */&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and later define an interface that extends the type inferred from this: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; z.&lt;span class=&#34;hljs-title class_&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;typeof &lt;span class=&#34;hljs-title class_&#34;&gt;UserSchema&lt;/span&gt;&amp;gt; &amp;#123;&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generated documentation of User will contain the comments for name property.&lt;/p&gt;
&lt;p&gt;This unfortunately works only for Object types as long as we don&amp;#39;t introduce any unions and intersections - any base type of an interface must have statically known members. This also doesn&amp;#39;t work well for nested object types as typedoc will pick only the types at top level.&lt;/p&gt;
&lt;p&gt;For more complex types, a simple workaround is to extract interfaces for constituent types and link them in the documentation. &lt;/p&gt;
&lt;p&gt;So instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDetailsSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;profile&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
        &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
    &amp;#125;).&lt;span class=&#34;hljs-title function_&#34;&gt;nullish&lt;/span&gt;()
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;d write: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ProfileSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-comment&#34;&gt;/** Full name of user */&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Profile&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; z.&lt;span class=&#34;hljs-title class_&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;typeof &lt;span class=&#34;hljs-title class_&#34;&gt;ProfileSchema&lt;/span&gt;&amp;gt; &amp;#123;&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDetailsSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-comment&#34;&gt;/** See &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@link&lt;/span&gt; Profile&amp;#125; */&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;profile&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;Profile&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;nullish&lt;/span&gt;()
&amp;#125;)

&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDetails&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; z.&lt;span class=&#34;hljs-title class_&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;typeof &lt;span class=&#34;hljs-title class_&#34;&gt;UserDetailsSchema&lt;/span&gt;&amp;gt; &amp;#123;&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This increases the boilerplate a bit, but is otherwise quite practical.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://lorefnon.me/2022/06/18/type-safe-event-handling-with-zod-and-ts-pattern/</guid>
            <title>Type-safe event handling in Typescript with zod and ts-pattern</title>
            <link>https://lorefnon.me/2022/06/18/type-safe-event-handling-with-zod-and-ts-pattern/</link>
            <category>typescript</category>
            <category>zod</category>
            <category>ts-pattern</category>
            <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Event-handling&#34;&gt;&lt;a href=&#34;#Event-handling&#34; class=&#34;headerlink&#34; title=&#34;Event handling&#34;&gt;&lt;/a&gt;Event handling&lt;/h1&gt;&lt;p&gt;It is no surprise to anyone that event handling is bread and butter in javascript. However, often we receive several types of events from an event source which makes handling them in a type-safe manner harder. Eg. if we are consuming websocket events on the backend we may write something like: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; ws &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ws&amp;quot;&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; app = &lt;span class=&#34;hljs-title function_&#34;&gt;express&lt;/span&gt;()

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; server = app.&lt;span class=&#34;hljs-title function_&#34;&gt;listen&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;3000&lt;/span&gt;)

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; wss = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; ws.&lt;span class=&#34;hljs-title class_&#34;&gt;Server&lt;/span&gt;(&amp;#123; server &amp;#125;)

wss.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;connection&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;ws: ws.WebSocket&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
    ws.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; parsed = &lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(data); 
               ^
               &lt;span class=&#34;hljs-string&#34;&gt;`----- any :(&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;    &amp;#125;)&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly we could be receiving a message from a different window&amp;#x2F;frame through postMessage, or another peer over a webrtc data channel, the problem remains the same: After receiving the data we need to disambiguate it into one of the multiple possible types of messages and branch out the handling logic from there.&lt;/p&gt;
&lt;p&gt;The most basic way would be to write a &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;type-guard&lt;/a&gt; for each possible type.&lt;/p&gt;
&lt;p&gt;Typescript offers flow-sensitive typing so once we have established in a branch that a value is of a particular type, we do need any extra casts. &lt;/p&gt;
&lt;p&gt;So we could write something like this: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetails&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;;
    &lt;span class=&#34;hljs-attr&#34;&gt;description&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;;
&amp;#125;

&lt;span class=&#34;hljs-comment&#34;&gt;// Types for our events:&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetails&lt;/span&gt;
&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePost&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetails&lt;/span&gt;
&amp;#125;

&lt;span class=&#34;hljs-comment&#34;&gt;// Type-guards for different message types&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; isCreatePost = (&lt;span class=&#34;hljs-attr&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;): event is &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; =&amp;gt; event.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; isUpdatePost = (&lt;span class=&#34;hljs-attr&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;): event is &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; =&amp;gt; event.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;

&lt;span class=&#34;hljs-comment&#34;&gt;// Later in our message receiver: &lt;/span&gt;

ws.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; parsed = &lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(data); 
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-title function_&#34;&gt;isCreatePost&lt;/span&gt;(parsed)) &amp;#123;
        ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleCreatePost&lt;/span&gt;(parsed))
        &lt;span class=&#34;hljs-comment&#34;&gt;//                       ^&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;//                       `---- type of parsed is CreatePost in this branch&lt;/span&gt;
    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-title function_&#34;&gt;isUpdatePost&lt;/span&gt;(parsed)) &amp;#123;
        ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleUpdatePost&lt;/span&gt;(parsed))
        &lt;span class=&#34;hljs-comment&#34;&gt;//                        ^&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;//                         `---- type of parsed is UpdatePost in this branch&lt;/span&gt;
    &amp;#125;
    &lt;span class=&#34;hljs-comment&#34;&gt;// ....&lt;/span&gt;
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it is quite a bit of boilerplate to discriminate&amp;#x2F;disambiguate between different possible types. This boilerpate is also repetitive if we adopt a convention that we will always discriminate the types based on a &lt;code&gt;type&lt;/code&gt; attribute which all the events will have. &lt;/p&gt;
&lt;p&gt;Other issue is that we are trusting the rest of the shape of the data based on the type attribute. Our type-guards (isCreatePost, isUpdatePost etc.) just check for the type property - and assumes that rest of the properties are as expected. If the websocket client sends an invalid object like &lt;code&gt;&amp;#123; type: &amp;quot;CreatePost&amp;quot; &amp;#125;&lt;/code&gt; (no data) we will get a runtime error which may surface deeper inside the handling logic with a confusing stack trace. &lt;/p&gt;
&lt;p&gt;When we are receiving data over a network boundary or from a persisted store, it is generally safer to validate the complete payload at the boundary itself (which is our message receiver function in this example) and fail early with a clean error.&lt;/p&gt;
&lt;p&gt;We could write our type-guard to be more defensive like: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; isCreatePost = (&lt;span class=&#34;hljs-attr&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;): event is &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; =&amp;gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; event.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;
        &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; event.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;
        &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; event.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;title&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;
        &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; event.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;description&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this is now a ton of additional work. &lt;/p&gt;
&lt;p&gt;This is also error prone because tomorrow if we add another field in PostDetails we will also need to update all these type-guards to accomodate the same. They have to kept in sync manually with no help from type-checker whatsoever.&lt;/p&gt;
&lt;p&gt;Fortunately, we have libraries to simplify this validation logic for us. One such library is &lt;a href=&#34;https://github.com/colinhacks/zod&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;zod&lt;/a&gt; which is what I currently use in my production applications.&lt;/p&gt;
&lt;p&gt;With zod we can define the shape of our events through zod&amp;#39;s API: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; zod &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zod&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;description&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePostSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;),
    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePostSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;),
    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;partial&lt;/span&gt;()
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The benefit of defining these schema objects, is that we are able to perform runtime validation of unknown data.&lt;/p&gt;
&lt;p&gt;So our isCreatePost type-guard can be written as: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; isCreatePost = (&lt;span class=&#34;hljs-attr&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;): event is &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; =&amp;gt;
    &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePostSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;safeParse&lt;/span&gt;(event).&lt;span class=&#34;hljs-property&#34;&gt;success&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also don&amp;#39;t have to manually define the typescript interfaces for &lt;code&gt;CreatePost&lt;/code&gt;, &lt;code&gt;UpdatePost&lt;/code&gt; etc. ourselves. They can instead be inferred from the Schema objects. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; = z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePostSchema&lt;/span&gt;&amp;gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePost&lt;/span&gt; = z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePostSchema&lt;/span&gt;&amp;gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above approach of discriminating between multiple types using a shared property is very common in practice, and we call union of such types as discriminated unions. &lt;/p&gt;
&lt;p&gt;Zod has built in support for discriminated unions, and we can define an EventSchema as follows: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//                                          ,---- Property based on which we will discriminate&lt;/span&gt;
&lt;span class=&#34;hljs-comment&#34;&gt;//                                         V           the members of our union type&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;discriminatedUnion&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, [
    &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePostSchema&lt;/span&gt;,
    &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePostSchema&lt;/span&gt;
])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often, we won&amp;#39;t define the individual members separately: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;discriminatedUnion&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, [
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;
   &amp;#125;),
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;
   &amp;#125;)
])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is exactly the same as above. &lt;/p&gt;
&lt;p&gt;If we use the previously mentioned TypeOf type to get the static type of EventSchema we will get a union of the CreatePost and UpdatePost types. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Event&lt;/span&gt; = z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above will be inferred as: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Event&lt;/span&gt; = 
    | &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;description&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; &amp;#125; &amp;#125;
    | &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &amp;#123; title?: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;, description?: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; &amp;#125; &amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is effectively: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Event&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; | &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePost&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One additional thing that we gain from defining a discriminated union is an exhaustiveness check. So we if we use &lt;code&gt;EventSchema.parse(someData)&lt;/code&gt; this will throw a runtime error if someData does not conform to the complete shape of one of the errors.&lt;/p&gt;
&lt;p&gt;We can write our handler as: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;ws.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123; 
        &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; parsed = &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(data)); &lt;span class=&#34;hljs-comment&#34;&gt;// Parse will throw for invalid events&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;//     ^&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;//      `--- CreatePost | UpdatePost&lt;/span&gt;
        &lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; (parsed.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt;) &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;:
            ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleCreatePost&lt;/span&gt;(parsed)) 
            &lt;span class=&#34;hljs-comment&#34;&gt;//                        ^&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;//                        `---- type of parsed is CreatePost in this branch&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;; 
        &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;:
            ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleUpdatePost&lt;/span&gt;(parsed))
            &lt;span class=&#34;hljs-comment&#34;&gt;//                      ^&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;//                       `---- type of parsed is UpdatePost in this branch&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;
        &amp;#125;
    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (e) &amp;#123;
        &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;error&lt;/span&gt;(e);
        &lt;span class=&#34;hljs-comment&#34;&gt;// Also see https://github.com/colinhacks/zod#error-formatting&lt;/span&gt;
    &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, it would be also nice to have this exhaustiveness check enforced in our handler at compile time. The way our code is currently written, tomorrow if we add a new type of event in the discriminated union, but forget to add an if-else branch in the above code, it will get silently ignored - Not great. &lt;/p&gt;
&lt;p&gt;We can take advantage of the typescript compiler option &lt;a href=&#34;https://www.typescriptlang.org/tsconfig#noImplicitReturns&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;noImplicitReturns&lt;/a&gt; to enforce this: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;ws.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123; 
        ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleEvent&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(data)))); &lt;span class=&#34;hljs-comment&#34;&gt;// Parse will throw for invalid events&lt;/span&gt;
    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (e) &amp;#123;
        &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;error&lt;/span&gt;(e);
    &amp;#125;
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handleEvent&lt;/span&gt; = (&lt;span class=&#34;hljs-params&#34;&gt;event: Event&lt;/span&gt;) =&amp;gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; (event.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt;) &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;:
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handleCreatePost&lt;/span&gt;(event);
        &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;:
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handleUpdatePost&lt;/span&gt;(event);
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that our switch statement does not have a default case. &lt;/p&gt;
&lt;p&gt;So if we update our Event have another variant like: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;discriminatedUnion&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, [
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;
   &amp;#125;),
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;partial&lt;/span&gt;()
   &amp;#125;),
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;DeletePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;() &amp;#125;)
   &amp;#125;)
])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;None of the switch-case branches will now match for &lt;code&gt;DeletePost&lt;/code&gt; and we will end up with a possible branch of code that returns implicitly. Typescript will now complain about that.&lt;/p&gt;
&lt;p&gt;We could wrap-up the post here - given that we have accomplished all the type-safety features we wanted. However, I am not a huge fan of having to rely on implicit returns (or similar workarounds) for exhaustiveness check. &lt;/p&gt;
&lt;p&gt;In many functional languages, we have support for &lt;a href=&#34;https://abitofocaml.weebly.com/12-pattern-matching.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;pattern-matching&lt;/a&gt; with built in support for exhaustiveness check. Typescript does not have this at the moment but there are userland implementations that emulate pattern matching. One such library is &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;ts-pattern&lt;/a&gt;, which I have found to work very well in practice. &lt;/p&gt;
&lt;p&gt;With ts-pattern we could write our handler as: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; match &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ts-pattern&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-comment&#34;&gt;// --- &lt;/span&gt;

&lt;span class=&#34;hljs-title function_&#34;&gt;match&lt;/span&gt;(event)
    .&lt;span class=&#34;hljs-title function_&#34;&gt;with&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;CreatePost&amp;#x27;&lt;/span&gt; &amp;#125;, handleCreatePost)
    .&lt;span class=&#34;hljs-title function_&#34;&gt;with&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;UpdatePost&amp;#x27;&lt;/span&gt; &amp;#125;, handleUpdatePost)
    .&lt;span class=&#34;hljs-title function_&#34;&gt;exhaustive&lt;/span&gt;()   &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;--- will be a type error if Event type has any other union members&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only is this more succinct for this use case, ts-pattern becomes more useful when we have more complex scenario like combining multiple predicates or performing checks based on multiple properties. Take a look at some of their examples in the &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern#readme&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, unlike our switch-case or if-else examples above, the entire match invocation is a single expression so we could use the return value of our handler without needing temporary variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(
    &lt;span class=&#34;hljs-title function_&#34;&gt;match&lt;/span&gt;(event)
        .&lt;span class=&#34;hljs-title function_&#34;&gt;with&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;CreatePost&amp;#x27;&lt;/span&gt; &amp;#125;, handleCreatePost)
        .&lt;span class=&#34;hljs-title function_&#34;&gt;with&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;UpdatePost&amp;#x27;&lt;/span&gt; &amp;#125;, handleUpdatePost)
        .&lt;span class=&#34;hljs-title function_&#34;&gt;exhaustive&lt;/span&gt;()
)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool, eh ?&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://lorefnon.me/2022/06/18/type-safe-jsonb-with-ts-sql-query/</guid>
            <title>Making jsonb access type-safe with a zod adapter in ts-sql-query</title>
            <link>https://lorefnon.me/2022/06/18/type-safe-jsonb-with-ts-sql-query/</link>
            <category>typescript</category>
            <category>zod</category>
            <category>ts-sql-query</category>
            <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;a href=&#34;https://ts-sql-query.readthedocs.io/en/stable&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;ts-sql-query&lt;/a&gt; is a nice typescript library for typesafe database access. It goes to great lengths to ensure that if code compiles without type errors then all generated SQL is correct. Of course there are escape hatches for advanced scenarios, but having type-safety for the 90% most common usages is a huge productivity boost.&lt;/p&gt;
&lt;p&gt;Modern databases like postgres have built in json support, enabling us to store semi-structured data in a database column. While this does go against norms of traditional normalization, in practice it is immensely convenient for cases where shaping the data into tabular format is either very time consuming or simply not feasible because the entire structure of data is not known ahead of time or changes frequently.&lt;/p&gt;
&lt;p&gt;However, to be able to effectively process this data in application layer, it is often beneficial to have an application-side schema to validate this json data even if this schema is not 100% known ahead of time, evolves alongside our understanding of data or not 100% strict.&lt;/p&gt;
&lt;p&gt;In typescript, we have a multitude of options for schema validation like &lt;a href=&#34;https://zod.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;zod&lt;/a&gt;, &lt;a href=&#34;https://github.com/gcanti/io-ts&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;io-ts&lt;/a&gt;, &lt;a href=&#34;https://joi.dev/api/?v=17.6.0&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;joi&lt;/a&gt; etc. In this post we primarily focus on zod because IMHO it strikes a very good balance between a user friendly API, available features and being able to extract static types from schema definitions.&lt;/p&gt;
&lt;p&gt;Whiel ts-sql-query does not have json support built-in, it supports custom types through &lt;a href=&#34;https://ts-sql-query.readthedocs.io/en/stable/supported-operations/#type-adpaters&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;TypeAdapter&lt;/a&gt;. So for our jsonb columns we can write a TypeAdapter that utilizes zod to enforce that the data coming from and going to the database conforms to our expectations.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say we have a zod type ChapterMedatadata:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; z &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zod&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;topics&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;().&lt;span class=&#34;hljs-title function_&#34;&gt;array&lt;/span&gt;(),
&amp;#125;);

&lt;span class=&#34;hljs-comment&#34;&gt;// Extract static type&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadata&lt;/span&gt; = z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataSchema&lt;/span&gt;&amp;gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following would be a type adapter that validates the incoming and outgoing json through this type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;TypeAdapter&lt;/span&gt; &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ts-sql-query/TypeAdapter&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAdapter&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;TypeAdapter&lt;/span&gt; = &amp;#123;
    &lt;span class=&#34;hljs-title function_&#34;&gt;transformValueFromDB&lt;/span&gt;(
        &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;
    ): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;) &amp;#123;
            &lt;span class=&#34;hljs-comment&#34;&gt;// Our database adapter (postgres) is aware of jsonb and has already&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// parsed the JSON. So we don&amp;#x27;t need JSON.parse. However if the dabase&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// didn&amp;#x27;t have first class support for json type and&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// we were storing the JSON in a text field we would need to do a JSON.parse first&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// before calling ChapterMetadataSchema.parse&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value);
        &amp;#125;

        &lt;span class=&#34;hljs-comment&#34;&gt;// If type is not jsonb then gracefully fallback to the next adapter&lt;/span&gt;
        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; next.&lt;span class=&#34;hljs-title function_&#34;&gt;transformValueFromDB&lt;/span&gt;(value, &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;);
    &amp;#125;,

    &lt;span class=&#34;hljs-title function_&#34;&gt;transformValueToDB&lt;/span&gt;(
        &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;
    ): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;) &amp;#123;
            &lt;span class=&#34;hljs-comment&#34;&gt;// This is strictly not necessary because TS will ensure&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// that atleast the static type is enforced.&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// However it offers aditional safety if we have some refinements&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// or if there is possibility of values with any type creeping in.&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value);
        &amp;#125;

        &lt;span class=&#34;hljs-comment&#34;&gt;// If type is not jsonb gracefully fallback to the next adapter&lt;/span&gt;
        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; next.&lt;span class=&#34;hljs-title function_&#34;&gt;transformValueToDB&lt;/span&gt;(value, &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;);
    &amp;#125;,
&amp;#125;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have the adapter in place, we can use this in our table mapping:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title class_&#34;&gt;Table&lt;/span&gt; &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ts-sql-query/Table&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChaptersTable&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Table&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title class_&#34;&gt;DBConnection&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ChaptersTable&amp;quot;&lt;/span&gt;&amp;gt; &amp;#123;
    id = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;autogeneratedPrimaryKey&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;int&amp;quot;&lt;/span&gt;);
    metadata = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;optionalColumn&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadata&lt;/span&gt;&amp;gt;(
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;custom&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAdapter&lt;/span&gt;
    );

    &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;
        &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;chapters&amp;quot;&lt;/span&gt;);
    &amp;#125;
&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; tChapters = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChaptersTable&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now whenever we try to retrieve the data from database, the value for metadata column will be validated against our schema.&lt;/p&gt;
&lt;p&gt;And because we have passed the ChapterMetadata static type as a type parameter to the column, for operations performed in typescript codebase, we get static type safety as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;getConnection&lt;/span&gt;()
    .&lt;span class=&#34;hljs-title function_&#34;&gt;insertInto&lt;/span&gt;(tChapters)
    .&lt;span class=&#34;hljs-title function_&#34;&gt;set&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;metadata&lt;/span&gt;: &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;topic&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &amp;#125; &amp;#125;); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;-- Static type error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that whenever we are performing type validation of data coming from a long term storage, we need to be cautious with schema evolution.&lt;/p&gt;
&lt;p&gt;Tomorrow if we update the type and add backward incompatible changes (eg. new mandatory fields), then the rows containing past data can become inaccessible.&lt;/p&gt;
&lt;p&gt;So it is better to ensure that any schema change is additive, and new fields added are optional. It is also useful to perform two step transitions where in the transition duration the schema is compatible with both previous and new shape of data (at the cost of being more relaxed than is necessary).&lt;/p&gt;
&lt;p&gt;Lastly, the above type adapter assumes that the shape of data as stored in database matches the shape of the data that the application deals with.&lt;/p&gt;
&lt;p&gt;It can sometimes be desirable to store the data in a different format than what the application deals. This could be either to facilitate ease of indexing or compaction of storage on the db side, or to use more complex data structures than json-compatible objects and arrays on the application side.&lt;/p&gt;
&lt;p&gt;While zod does not support codecs like some other libraries like io-ts, it is possible to use two different (mutually compatible) types in transformValueToDB and transformValueFromDB to convert between the two representations.&lt;/p&gt;
&lt;p&gt;A simple example of two such types can be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; z &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zod&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataDBToAppSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;topics&lt;/span&gt;: z
        .&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
        .&lt;span class=&#34;hljs-title function_&#34;&gt;array&lt;/span&gt;()
        .&lt;span class=&#34;hljs-title function_&#34;&gt;transform&lt;/span&gt;(
            &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;it&lt;/span&gt;) =&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;hljs-comment&#34;&gt;// Convert the JSON array to a Set&lt;/span&gt;
                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Set&lt;/span&gt;(it)
        ),
    &lt;span class=&#34;hljs-attr&#34;&gt;relevanceScores&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;record&lt;/span&gt;(z.&lt;span class=&#34;hljs-title function_&#34;&gt;number&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;transform&lt;/span&gt;(
        &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;it&lt;/span&gt;) =&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// Convert the JSON object to a Map&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Map&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;entries&lt;/span&gt;(it))
    ),
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAppToDBSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;topics&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;set&lt;/span&gt;(z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;transform&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;it&lt;/span&gt;) =&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;// Convert set to array&lt;/span&gt;
        [...it]
    ),
    &lt;span class=&#34;hljs-attr&#34;&gt;relevanceScores&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;map&lt;/span&gt;(z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(), z.&lt;span class=&#34;hljs-title function_&#34;&gt;number&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;transform&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;it&lt;/span&gt;) =&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;// Convert Map to object&lt;/span&gt;
        &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;fromEntries&lt;/span&gt;(it.&lt;span class=&#34;hljs-title function_&#34;&gt;entries&lt;/span&gt;())
    ),
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can change our adapter to use these two separate types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAdapter&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;TypeAdapter&lt;/span&gt; = &amp;#123;
    &lt;span class=&#34;hljs-title function_&#34;&gt;transformValueFromDB&lt;/span&gt;(
        &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;
    ): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;) &amp;#123;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataDBToAppSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value);
        &amp;#125;
        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; next.&lt;span class=&#34;hljs-title function_&#34;&gt;transformValueFromDB&lt;/span&gt;(value, &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;);
    &amp;#125;,

    &lt;span class=&#34;hljs-title function_&#34;&gt;transformValueToDB&lt;/span&gt;(
        &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;
    ): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;) &amp;#123;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAppToDBSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value);
        &amp;#125;
        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; next.&lt;span class=&#34;hljs-title function_&#34;&gt;transformValueToDB&lt;/span&gt;(value, &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;);
    &amp;#125;,
&amp;#125;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to make sure that these two types are always mutually compatible ie. for any valid values&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAppToDBSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataDBToAppSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;succeeds, and vice versa.&lt;/p&gt;
&lt;p&gt;We can use unit tests to ensure that, and we can also add witness types to validate the compatibility of corresponding static types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Type that enforces that U is assignable to T&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ExtendsWitness&lt;/span&gt;&amp;lt;U &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; T, T&amp;gt; = U;

&lt;span class=&#34;hljs-comment&#34;&gt;// If the Input type of ChapterMetadataAppToDBSchema is not compatbile with&lt;/span&gt;
&lt;span class=&#34;hljs-comment&#34;&gt;// output type of ChapterMetadataDBToAppSchema following witness will have a type error&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; _ChapterMetadataWitness1 = &lt;span class=&#34;hljs-title class_&#34;&gt;ExtendsWitness&lt;/span&gt;&amp;lt;
    z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataDBToAppSchema&lt;/span&gt;&amp;gt;,
    &lt;span class=&#34;hljs-comment&#34;&gt;// Extract input type from ChapterMetadataAppToDBSchema&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAppToDBSchema&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; z.&lt;span class=&#34;hljs-property&#34;&gt;ZodType&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;, infer &lt;span class=&#34;hljs-title class_&#34;&gt;TIn&lt;/span&gt;&amp;gt;
        ? &lt;span class=&#34;hljs-title class_&#34;&gt;TIn&lt;/span&gt;
        : &lt;span class=&#34;hljs-built_in&#34;&gt;never&lt;/span&gt;
&amp;gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and similarly the other way round.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
