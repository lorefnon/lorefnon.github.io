{
    "version": "https://jsonfeed.org/version/1",
    "title": "Icicles of Thought â€¢ All posts by \"activeadmin\" tag",
    "description": "",
    "home_page_url": "https://lorefnon.me",
    "items": [
        {
            "id": "https://lorefnon.me/2015/03/02/dealing-with-json-fields-in-active-admin.html",
            "url": "https://lorefnon.me/2015/03/02/dealing-with-json-fields-in-active-admin.html",
            "title": "Dealing with JSON data in Active Admin",
            "date_published": "2015-03-02T00:00:00.000Z",
            "content_html": "<p>Many a times, depending on the requirements, it makes sense to store\nunstructured json data in database fields. PostgreSQL recognizes this\nrequirement and provides a dedicated json field that automatically\nhandles JSON validation. As has been outlined in the\n<a href=\"http://edgeguides.rubyonrails.org/active_record_postgresql.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">RoR Guides</a>\n, it is pretty simple to take advantage of this feature from Rails.\nHowever if you also use <a href=\"https://github.com/activeadmin/activeadmin\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">ActiveAdmin</a> to manage your admin interface,\nyou will quickly find out that library <a href=\"https://github.com/justinfrench/formtastic\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Formtastic</a> that ActiveAdmin\nuses to manage its forms, leaves a lot to be desired when it comes to\nJSON editing support.</p>\n<p>In this post we outline a simple approach to improve JSON editing\nsupport in ActiveAdmin using the excellent <a href=\"https://github.com/josdejong/jsoneditor/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">JSON editor widget</a>\nby <a href=\"https://github.com/josdejong\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Jos de Jong</a>. It is worth pointing\nout that our implementation has very little to do with PostgreSQL\nand may be used without modifications if you are storing JSON in say MySQL\ntext fields. Of course you will need to handle server side validation yourself in that case.</p>\n<p>The source code for the post is available on <a href=\"https://github.com/lorefnon/activeadmin-jsoneditor-demo\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Github</a>.</p>\n<p>Let us have a simple product model with following schema:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CreateProducts</span> &lt; ActiveRecord::Migration</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span></span>\n    create_table <span class=\"hljs-symbol\">:products</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|t|</span>\n      t.string <span class=\"hljs-symbol\">:name</span>\n      t.text <span class=\"hljs-symbol\">:description</span>\n      t.json <span class=\"hljs-symbol\">:metadata</span>\n      t.timestamps\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>You may expect providing admin support for this model will just be\na matter of adding a file <code>app/admin/product.rb</code>:</p>\n<pre><code class=\"hljs ruby\">ActiveAdmin.register Product <span class=\"hljs-keyword\">do</span>\n  permit_params <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:description</span>, <span class=\"hljs-symbol\">:metadata</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>However the moment you try to create a new instance, you will be greeted\nwith an error message:</p>\n<p><img src=\"/images/formtastic_unknown_input.png\" alt=\"Formtastic unknown input error\" loading=\"lazy\"></p>\n<p>So basically Formtastic has no input field pre-configured for json\nfield. A rudimentary workaround is fairly simple - We explicitly ask\nit to use a textarea for metadata field</p>\n<pre><code class=\"hljs ruby\">ActiveAdmin.register Product <span class=\"hljs-keyword\">do</span>\n\n  permit_params <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:description</span>, <span class=\"hljs-symbol\">:metadata</span>\n\n  form <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|f|</span>\n    f.inputs <span class=\"hljs-keyword\">do</span>\n      f.input <span class=\"hljs-symbol\">:name</span>\n      f.input <span class=\"hljs-symbol\">:description</span>\n      f.input <span class=\"hljs-symbol\">:metadata</span>, <span class=\"hljs-symbol\">as:</span> <span class=\"hljs-symbol\">:text</span>\n    <span class=\"hljs-keyword\">end</span>\n    f.actions\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>This does the job:</p>\n<p><img src=\"/images/aa1.png\" alt=\"Form with explicitly specified textarea\" loading=\"lazy\"></p>\n<p>But seriously, if you have to edit this json very frequently or manage\nlarge json entries, a simple textarea is not an ideal solution. Plus\nif you accidentally enter some invalid json, You will be provided with a\nfeedback only post submission:</p>\n<p><img src=\"/images/aa2.png\" alt=\"Error in JSON field\" loading=\"lazy\">\n<img src=\"/images/aa3.png\" alt=\"JSON validation error\" loading=\"lazy\"></p>\n<p>The <a href=\"https://github.com/josdejong/jsoneditor/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">JSON editor widget</a>\nby <a href=\"https://github.com/josdejong\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Jos de Jong</a> provides a lot better json editing\ninterface. You can try it out <a href=\"http://jsoneditoronline.org/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">online</a>.</p>\n<p>If you like what you see, you will be pleased to find that the widget\nis pretty easy to integrate right inside ActiveAdmin.</p>\n<p>Let us first configure our form to add a class to the json field\nso that we can handle json input fields in a generic fashion.</p>\n<pre><code class=\"hljs ruby\">ActiveAdmin.register Product <span class=\"hljs-keyword\">do</span>\n\n  permit_params <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:description</span>, <span class=\"hljs-symbol\">:metadata</span>\n\n  form <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|f|</span>\n    f.inputs <span class=\"hljs-keyword\">do</span>\n      f.input <span class=\"hljs-symbol\">:name</span>\n      f.input <span class=\"hljs-symbol\">:description</span>\n      f.input <span class=\"hljs-symbol\">:metadata</span>, <span class=\"hljs-symbol\">as:</span> <span class=\"hljs-symbol\">:text</span>, <span class=\"hljs-symbol\">input_html:</span> &#123; <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>: &#x27;<span class=\"hljs-title\">jsoneditor</span>-<span class=\"hljs-title\">target</span>&#x27; &#125;</span>\n    <span class=\"hljs-keyword\">end</span>\n    f.actions\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Next we will need to download the <a href=\"http://jsoneditoronline.org/downloads/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">relevant files</a> and add to our vendor\ndirectory. I have already changed the files to use sprockets urls, so you can\ngrab the files form the repo.</p>\n<p>Next we modify the active_admin.js.coffee:</p>\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-comment\">#= require active_admin/base</span>\n<span class=\"hljs-comment\">#= require jsoneditor</span>\n<span class=\"hljs-comment\">#= require jsoneditor_activeadmin_integration</span></code></pre>\n\n<p>Once we have the required files in place, integration is pretty simple -\n<code>app/assets/javascripts/jsoneditor_activeadmin_integration</code>:</p>\n<pre><code class=\"hljs coffeescript\">$ -&gt;\n\n  $(<span class=\"hljs-string\">&#x27;.jsoneditor-target&#x27;</span>).each -&gt;\n\n    target = $ this\n\n    container = $(<span class=\"hljs-string\">&#x27;&lt;div class=&quot;jsoneditor-container&quot;&gt;&#x27;</span>)\n      .insertAfter target\n\n    editor = <span class=\"hljs-keyword\">new</span> JSONEditor container[<span class=\"hljs-number\">0</span>],\n      modes: [<span class=\"hljs-string\">&#x27;code&#x27;</span>, <span class=\"hljs-string\">&#x27;form&#x27;</span>, <span class=\"hljs-string\">&#x27;text&#x27;</span>, <span class=\"hljs-string\">&#x27;tree&#x27;</span>, <span class=\"hljs-string\">&#x27;view&#x27;</span>]\n      change: <span class=\"hljs-function\">-&gt;</span>\n        target.val editor.get()\n\n    editor.set(\n      <span class=\"hljs-keyword\">try</span>\n        <span class=\"hljs-built_in\">JSON</span>.parse target.val()\n    )\n\n    target.hide()</code></pre>\n\n<p>This simply hides the textarea for json field, and adds a json editor\nwidget. When the editor is updated, the hidden textarea is updated\nwith the new value - so our form continues to work just as expected,\nwithout Formtastic having to be aware of the widget at all.</p>\n<p>I had to explicitly override some of the conflicting styles from\nActiveAdmin which were messing up the Editor Widget css:</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-selector-class\">.jsoneditor-container</span>, <span class=\"hljs-selector-class\">.jsoneditor-contextmenu</span> &#123;\n    <span class=\"hljs-selector-tag\">table</span> &#123;\n        <span class=\"hljs-attribute\">width</span>: auto;\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n    &#125;\n\n    <span class=\"hljs-selector-class\">.jsoneditor</span> &#123;\n        <span class=\"hljs-attribute\">background</span>: white;\n    &#125;\n\n    <span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:hover</span>, <span class=\"hljs-selector-class\">.menu</span> <span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-class\">.menu</span> <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;\n        <span class=\"hljs-attribute\">background</span>: none;\n        <span class=\"hljs-attribute\">text-shadow</span>: none;\n        <span class=\"hljs-attribute\">box-shadow</span>: none;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">0</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-selector-class\">.jsoneditor-container</span> &#123;\n    <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">20%</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80%</span>;\n&#125;</code></pre>\n\n<p>And we are pretty much done:\n<img src=\"/images/aa4.png\" alt=\"Widget integrated with Active Admin\" loading=\"lazy\"></p>\n<p>I realize that the default styling of the widget sticks out a bit against\n the default styling of ActiveAdmin page, but all that is needed to rectify is a few CSS\nrules which I leave as an exercise for the reader.</p>\n<p>As always, any feedback and suggestions are more than welcome.</p>\n",
            "tags": [
                "Ruby",
                "Rails",
                "ActiveAdmin"
            ]
        },
        {
            "id": "https://lorefnon.me/2014/07/13/presenting-sql-views-through-active-admin.html",
            "url": "https://lorefnon.me/2014/07/13/presenting-sql-views-through-active-admin.html",
            "title": "Presenting SQL views through ActiveAdmin",
            "date_published": "2014-07-13T00:00:00.000Z",
            "content_html": "<p><a href=\"http://en.wikipedia.org/wiki/View_(SQL)\"> SQL Views </a> are a handy feature that allow us to\nsave a query whose results are computed&#x2F;collated dynamically whenever the view is requested.\nBecause the abstraction provided by a view is semantically close to a table we can leverage\nActiveRecord to interface with the view through a proxy model and use it to\npresent the result set through <a href=\"http://activeadmin.info/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">ActiveAdmin</a> interface.</p>\n<p>This can be very useful for reporting and visual inspection, especially by\nnon technical staff.</p>\n<p>The rest of the post elaborates on a simple approach for doing this through\ncode examples. Please note that henceforth we use the term view\nto refer to an SQL View rather than Rails view templates. Also the code is\nwritten for Rails 4 but should be usable with Rails 3 as well.</p>\n<p>For the sake of illustration we use an example database containing\ngeographical information of Indian cities. The full code is available <a href=\"https://github.com/lorefnon/active_admin_view_demo\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">here</a>.\nFor brevity we just mention the generator commands and\nmodel classes here:</p>\n<pre><code class=\"hljs sh\">rails g model City name:string district_id:<span class=\"hljs-built_in\">integer</span>\nrails g model District name:string state_id:<span class=\"hljs-built_in\">integer</span>\nrails g model State name:string</code></pre>\n\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># app/models/state.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">State</span> &lt; ActiveRecord::Base</span>\n  has_many <span class=\"hljs-symbol\">:districts</span>\n  has_many <span class=\"hljs-symbol\">:cities</span>, <span class=\"hljs-symbol\">through:</span> <span class=\"hljs-symbol\">:districts</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># app/models/district.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">District</span> &lt; ActiveRecord::Base</span>\n  belongs_to <span class=\"hljs-symbol\">:state</span>\n  has_many <span class=\"hljs-symbol\">:cities</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># app/models/city.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">City</span> &lt; ActiveRecord::Base</span>\n  belongs_to <span class=\"hljs-symbol\">:district</span>\n  has_one <span class=\"hljs-symbol\">:state</span>, <span class=\"hljs-symbol\">through:</span> <span class=\"hljs-symbol\">:district</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Note: Using the most recent Rails version, 4.1.4, will cause numerous dependency\nconflicts, hence we use Rails 4.0.0 with ActiveAdmin edge.Since we don&#39;t plan\nto use any cutting edge features in this example this should be an acceptable\ncompromise.</p>\n<p>We stick to default Devise based AdminUser for authentication. Once we generate\nactive admin resources for our models, we have something like this:</p>\n<img src=\"/images/active_admin_states.png\" />\n<img src=\"/images/active_admin_districts.png\" />\n<img src=\"/images/active_admin_cities.png\" />\n\n<p>The view that we intend to create combines the data in the three tables\njoins.</p>\n<pre><code>SELECT cities.id AS id, states.name AS state, districts.name AS district, cities.name AS city\nFROM states\nINNER JOIN districts ON districts.state_id = states.id\nINNER JOIN cities ON cities.district_id = districts.id\n</code></pre>\n<img src=\"/images/joins_states.png\" />\n\n<p>To create the view we generate a migration:</p>\n<pre><code>rails g migration create_state_district_city_view\n</code></pre>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CreateStateDistrictCityView</span> &lt; ActiveRecord::Migration</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">up</span></span>\n    <span class=\"hljs-keyword\">self</span>.connection.execute <span class=\"hljs-string\">%Q( CREATE OR REPLACE VIEW state_district_city_view AS</span>\n<span class=\"hljs-string\">      SELECT cities.id AS id, states.name AS state, districts.name AS district, cities.name AS city</span>\n<span class=\"hljs-string\">      FROM states</span>\n<span class=\"hljs-string\">      INNER JOIN districts ON districts.state_id = states.id</span>\n<span class=\"hljs-string\">      INNER JOIN cities ON cities.district_id = districts.id</span>\n<span class=\"hljs-string\">    )</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">down</span></span>\n    <span class=\"hljs-keyword\">self</span>.connection.execute <span class=\"hljs-string\">&quot;DROP VIEW IF EXISTS state_district_city_view;&quot;</span>\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Now a view, as far as read access is concerned, behaves similar to a table, we\ncan just define a normal ActiveRecord model to access this view.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StateDistrictCityViewProxy</span> &lt; ActiveRecord::Base</span>\n    <span class=\"hljs-keyword\">self</span>.table_name = <span class=\"hljs-string\">&quot;state_district_city_view&quot;</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>We can take the proxy model for a test drive using IRB:</p>\n<pre><code class=\"hljs ruby\">&gt; StateDistrictCityViewProxy.limit(<span class=\"hljs-number\">10</span>).to_a\n  StateDistrictCityViewProxy Load (<span class=\"hljs-number\">0</span>.4ms)  SELECT <span class=\"hljs-string\">`state_district_city_view`</span>.* FROM <span class=\"hljs-string\">`state_district_city_view`</span> LIMIT <span class=\"hljs-number\">10</span>\n=&gt; [#&lt;StateDistrictCityViewProxy id: 1, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Agali&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 2, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Amadagur&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 3, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Amarapuram&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 4, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Anantapur&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 5, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Atmakur&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 6, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Bathalapalle&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 7, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Beluguppa&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 8, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Bommanahal&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 9, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Brahmasamudram&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 10, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Bukkapatnam&quot;&gt;]</code></pre>\n\n<p>Now that we have a model, generating an ActiveAdmin resource is as simple as:</p>\n<pre><code> rails g active_admin:resource StateDistrictCityViewProxy\n</code></pre>\n<p>At this point upon visiting the index page in ActiveAdmin we might have expected\na fancy paginated table but instead we are greeted with a not-so-helpful error:</p>\n<img src=\"/images/err1.png\"/>\n\n<p>The problem is immediately obvious if we try to get the attributes of a model instance:</p>\n<pre><code>&gt; s1 = StateDistrictCityViewProxy.first\n  StateDistrictCityViewProxy Load (0.3ms)  SELECT `state_district_city_view`.* FROM `state_district_city_view` LIMIT 1\n=&gt; #&lt;StateDistrictCityViewProxy id: 1, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Agali&quot;&gt;\n&gt; s1.attributes\n=&gt; &#123;&quot;id&quot;=&gt;1, &quot;state&quot;=&gt;&quot;Andhra Pradesh&quot;, &quot;district&quot;=&gt;&quot;Anantapur&quot;, &quot;city&quot;=&gt;&quot;Agali&quot;, nil=&gt;nil&#125;\n</code></pre>\n<p>So the question is where is the nil coming from? The problem is that an SQL view doesn&#39;t have a primary key. Rails doesn&#39;t automatically\nassume that our <code>id</code> field is a primary key.</p>\n<pre><code>&gt; StateDistrictCityViewProxy.primary_key\n=&gt; nil\n</code></pre>\n<p>We can not somehow add a primary key to an SQL view, that is utterly pointless. However we can force ActiveRecord to use the <code>id</code> attribute\nas primary key.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StateDistrictCityViewProxy</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-keyword\">self</span>.table_name = <span class=\"hljs-string\">&quot;state_district_city_view&quot;</span>\n  <span class=\"hljs-keyword\">self</span>.primary_key = <span class=\"hljs-string\">&quot;id&quot;</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>And voila. We have our fancy table:</p>\n<img src=\"/images/active_admin_view.png\"/>\n\n<h1 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats:\"></a>Caveats:</h1><p>While everything looks great at this point, our setup has a couple of issues that need to be resolved:</p>\n<h2 id=\"schema-rb\"><a href=\"#schema-rb\" class=\"headerlink\" title=\"schema.rb\"></a>schema.rb</h2><p>If you take a look at schema.rb the problem immediately becomes obvious. Nothing about our view is to be found.\nThe problem is that Rails is blissfully oblivious of our SQL views and the sql statements\nin our migrations have not introducted any changes in schema.rb. So when you regenerate the database from\nschema.yml the view will not be created. This has multiple solutions. A simple one\nis to get rid of schema.rb in favor of sql schema format.</p>\n<p>In config&#x2F;application.rb:</p>\n<pre><code>config.active_record.schema_format = :sql\n</code></pre>\n<p>Next time we run <code>rake db:migrate</code> a <code>structure.sql</code> file will be generated that contains the SQL\nfor generating our views.</p>\n<p>An alternative option is the gem <a href=\"https://github.com/lomba/schema_plus\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">schema_plus</a> that augments ActiveRecord\nwith support for views among other advanced database features.</p>\n<h2 id=\"Edit-x2F-Delete-actions\"><a href=\"#Edit-x2F-Delete-actions\" class=\"headerlink\" title=\"Edit&#x2F;Delete actions\"></a>Edit&#x2F;Delete actions</h2><p>Our ActiveAdmin view table has been blessed with <code>Edit</code> and <code>Delete</code> actions for every row, which\noviously trigger an error. For example, here is what we end up with when clicking on <code>Delete</code> :</p>\n<img src=\"/images/err2.png\"/>\n\n<p>Let us declare the proxy model as readonly.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StateDistrictCityViewProxy</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-keyword\">self</span>.table_name = <span class=\"hljs-string\">&quot;state_district_city_view&quot;</span>\n  <span class=\"hljs-keyword\">self</span>.primary_key = <span class=\"hljs-string\">&quot;id&quot;</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">readonly?</span></span>\n    <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Next we simply remove the irrelevant actions from the ActiveAdmin view:</p>\n<pre><code class=\"hljs ruby\">ActiveAdmin.register StateDistrictCityViewProxy <span class=\"hljs-keyword\">do</span>\n\n  actions <span class=\"hljs-symbol\">:index</span>, <span class=\"hljs-symbol\">:show</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Now that the quirks of our setup have been ironed out, feel free to go ahead and try it out.\nOf course SQL views are not the only solution for a problem like this and the aforementioned table could have been\nbuilt entirely through DSLs provided by ActiveAdmin. But nonetheless, SQL views are something that\nmost DBAs are already familiar with and is a hassle free setup. If you already have a legacy database\nwith views or need to use views for other auxiliary purposes, the aforementioned approach may make\nthings easy for you.</p>\n<p>Any suggestion or criticism is welcome.</p>\n",
            "tags": [
                "Ruby",
                "Rails",
                "ActiveAdmin"
            ]
        }
    ]
}