<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lorefnon.me</id>
    <title>Icicles of Thought â€¢ Posts by &#34;activeadmin&#34; tag</title>
    <link href="https://lorefnon.me" />
    <updated>2015-03-02T00:00:00.000Z</updated>
    <category term="Javascript" />
    <category term="KnockoutJS" />
    <category term="Ruby" />
    <category term="EventMachine" />
    <category term="Websockets" />
    <category term="SQLite" />
    <category term="Jade" />
    <category term="Node.js" />
    <category term="Rails" />
    <category term="Emacs" />
    <category term="Gulp" />
    <category term="ActiveAdmin" />
    <category term="ActiveRecord" />
    <category term="Devise" />
    <category term="Integration" />
    <category term="ZSH" />
    <category term="Productivity Hacks" />
    <category term="OCR" />
    <category term="Design Patterns" />
    <category term="InfluxDB" />
    <category term="Grafana" />
    <category term="React" />
    <category term="Functional Programming" />
    <category term="ES6" />
    <category term="Helm" />
    <category term="SPF" />
    <category term="CSS" />
    <category term="Redux" />
    <category term="Redux-loop" />
    <category term="Frontend" />
    <category term="Vagrant" />
    <category term="Clojure" />
    <category term="Hashicorp" />
    <category term="Typescript" />
    <category term="ReasonML" />
    <category term="Next.js" />
    <category term="Koa" />
    <category term="Apollo" />
    <category term="GraphQL" />
    <category term="MongoDB" />
    <category term="Automerge" />
    <category term="CRDT" />
    <category term="SVG" />
    <category term="Comlink" />
    <category term="Web-workers" />
    <category term="io-ts" />
    <category term="Routing" />
    <category term="HAR" />
    <category term="Jq" />
    <category term="Lit-html" />
    <category term="Stimulus" />
    <category term="Kotlin" />
    <category term="Vert.X" />
    <category term="Vert.X-Web" />
    <category term="Backend-development" />
    <category term="API-development" />
    <category term="Java" />
    <category term="JOOQ" />
    <category term="Ruby on Rails" />
    <category term="Liquibase" />
    <category term="tbls" />
    <category term="jOOQ" />
    <category term="Vue" />
    <category term="TypeScript" />
    <category term="Gradle" />
    <category term="Spring" />
    <category term="Spring-Boot" />
    <category term="gRPC" />
    <category term="Redis" />
    <category term="Database" />
    <category term="Exposed" />
    <category term="vim" />
    <category term="kotlin" />
    <category term="spring" />
    <category term="spring-security" />
    <category term="komapper" />
    <category term="spring-boot" />
    <category term="typescript" />
    <category term="zod" />
    <category term="ts-match" />
    <category term="MobX" />
    <category term="MobX-State-Tree" />
    <category term="VSCode" />
    <entry>
        <id>https://lorefnon.me/2015/03/02/dealing-with-json-fields-in-active-admin.html</id>
        <title>Dealing with JSON data in Active Admin</title>
        <link rel="alternate" href="https://lorefnon.me/2015/03/02/dealing-with-json-fields-in-active-admin.html"/>
        <content type="html">&lt;p&gt;Many a times, depending on the requirements, it makes sense to store
unstructured json data in database fields. PostgreSQL recognizes this
requirement and provides a dedicated json field that automatically
handles JSON validation. As has been outlined in the
&lt;a href=&#34;http://edgeguides.rubyonrails.org/active_record_postgresql.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;RoR Guides&lt;/a&gt;
, it is pretty simple to take advantage of this feature from Rails.
However if you also use &lt;a href=&#34;https://github.com/activeadmin/activeadmin&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;ActiveAdmin&lt;/a&gt; to manage your admin interface,
you will quickly find out that library &lt;a href=&#34;https://github.com/justinfrench/formtastic&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Formtastic&lt;/a&gt; that ActiveAdmin
uses to manage its forms, leaves a lot to be desired when it comes to
JSON editing support.&lt;/p&gt;
&lt;p&gt;In this post we outline a simple approach to improve JSON editing
support in ActiveAdmin using the excellent &lt;a href=&#34;https://github.com/josdejong/jsoneditor/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;JSON editor widget&lt;/a&gt;
by &lt;a href=&#34;https://github.com/josdejong&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Jos de Jong&lt;/a&gt;. It is worth pointing
out that our implementation has very little to do with PostgreSQL
and may be used without modifications if you are storing JSON in say MySQL
text fields. Of course you will need to handle server side validation yourself in that case.&lt;/p&gt;
&lt;p&gt;The source code for the post is available on &lt;a href=&#34;https://github.com/lorefnon/activeadmin-jsoneditor-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let us have a simple product model with following schema:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreateProducts&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;ActiveRecord::Migration&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;change&lt;/span&gt;
    create_table &lt;span class=&#34;hljs-symbol&#34;&gt;:products&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; |&lt;span class=&#34;hljs-params&#34;&gt;t&lt;/span&gt;|
      t.string &lt;span class=&#34;hljs-symbol&#34;&gt;:name&lt;/span&gt;
      t.text &lt;span class=&#34;hljs-symbol&#34;&gt;:description&lt;/span&gt;
      t.json &lt;span class=&#34;hljs-symbol&#34;&gt;:metadata&lt;/span&gt;
      t.timestamps
    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may expect providing admin support for this model will just be
a matter of adding a file &lt;code&gt;app/admin/product.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;ActiveAdmin.register Product &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;
  permit_params &lt;span class=&#34;hljs-symbol&#34;&gt;:name&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;:description&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;:metadata&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However the moment you try to create a new instance, you will be greeted
with an error message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/formtastic_unknown_input.png&#34; alt=&#34;Formtastic unknown input error&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;So basically Formtastic has no input field pre-configured for json
field. A rudimentary workaround is fairly simple - We explicitly ask
it to use a textarea for metadata field&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;ActiveAdmin.register Product &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;

  permit_params &lt;span class=&#34;hljs-symbol&#34;&gt;:name&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;:description&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;:metadata&lt;/span&gt;

  form &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; |&lt;span class=&#34;hljs-params&#34;&gt;f&lt;/span&gt;|
    f.inputs &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;
      f.input &lt;span class=&#34;hljs-symbol&#34;&gt;:name&lt;/span&gt;
      f.input &lt;span class=&#34;hljs-symbol&#34;&gt;:description&lt;/span&gt;
      f.input &lt;span class=&#34;hljs-symbol&#34;&gt;:metadata&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;hljs-symbol&#34;&gt;:text&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
    f.actions
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does the job:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/aa1.png&#34; alt=&#34;Form with explicitly specified textarea&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;But seriously, if you have to edit this json very frequently or manage
large json entries, a simple textarea is not an ideal solution. Plus
if you accidentally enter some invalid json, You will be provided with a
feedback only post submission:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/aa2.png&#34; alt=&#34;Error in JSON field&#34; loading=&#34;lazy&#34;&gt;
&lt;img src=&#34;/images/aa3.png&#34; alt=&#34;JSON validation error&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/josdejong/jsoneditor/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;JSON editor widget&lt;/a&gt;
by &lt;a href=&#34;https://github.com/josdejong&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Jos de Jong&lt;/a&gt; provides a lot better json editing
interface. You can try it out &lt;a href=&#34;http://jsoneditoronline.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you like what you see, you will be pleased to find that the widget
is pretty easy to integrate right inside ActiveAdmin.&lt;/p&gt;
&lt;p&gt;Let us first configure our form to add a class to the json field
so that we can handle json input fields in a generic fashion.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;ActiveAdmin.register Product &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;

  permit_params &lt;span class=&#34;hljs-symbol&#34;&gt;:name&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;:description&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;:metadata&lt;/span&gt;

  form &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; |&lt;span class=&#34;hljs-params&#34;&gt;f&lt;/span&gt;|
    f.inputs &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;
      f.input &lt;span class=&#34;hljs-symbol&#34;&gt;:name&lt;/span&gt;
      f.input &lt;span class=&#34;hljs-symbol&#34;&gt;:description&lt;/span&gt;
      f.input &lt;span class=&#34;hljs-symbol&#34;&gt;:metadata&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;hljs-symbol&#34;&gt;:text&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;input_html:&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-symbol&#34;&gt;class:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;jsoneditor-target&amp;#x27;&lt;/span&gt; &amp;#125;
    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
    f.actions
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we will need to download the &lt;a href=&#34;http://jsoneditoronline.org/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;relevant files&lt;/a&gt; and add to our vendor
directory. I have already changed the files to use sprockets urls, so you can
grab the files form the repo.&lt;/p&gt;
&lt;p&gt;Next we modify the active_admin.js.coffee:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs coffeescript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#= require active_admin/base&lt;/span&gt;
&lt;span class=&#34;hljs-comment&#34;&gt;#= require jsoneditor&lt;/span&gt;
&lt;span class=&#34;hljs-comment&#34;&gt;#= require jsoneditor_activeadmin_integration&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have the required files in place, integration is pretty simple -
&lt;code&gt;app/assets/javascripts/jsoneditor_activeadmin_integration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs coffeescript&#34;&gt;$ -&amp;gt;

  $(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;.jsoneditor-target&amp;#x27;&lt;/span&gt;).each -&amp;gt;

    target = $ this

    container = $(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;lt;div class=&amp;quot;jsoneditor-container&amp;quot;&amp;gt;&amp;#x27;&lt;/span&gt;)
      .insertAfter target

    editor = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; JSONEditor container[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;],
      modes: [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;code&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;form&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;text&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;tree&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;view&amp;#x27;&lt;/span&gt;]
      change: &lt;span class=&#34;hljs-function&#34;&gt;-&amp;gt;&lt;/span&gt;
        target.val editor.get()

    editor.set(
      &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;
        &lt;span class=&#34;hljs-built_in&#34;&gt;JSON&lt;/span&gt;.parse target.val()
    )

    target.hide()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simply hides the textarea for json field, and adds a json editor
widget. When the editor is updated, the hidden textarea is updated
with the new value - so our form continues to work just as expected,
without Formtastic having to be aware of the widget at all.&lt;/p&gt;
&lt;p&gt;I had to explicitly override some of the conflicting styles from
ActiveAdmin which were messing up the Editor Widget css:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs scss&#34;&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.jsoneditor-container&lt;/span&gt;, &lt;span class=&#34;hljs-selector-class&#34;&gt;.jsoneditor-contextmenu&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-selector-tag&#34;&gt;table&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-attribute&#34;&gt;width&lt;/span&gt;: auto;
        &lt;span class=&#34;hljs-attribute&#34;&gt;margin&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;
    &amp;#125;

    &lt;span class=&#34;hljs-selector-class&#34;&gt;.jsoneditor&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-attribute&#34;&gt;background&lt;/span&gt;: white;
    &amp;#125;

    &lt;span class=&#34;hljs-selector-tag&#34;&gt;button&lt;/span&gt;, &lt;span class=&#34;hljs-selector-tag&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:hover&lt;/span&gt;, &lt;span class=&#34;hljs-selector-class&#34;&gt;.menu&lt;/span&gt; &lt;span class=&#34;hljs-selector-tag&#34;&gt;button&lt;/span&gt;, &lt;span class=&#34;hljs-selector-class&#34;&gt;.menu&lt;/span&gt; &lt;span class=&#34;hljs-selector-tag&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:hover&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-attribute&#34;&gt;background&lt;/span&gt;: none;
        &lt;span class=&#34;hljs-attribute&#34;&gt;text-shadow&lt;/span&gt;: none;
        &lt;span class=&#34;hljs-attribute&#34;&gt;box-shadow&lt;/span&gt;: none;
        &lt;span class=&#34;hljs-attribute&#34;&gt;border-radius&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;
    &amp;#125;
&amp;#125;

&lt;span class=&#34;hljs-selector-class&#34;&gt;.jsoneditor-container&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-attribute&#34;&gt;margin-left&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;20%&lt;/span&gt;;
    &lt;span class=&#34;hljs-attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;80%&lt;/span&gt;;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we are pretty much done:
&lt;img src=&#34;/images/aa4.png&#34; alt=&#34;Widget integrated with Active Admin&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;I realize that the default styling of the widget sticks out a bit against
 the default styling of ActiveAdmin page, but all that is needed to rectify is a few CSS
rules which I leave as an exercise for the reader.&lt;/p&gt;
&lt;p&gt;As always, any feedback and suggestions are more than welcome.&lt;/p&gt;
</content>
        <category term="Ruby" />
        <category term="Rails" />
        <category term="ActiveAdmin" />
        <updated>2015-03-02T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2014/07/13/presenting-sql-views-through-active-admin.html</id>
        <title>Presenting SQL views through ActiveAdmin</title>
        <link rel="alternate" href="https://lorefnon.me/2014/07/13/presenting-sql-views-through-active-admin.html"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/View_(SQL)&#34;&gt; SQL Views &lt;/a&gt; are a handy feature that allow us to
save a query whose results are computed&amp;#x2F;collated dynamically whenever the view is requested.
Because the abstraction provided by a view is semantically close to a table we can leverage
ActiveRecord to interface with the view through a proxy model and use it to
present the result set through &lt;a href=&#34;http://activeadmin.info/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;ActiveAdmin&lt;/a&gt; interface.&lt;/p&gt;
&lt;p&gt;This can be very useful for reporting and visual inspection, especially by
non technical staff.&lt;/p&gt;
&lt;p&gt;The rest of the post elaborates on a simple approach for doing this through
code examples. Please note that henceforth we use the term view
to refer to an SQL View rather than Rails view templates. Also the code is
written for Rails 4 but should be usable with Rails 3 as well.&lt;/p&gt;
&lt;p&gt;For the sake of illustration we use an example database containing
geographical information of Indian cities. The full code is available &lt;a href=&#34;https://github.com/lorefnon/active_admin_view_demo&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;here&lt;/a&gt;.
For brevity we just mention the generator commands and
model classes here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;rails g model City name:string district_id:&lt;span class=&#34;hljs-built_in&#34;&gt;integer&lt;/span&gt;
rails g model District name:string state_id:&lt;span class=&#34;hljs-built_in&#34;&gt;integer&lt;/span&gt;
rails g model State name:string&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# app/models/state.rb&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;State&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;ActiveRecord::Base&lt;/span&gt;
  has_many &lt;span class=&#34;hljs-symbol&#34;&gt;:districts&lt;/span&gt;
  has_many &lt;span class=&#34;hljs-symbol&#34;&gt;:cities&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;through:&lt;/span&gt; &lt;span class=&#34;hljs-symbol&#34;&gt;:districts&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;hljs-comment&#34;&gt;# app/models/district.rb&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;District&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;ActiveRecord::Base&lt;/span&gt;
  belongs_to &lt;span class=&#34;hljs-symbol&#34;&gt;:state&lt;/span&gt;
  has_many &lt;span class=&#34;hljs-symbol&#34;&gt;:cities&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;hljs-comment&#34;&gt;# app/models/city.rb&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;City&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;ActiveRecord::Base&lt;/span&gt;
  belongs_to &lt;span class=&#34;hljs-symbol&#34;&gt;:district&lt;/span&gt;
  has_one &lt;span class=&#34;hljs-symbol&#34;&gt;:state&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;through:&lt;/span&gt; &lt;span class=&#34;hljs-symbol&#34;&gt;:district&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: Using the most recent Rails version, 4.1.4, will cause numerous dependency
conflicts, hence we use Rails 4.0.0 with ActiveAdmin edge.Since we don&amp;#39;t plan
to use any cutting edge features in this example this should be an acceptable
compromise.&lt;/p&gt;
&lt;p&gt;We stick to default Devise based AdminUser for authentication. Once we generate
active admin resources for our models, we have something like this:&lt;/p&gt;
&lt;img src=&#34;/images/active_admin_states.png&#34; /&gt;
&lt;img src=&#34;/images/active_admin_districts.png&#34; /&gt;
&lt;img src=&#34;/images/active_admin_cities.png&#34; /&gt;

&lt;p&gt;The view that we intend to create combines the data in the three tables
joins.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT cities.id AS id, states.name AS state, districts.name AS district, cities.name AS city
FROM states
INNER JOIN districts ON districts.state_id = states.id
INNER JOIN cities ON cities.district_id = districts.id
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;/images/joins_states.png&#34; /&gt;

&lt;p&gt;To create the view we generate a migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails g migration create_state_district_city_view
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreateStateDistrictCityView&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;ActiveRecord::Migration&lt;/span&gt;

  &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;up&lt;/span&gt;
    &lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;.connection.execute &lt;span class=&#34;hljs-string&#34;&gt;%Q( CREATE OR REPLACE VIEW state_district_city_view AS&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;      SELECT cities.id AS id, states.name AS state, districts.name AS district, cities.name AS city&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;      FROM states&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;      INNER JOIN districts ON districts.state_id = states.id&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;      INNER JOIN cities ON cities.district_id = districts.id&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;    )&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;down&lt;/span&gt;
    &lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;.connection.execute &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;DROP VIEW IF EXISTS state_district_city_view;&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now a view, as far as read access is concerned, behaves similar to a table, we
can just define a normal ActiveRecord model to access this view.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StateDistrictCityViewProxy&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;ActiveRecord::Base&lt;/span&gt;
    &lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;.table_name = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;state_district_city_view&amp;quot;&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can take the proxy model for a test drive using IRB:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&amp;gt; StateDistrictCityViewProxy.limit(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;).to_a
  StateDistrictCityViewProxy Load (&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;.4ms)  &lt;span class=&#34;hljs-variable constant_&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`state_district_city_view`&lt;/span&gt;.* &lt;span class=&#34;hljs-variable constant_&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`state_district_city_view`&lt;/span&gt; &lt;span class=&#34;hljs-variable constant_&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;
=&amp;gt; [#&amp;lt;StateDistrictCityViewProxy id: 1, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Agali&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 2, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Amadagur&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 3, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Amarapuram&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 4, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Anantapur&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 5, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Atmakur&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 6, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Bathalapalle&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 7, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Beluguppa&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 8, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Bommanahal&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 9, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Brahmasamudram&amp;quot;&amp;gt;, #&amp;lt;StateDistrictCityViewProxy id: 10, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Bukkapatnam&amp;quot;&amp;gt;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have a model, generating an ActiveAdmin resource is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; rails g active_admin:resource StateDistrictCityViewProxy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point upon visiting the index page in ActiveAdmin we might have expected
a fancy paginated table but instead we are greeted with a not-so-helpful error:&lt;/p&gt;
&lt;img src=&#34;/images/err1.png&#34;/&gt;

&lt;p&gt;The problem is immediately obvious if we try to get the attributes of a model instance:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; s1 = StateDistrictCityViewProxy.first
  StateDistrictCityViewProxy Load (0.3ms)  SELECT `state_district_city_view`.* FROM `state_district_city_view` LIMIT 1
=&amp;gt; #&amp;lt;StateDistrictCityViewProxy id: 1, state: &amp;quot;Andhra Pradesh&amp;quot;, district: &amp;quot;Anantapur&amp;quot;, city: &amp;quot;Agali&amp;quot;&amp;gt;
&amp;gt; s1.attributes
=&amp;gt; &amp;#123;&amp;quot;id&amp;quot;=&amp;gt;1, &amp;quot;state&amp;quot;=&amp;gt;&amp;quot;Andhra Pradesh&amp;quot;, &amp;quot;district&amp;quot;=&amp;gt;&amp;quot;Anantapur&amp;quot;, &amp;quot;city&amp;quot;=&amp;gt;&amp;quot;Agali&amp;quot;, nil=&amp;gt;nil&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the question is where is the nil coming from? The problem is that an SQL view doesn&amp;#39;t have a primary key. Rails doesn&amp;#39;t automatically
assume that our &lt;code&gt;id&lt;/code&gt; field is a primary key.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; StateDistrictCityViewProxy.primary_key
=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can not somehow add a primary key to an SQL view, that is utterly pointless. However we can force ActiveRecord to use the &lt;code&gt;id&lt;/code&gt; attribute
as primary key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StateDistrictCityViewProxy&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;ActiveRecord::Base&lt;/span&gt;
  &lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;.table_name = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;state_district_city_view&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;.primary_key = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voila. We have our fancy table:&lt;/p&gt;
&lt;img src=&#34;/images/active_admin_view.png&#34;/&gt;

&lt;h1 id=&#34;Caveats&#34;&gt;&lt;a href=&#34;#Caveats&#34; class=&#34;headerlink&#34; title=&#34;Caveats:&#34;&gt;&lt;/a&gt;Caveats:&lt;/h1&gt;&lt;p&gt;While everything looks great at this point, our setup has a couple of issues that need to be resolved:&lt;/p&gt;
&lt;h2 id=&#34;schema-rb&#34;&gt;&lt;a href=&#34;#schema-rb&#34; class=&#34;headerlink&#34; title=&#34;schema.rb&#34;&gt;&lt;/a&gt;schema.rb&lt;/h2&gt;&lt;p&gt;If you take a look at schema.rb the problem immediately becomes obvious. Nothing about our view is to be found.
The problem is that Rails is blissfully oblivious of our SQL views and the sql statements
in our migrations have not introducted any changes in schema.rb. So when you regenerate the database from
schema.yml the view will not be created. This has multiple solutions. A simple one
is to get rid of schema.rb in favor of sql schema format.&lt;/p&gt;
&lt;p&gt;In config&amp;#x2F;application.rb:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.active_record.schema_format = :sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next time we run &lt;code&gt;rake db:migrate&lt;/code&gt; a &lt;code&gt;structure.sql&lt;/code&gt; file will be generated that contains the SQL
for generating our views.&lt;/p&gt;
&lt;p&gt;An alternative option is the gem &lt;a href=&#34;https://github.com/lomba/schema_plus&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;schema_plus&lt;/a&gt; that augments ActiveRecord
with support for views among other advanced database features.&lt;/p&gt;
&lt;h2 id=&#34;Edit-x2F-Delete-actions&#34;&gt;&lt;a href=&#34;#Edit-x2F-Delete-actions&#34; class=&#34;headerlink&#34; title=&#34;Edit&amp;#x2F;Delete actions&#34;&gt;&lt;/a&gt;Edit&amp;#x2F;Delete actions&lt;/h2&gt;&lt;p&gt;Our ActiveAdmin view table has been blessed with &lt;code&gt;Edit&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; actions for every row, which
oviously trigger an error. For example, here is what we end up with when clicking on &lt;code&gt;Delete&lt;/code&gt; :&lt;/p&gt;
&lt;img src=&#34;/images/err2.png&#34;/&gt;

&lt;p&gt;Let us declare the proxy model as readonly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StateDistrictCityViewProxy&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;ActiveRecord::Base&lt;/span&gt;
  &lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;.table_name = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;state_district_city_view&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;.primary_key = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;

  &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;readonly?&lt;/span&gt;
    &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we simply remove the irrelevant actions from the ActiveAdmin view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;ActiveAdmin.register StateDistrictCityViewProxy &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;

  actions &lt;span class=&#34;hljs-symbol&#34;&gt;:index&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;:show&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the quirks of our setup have been ironed out, feel free to go ahead and try it out.
Of course SQL views are not the only solution for a problem like this and the aforementioned table could have been
built entirely through DSLs provided by ActiveAdmin. But nonetheless, SQL views are something that
most DBAs are already familiar with and is a hassle free setup. If you already have a legacy database
with views or need to use views for other auxiliary purposes, the aforementioned approach may make
things easy for you.&lt;/p&gt;
&lt;p&gt;Any suggestion or criticism is welcome.&lt;/p&gt;
</content>
        <category term="Ruby" />
        <category term="Rails" />
        <category term="ActiveAdmin" />
        <updated>2014-07-13T00:00:00.000Z</updated>
    </entry>
</feed>
