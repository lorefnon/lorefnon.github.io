{
    "version": "https://jsonfeed.org/version/1",
    "title": "Icicles of Thought â€¢ All posts by \"rails\" tag",
    "description": "",
    "home_page_url": "https://lorefnon.me",
    "items": [
        {
            "id": "https://lorefnon.me/2016/03/31/database-driven-scheduling-with-clockwork-and-activejob.html",
            "url": "https://lorefnon.me/2016/03/31/database-driven-scheduling-with-clockwork-and-activejob.html",
            "title": "Database driven scheduling with Clockwork and ActiveJob",
            "date_published": "2016-03-31T00:00:00.000Z",
            "content_html": "\n\n<a class=\"header-link\" href=\"#on-cron-and-cron-management-dsls\"><h2 id=\"on-cron-and-cron-management-dsls\">On cron and cron management DSLs</h2></a>\n\n<p>The <a href=\"https://en.wikipedia.org/wiki/Cron\">cron utility</a> is the typical goto scheduling solution in unix/linux systems. Utilities like <a href=\"https://github.com/javan/whenever\">whenever</a> allow us to take advantage of cron through an elegant and declarative pure ruby DSL.</p>\n\n<p>The typical approach when using whenever for scheduling is to use deployment hooks to update the crontab from whenever's configuration during application deployment. However this approach falls short when the schedule is expected to be configurable at run time and especially if we want to give administrators fine grained controls over what is being scheduled and when.</p>\n\n<a class=\"header-link\" href=\"#database-driven-scheduling\"><h2 id=\"database-driven-scheduling\">Database driven scheduling</h2></a>\n\n<p>The post outlines an alternative solution using the library <a href=\"https://github.com/tomykaira/clockwork\">clockwork</a> that makes it easy to make event scheduling run time configurable through database models managed using familiar ruby ORMs.</p>\n\n<p>While clockwork handles the scheduling aspect, the responsibility of actual execution of the jobs is expected to be delegated to a background processor like <a href=\"https://github.com/mperham/sidekiq\">sidekiq</a> or <a href=\"https://github.com/collectiveidea/delayed_job\">delayed job</a>.</p>\n\n<a class=\"header-link\" href=\"#activejob-and-standardized-apis-for-background-processing\"><h2 id=\"activejob-and-standardized-apis-for-background-processing\">ActiveJob and standardized APIs for background processing</h2></a>\n\n<p>Rather than coupling our code to a specific background processor which might in turn may be coupled with a specific transport system (like Sidekiq and Redis) it is advisable to rely instead (as much as possible) on ActiveJob API which provides a standardized API for background processing in Rails ecosystem.</p>\n\n<a class=\"header-link\" href=\"#integration-with-admin-interfaces\"><h2 id=\"integration-with-admin-interfaces\">Integration with Admin interfaces</h2></a>\n\n<p>The benefit of the event system being manageable through ActiveRecord is that integrated admin interfaces like <a href=\"https://activeadmin.info\">ActiveAdmin</a> and <a href=\"https://github.com/thoughtbot/administrate\">Administrate</a> (which we might already have integrated in our existing applications) work out of the box and we get a complete schedule management interface with minimal extraneous boilerblate.</p>\n\n<a class=\"header-link\" href=\"#getting-started-with-our-app\"><h2 id=\"getting-started-with-our-app\">Getting started with our app</h2></a>\n\n<p>The rest of the tutorial walks through the creation of a Postgres backed Rails 5 application that illustrates the concepts outlined above.</p>\n\n<p>We start off with familiar rails application generation steps:</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span>gem install rails --pre --no-rdoc --no-ri\n\n<span class=\"nv\">$ </span>rails -v\nRails 5.0.0.beta3\n</code></pre></div>\n<p>Note that while skipping rdoc and ri is purely a matter of convenience (I did not need them at the time) - the <code>--pre</code> flag is required, as of this writing, for installing Rails 5 as it is still in beta.</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span>rails new rails5-clockwork-demo --database<span class=\"o\">=</span>postgresql\n\n      create\n      create  README.md\n      create  Rakefile\n      create  config.ru\n      create  .gitignore\n      create  Gemfile\n      create  app\n      create  app/assets/config/manifest.js\n      create  app/assets/javascripts/application.js\n      create  app/assets/javascripts/cable.coffee\n      create  app/assets/stylesheets/application.css\n      create  app/channels/application_cable/channel.rb\n      create  app/channels/application_cable/connection.rb\n      create  app/controllers/application_controller.rb\n      create  app/helpers/application_helper.rb\n      create  app/jobs/application_job.rb\n      create  app/mailers/application_mailer.rb\n      create  app/models/application_record.rb\n      create  app/views/layouts/application.html.erb\n      create  app/views/layouts/mailer.html.erb\n      create  app/views/layouts/mailer.text.erb\n      create  app/assets/images/.keep\n      create  app/assets/javascripts/channels\n      create  app/assets/javascripts/channels/.keep\n      create  app/controllers/concerns/.keep\n      create  app/models/concerns/.keep\n      create  bin\n      create  bin/bundle\n      create  bin/rails\n      create  bin/rake\n      create  bin/setup\n      create  bin/update\n      create  config\n      create  config/routes.rb\n      create  config/application.rb\n      create  config/environment.rb\n      create  config/secrets.yml\n      create  config/cable.yml\n      create  config/puma.rb\n      create  config/environments\n      create  config/environments/development.rb\n      create  config/environments/production.rb\n      create  config/environments/test.rb\n      create  config/initializers\n      create  config/initializers/active_record_belongs_to_required_by_default.rb\n      create  config/initializers/application_controller_renderer.rb\n      create  config/initializers/assets.rb\n      create  config/initializers/backtrace_silencers.rb\n      create  config/initializers/callback_terminator.rb\n      create  config/initializers/cookies_serializer.rb\n      create  config/initializers/cors.rb\n      create  config/initializers/filter_parameter_logging.rb\n      create  config/initializers/inflections.rb\n      create  config/initializers/mime_types.rb\n      create  config/initializers/per_form_csrf_tokens.rb\n      create  config/initializers/request_forgery_protection.rb\n      create  config/initializers/session_store.rb\n      create  config/initializers/wrap_parameters.rb\n      create  config/locales\n      create  config/locales/en.yml\n      create  config/boot.rb\n      create  config/database.yml\n      create  db\n      create  db/seeds.rb\n      create  lib\n      create  lib/tasks\n      create  lib/tasks/.keep\n      create  lib/assets\n      create  lib/assets/.keep\n      create  log\n      create  log/.keep\n      create  public\n      create  public/404.html\n      create  public/422.html\n      create  public/500.html\n      create  public/apple-touch-icon-precomposed.png\n      create  public/apple-touch-icon.png\n      create  public/favicon.ico\n      create  public/robots.txt\n      create  <span class=\"nb\">test</span>/fixtures\n      create  <span class=\"nb\">test</span>/fixtures/.keep\n      create  <span class=\"nb\">test</span>/fixtures/files\n      create  <span class=\"nb\">test</span>/fixtures/files/.keep\n      create  <span class=\"nb\">test</span>/controllers\n      create  <span class=\"nb\">test</span>/controllers/.keep\n      create  <span class=\"nb\">test</span>/mailers\n      create  <span class=\"nb\">test</span>/mailers/.keep\n      create  <span class=\"nb\">test</span>/models\n      create  <span class=\"nb\">test</span>/models/.keep\n      create  <span class=\"nb\">test</span>/helpers\n      create  <span class=\"nb\">test</span>/helpers/.keep\n      create  <span class=\"nb\">test</span>/integration\n      create  <span class=\"nb\">test</span>/integration/.keep\n      create  <span class=\"nb\">test</span>/test_helper.rb\n      create  tmp\n      create  tmp/.keep\n      create  tmp/cache\n      create  tmp/cache/assets\n      create  vendor/assets/javascripts\n      create  vendor/assets/javascripts/.keep\n      create  vendor/assets/stylesheets\n      create  vendor/assets/stylesheets/.keep\n      remove  config/initializers/cors.rb\n</code></pre></div>\n<p>Note the line <code>create  app/jobs/application_job.rb</code> above. Rails 5 comes pre-integrated with ActiveJob.</p>\n\n<p>Next we add clockwork and sidekiq to our Gemfile.</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">gem 'clockwork'\ngem 'sidekiq'\n</code></pre></div>\n<p>It may be tempting to just leave the in-memory adapter of ActiveJob in place but it should not be used in any production application. <a href=\"http://edgeguides.rubyonrails.org/active_job_basics.html\">Rails guides</a> explain it well enough:</p>\n\n<blockquote>\n<p>Rails itself only provides an in-process queuing system, which only keeps the jobs in RAM. If the process crashes or the machine is reset, then all outstanding jobs are lost with the default async back-end. This may be fine for smaller apps or non-critical jobs, but most production apps will need to pick a persistent backend.</p>\n</blockquote>\n\n<a class=\"header-link\" href=\"#implementing-the-event-model\"><h2 id=\"implementing-the-event-model\">Implementing the Event model</h2></a>\n\n<p>Next we need to define our models for persisting our schedules.</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">rails g model event name:string frequency:integer at:string job_name:string job_arguments:jsonb\n</code></pre></div>\n<p>Here the first three columns correspond to accessors mandated by Clockwork. Name is primary for descriptive logging purposes (more on this below). <code>frequency</code> specifies the recurrance frequency in seconds. <code>at</code> signifies point of occurance within the recurrance span. Following are the valid formats:</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">HH:MM\n H:MM\n**:MM\nHH:**\n(Mon|mon|Monday|monday) HH:MM\n</code></pre></div>\n<p>The last two columns <code>job_name</code> and <code>job_arguments</code> identify the job to be triggered. As would become obvious below, we did not need to provide the job name through the database - it could be inferred at the runtime through any custom logic expressed in ruby. But having it in database leads to a straightforward and transparent implementation and management.</p>\n\n<p>It may be tempting to just reuse the <code>name</code> field as the job_name as well, but it may obscure debugging when same job is being invoked as part of multiple events for different use cases. It is recommended to keep the <code>name</code> as something representative of the use case - eg. <code>enterprise_plan_customers_sales_aggregation_trigger</code>.</p>\n\n<p>Our model would look something like below:</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">class Event &lt; ApplicationRecord\n  validates :name, :frequency, :job_name, presence: true\nend\n</code></pre></div>\n<a class=\"header-link\" href=\"#clock-rb-file-\"><h2 id=\"clock-rb-file-\">\n<code>clock.rb</code> file:</h2></a>\n\n<p>The entry point of clockwork is the file <code>clock.rb</code>. This is the file that tells clockwork to\npoll the events table and execute the inferred job.</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"nb\">require</span> <span class=\"s1\">'clockwork'</span>\n<span class=\"nb\">require</span> <span class=\"s1\">'clockwork/database_events'</span>\n<span class=\"n\">require_relative</span> <span class=\"s1\">'./config/boot'</span>\n<span class=\"n\">require_relative</span> <span class=\"s1\">'./config/environment'</span>\n\n<span class=\"k\">module</span> <span class=\"nn\">Clockwork</span>\n\n  <span class=\"c1\"># required to enable database syncing support</span>\n  <span class=\"no\">Clockwork</span><span class=\"o\">.</span><span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"no\">DatabaseEvents</span><span class=\"o\">::</span><span class=\"no\">Manager</span><span class=\"o\">.</span><span class=\"n\">new</span>\n\n  <span class=\"n\">sync_database_events</span> <span class=\"ss\">model</span><span class=\"p\">:</span> <span class=\"o\">::</span><span class=\"no\">Event</span><span class=\"p\">,</span> <span class=\"ss\">every</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">minute</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">event</span><span class=\"o\">|</span>\n    <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">job_name</span><span class=\"o\">.</span><span class=\"n\">constantize</span><span class=\"o\">.</span><span class=\"n\">perform_later</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">job_arguments</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#configuring-activejob-to-use-sidekiq\"><h2 id=\"configuring-activejob-to-use-sidekiq\">Configuring ActiveJob to use sidekiq</h2></a>\n\n<p>We had added sidekiq as the persistence backend for ActiveJob but we have not configured ActiveJob to use it.</p>\n\n<p>That is one additional line of code in <code>config/application.rb</code></p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">module</span> <span class=\"nn\">Rails5ClockworkDemo</span>\n  <span class=\"k\">class</span> <span class=\"nc\">Application</span> <span class=\"o\">&lt;</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Application</span>\n\n    <span class=\"c1\"># Configure ActiveJob to use sidekiq</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">active_job</span><span class=\"o\">.</span><span class=\"n\">queue_adapter</span> <span class=\"o\">=</span> <span class=\"ss\">:sidekiq</span>\n\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#running-clockwork-\"><h2 id=\"running-clockwork-\">Running clockwork:</h2></a>\n\n<p>Clockwork can be executed by running <code>clockwork clock.rb</code> at project root. However we can not expect something exciting yet because we simply have no entries in the table:</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span>clockwork clock.rb\nI, <span class=\"o\">[</span>2016-04-01T02:02:54.032058 <span class=\"c\">#57534]  INFO -- : Starting clock for 1 events: [ sync_database_events_for_model_Event ]</span>\nI, <span class=\"o\">[</span>2016-04-01T02:02:54.032150 <span class=\"c\">#57534]  INFO -- : Triggering 'sync_database_events_for_model_Event'</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#adding-administrative-interface-\"><h2 id=\"adding-administrative-interface-\">Adding administrative interface:</h2></a>\n\n<p>We would be using ActiveAdmin for our admin interface for managing events. As of this writing to use ActiveAdmin along with Rails 5 we need to use the master branch of ActiveAdmin.</p>\n\n<p>While we will not go into elaboration of the ActiveAdmin DSL, most of the ideas should be applicable to alternative admin builders as well.</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"c1\"># Gemfile.rb</span>\n\n<span class=\"n\">gem</span> <span class=\"s1\">'activeadmin'</span><span class=\"p\">,</span> <span class=\"ss\">github</span><span class=\"p\">:</span> <span class=\"s1\">'activeadmin'</span>\n</code></pre></div>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span>rails g active_admin:install\n</code></pre></div>\n<p>For now we skip authorization as well as authentication entirely - integrating ActiveAdmin with authentication systems is covered <a href=\"https://github.com/activeadmin/activeadmin/blob/master/docs/0-installation.md\">here</a> and usage in conjugation with authorization systems is covered <a href=\"https://github.com/activeadmin/activeadmin/blob/master/docs/13-authorization-adapter.md\">here</a> in the official docs.</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span>rails g active_admin:install --skip-users\nRunning via Spring preloader in process 59785\n      create  config/initializers/active_admin.rb\n      create  app/admin\n      create  app/admin/dashboard.rb\n       route  ActiveAdmin.routes<span class=\"o\">(</span>self<span class=\"o\">)</span>\n    generate  active_admin:assets\nRunning via Spring preloader in process 59787\n      create  app/assets/javascripts/active_admin.js.coffee\n      create  app/assets/stylesheets/active_admin.scss\n      create  db/migrate/20160331204250_create_active_admin_comments.rb\n</code></pre></div>\n<p>To present our Event model through ActiveAdmin we need to generate an ActiveAdmin Event resource.</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span>rails g active_admin:resource Event\n</code></pre></div>\n<p>The above command creates the following file for us:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"c1\"># app/admin/event.rb</span>\n\n<span class=\"no\">ActiveAdmin</span><span class=\"o\">.</span><span class=\"n\">register</span> <span class=\"no\">Event</span> <span class=\"k\">do</span>\n\n<span class=\"c1\"># See permitted parameters documentation:</span>\n<span class=\"c1\"># https://github.com/activeadmin/activeadmin/blob/master/docs/2-resource-customization.md#setting-up-strong-parameters</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># permit_params :list, :of, :attributes, :on, :model</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># or</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># permit_params do</span>\n<span class=\"c1\">#   permitted = [:permitted, :attributes]</span>\n<span class=\"c1\">#   permitted &lt;&lt; :other if params[:action] == 'create' &amp;&amp; current_user.admin?</span>\n<span class=\"c1\">#   permitted</span>\n<span class=\"c1\"># end</span>\n\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Once we configure permitted parameters as elaborated in the comments we have something like below:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"no\">ActiveAdmin</span><span class=\"o\">.</span><span class=\"n\">register</span> <span class=\"no\">Event</span> <span class=\"k\">do</span>\n\n  <span class=\"n\">permit_params</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:job_name</span><span class=\"p\">,</span> <span class=\"ss\">:job_arguments</span><span class=\"p\">,</span> <span class=\"ss\">:frequency</span><span class=\"p\">,</span> <span class=\"ss\">:at</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Now after we can run our migrations and booted up our server:</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"o\">=</span>&gt; Booting <span class=\"nv\">Puma</span>\n<span class=\"o\">=</span>&gt; Rails 5.0.0.beta3 application starting in development on http://localhost:3000\n<span class=\"o\">=</span>&gt; Run <span class=\"sb\">`</span>rails server -h<span class=\"sb\">`</span> <span class=\"k\">for </span>more startup <span class=\"nv\">options</span>\n<span class=\"o\">=</span>&gt; Ctrl-C to shutdown server\nPuma starting in single mode...\n* Version 3.2.0 <span class=\"o\">(</span>ruby 2.3.0-p0<span class=\"o\">)</span>, codename: Spring Is A Heliocentric Viewpoint\n* Min threads: 5, max threads: 5\n* Environment: development\n* Listening on tcp://localhost:3000\n</code></pre></div>\n<p>If this is the first time you are using Rails 5 the new default home page as well as puma as the default server can be a pleasant surprise.</p>\n\n<p><img src=\"/images/2016-03-31/rails5_home.png\"></p>\n\n<p>Our admin panel available at <code>/admin</code> provides us with the means to edit our events.</p>\n\n<p>However when we attempt to create an event we would be faced with an error because formtastic does not know out of the box how to handle jsonb field which we used for job arguments.</p>\n\n<p>While it is not difficult to <a href=\"https://stackoverflow.com/questions/33720697/activeadmin-formtastic-custom-input-json\">create custom form inputs</a> for formtastic and I have outlined an <a href=\"https://lorefnon.me/2015/03/02/dealing-with-json-fields-in-active-admin.html\">alternative approach</a> before, to keep the example simple let us simply use a textarea for the arguments field:</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">  form do |f|\n    f.inputs do\n      f.input :name\n      f.input :job_name\n      f.input :frequency\n      f.input :at\n      f.input :job_arguments, as: :text\n    end\n    f.actions\n  end\n</code></pre></div>\n<p>Now we can create an event to trigger a dummy job:</p>\n\n<p><img src=\"/images/2016-03-31/dummy_job_form.png\"></p>\n\n<a class=\"header-link\" href=\"#defining-our-jobs-\"><h2 id=\"defining-our-jobs-\">Defining our jobs:</h2></a>\n\n<p>Of course, for this job to be runnable, we need to define the job as well. We can use ActiveJob's generators for the same:</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span>rails g job dummy\nRunning via Spring preloader in process 63269\n      invoke  test_unit\n      create    <span class=\"nb\">test</span>/jobs/dummy_job_test.rb\n      create  app/jobs/dummy_job.rb\n</code></pre></div>\n<p>Our job implementation itself is fairly mundane but serves the purpose of illustration:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">DummyJob</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationJob</span>\n  <span class=\"n\">queue_as</span> <span class=\"ss\">:default</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">perform</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nb\">puts</span> <span class=\"s2\">\"Dummy Job Executed\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Now once our clockwork process synchronizes with the databases, it will pickup the dummy job and keep executing every one second:</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\">I, <span class=\"o\">[</span>2016-04-01T02:30:54.003679 <span class=\"c\">#57534]  INFO -- : Triggering 'sync_database_events_for_model_Event'</span>\nI, <span class=\"o\">[</span>2016-04-01T02:30:54.005132 <span class=\"c\">#57534]  INFO -- : Triggering 'execute_dummy_job'</span>\nI, <span class=\"o\">[</span>2016-04-01T02:30:55.005873 <span class=\"c\">#57534]  INFO -- : Triggering 'execute_dummy_job'</span>\nI, <span class=\"o\">[</span>2016-04-01T02:30:56.001670 <span class=\"c\">#57534]  INFO -- : Triggering 'execute_dummy_job'</span>\nI, <span class=\"o\">[</span>2016-04-01T02:30:57.001761 <span class=\"c\">#57534]  INFO -- : Triggering 'execute_dummy_job'</span>\n</code></pre></div>\n<p>In the rails development log we can see that ActiveRecord is queuing this job:</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\"><span class=\"o\">[</span>ActiveJob<span class=\"o\">]</span> Enqueued DummyJob <span class=\"o\">(</span>Job ID: 64813900-c70f-4b40-9dd7-452c4cac6b73<span class=\"o\">)</span> to Sidekiq<span class=\"o\">(</span>default<span class=\"o\">)</span>\n<span class=\"o\">[</span>ActiveJob<span class=\"o\">]</span> Enqueued DummyJob <span class=\"o\">(</span>Job ID: 0d0a66d1-a46b-4427-92db-83a301b38c1c<span class=\"o\">)</span> to Sidekiq<span class=\"o\">(</span>default<span class=\"o\">)</span>\n<span class=\"o\">[</span>ActiveJob<span class=\"o\">]</span> Enqueued DummyJob <span class=\"o\">(</span>Job ID: 1de45b36-7cc9-4a9a-9bb7-363591f64dd5<span class=\"o\">)</span> to Sidekiq<span class=\"o\">(</span>default<span class=\"o\">)</span>\n<span class=\"o\">[</span>ActiveJob<span class=\"o\">]</span> Enqueued DummyJob <span class=\"o\">(</span>Job ID: 483fe8a2-5acf-4830-80fb-6c6883f0f7c2<span class=\"o\">)</span> to Sidekiq<span class=\"o\">(</span>default<span class=\"o\">)</span>\n</code></pre></div>\n<p>Now if we run sidekiq, our background processor - we should see the enqued job getting executed in the <code>log/sidekiq.log</code>:</p>\n<div class=\"highlight\"><pre><code class=\"bash language-bash\" data-lang=\"bash\">2016-03-31T21:01:00.064Z 64128 TID-ox54l2v7s DummyJob JID-fc59a048d2d1fe2aeecc3452 INFO: start\nDummy Job Executed\n</code></pre></div>\n<p>This concludes our introductory post on database driven scheduling with clockwork. Please share any issues you might have faced or any suggestions for improvement in the comments.</p>\n\n<p>The source code for this post is available in this <a href=\"https://github.com/lorefnon/rails5-clockwork-demo\">github repo</a>.</p>\n\n",
            "tags": [
                "Ruby",
                "Rails"
            ]
        },
        {
            "id": "https://lorefnon.me/2016/01/16/useful-delegation-patterns-for-rails.html",
            "url": "https://lorefnon.me/2016/01/16/useful-delegation-patterns-for-rails.html",
            "title": "Useful delegation patterns for Rails",
            "date_published": "2016-01-16T00:00:00.000Z",
            "content_html": "\n<a class=\"header-link\" href=\"#about-delegation\"><h2 id=\"about-delegation\">About delegation</h2></a>\n\n<p>Delegation is a very useful software pattern and this post focusses on how this pattern can be applied in the context of a Rails application and the associated advantages of doing so.</p>\n\n<p>If you are unfamiliar with this pattern, <a href=\"https://en.wikipedia.org/wiki/Delegation_pattern\">Wikipedia</a> has a very good explanation: </p>\n\n<blockquote>\n<p>In software engineering, the delegation pattern is a design pattern in object-oriented programming where an object, instead of performing one of its stated tasks, delegates that task to an associated helper object.</p>\n\n<p>There is an Inversion of Responsibility in which a helper object, known as a delegate, is given the responsibility to execute a task for the delegator.</p>\n</blockquote>\n\n<p>Also, this <a href=\"https://stackoverflow.com/questions/7168714/what-is-the-purpose-of-a-delegation-pattern\">Stackoverflow post</a> has some interesting posts elaborating on the practical benefits of the concepts of delegation in a language neutral context.</p>\n\n<a class=\"header-link\" href=\"#implementing-delegators-in-ruby\"><h2 id=\"implementing-delegators-in-ruby\">Implementing Delegators in Ruby</h2></a>\n\n<p>Ruby's metaprogramming facilities enable us to implement delegation in a much easier and consise manner than many other object oriented languages.</p>\n\n<p>Using dynamic interception of method calls, it is very straightforward to forward method invocations to a target object. This is very well illustrated by the <a href=\"https://github.com/ruby/ruby/blob/trunk/lib/delegate.rb#L75-L89\">implementation</a> of <a href=\"https://github.com/sj26/ruby-1.9.3-p0/blob/master/lib/delegate.rb\">Delegate class</a> provided by Ruby standard library:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">Delegator</span> <span class=\"o\">&lt;</span> <span class=\"no\">BasicObject</span>\n\n  <span class=\"c1\">#...</span>\n\n  <span class=\"c1\">#</span>\n  <span class=\"c1\"># Handles the magic of delegation through \\_\\_getobj\\_\\_.</span>\n  <span class=\"c1\">#</span>\n  <span class=\"k\">def</span> <span class=\"nf\">method_missing</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n    <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"nb\">self</span><span class=\"o\">.</span><span class=\"n\">__getobj__</span> <span class=\"p\">&#123;</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"kp\">false</span><span class=\"p\">&#125;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">respond_to?</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n      <span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">__send__</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"k\">elsif</span> <span class=\"o\">::</span><span class=\"no\">Kernel</span><span class=\"o\">.</span><span class=\"n\">respond_to?</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"kp\">true</span><span class=\"p\">)</span>\n      <span class=\"o\">::</span><span class=\"no\">Kernel</span><span class=\"o\">.</span><span class=\"n\">instance_method</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"nb\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">block</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#wrapping-objects-with-simpledelegator\"><h2 id=\"wrapping-objects-with-simpledelegator\">Wrapping objects with SimpleDelegator</h2></a>\n\n<p>In practice we usually deal with <a href=\"https://ruby-doc.org/stdlib-2.1.0/libdoc/delegate/rdoc/SimpleDelegator.html\"><code>SimpleDelegator</code></a> subclass of <code>Delegator</code> more often. The constructor takes a single object and any method invocations are delegated to the target instance. </p>\n\n<p>We can simply subclass from <code>SimpleDelegator</code> and implement our customizations therein, and delegate to the parent object through a <code>super</code> call conveniently.</p>\n\n<p>Example from docs:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">User</span>\n  <span class=\"k\">def</span> <span class=\"nf\">born_on</span>\n    <span class=\"no\">Date</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1989</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserDecorator</span> <span class=\"o\">&lt;</span> <span class=\"no\">SimpleDelegator</span>\n  <span class=\"k\">def</span> <span class=\"nf\">birth_year</span>\n    <span class=\"n\">born_on</span><span class=\"o\">.</span><span class=\"n\">year</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"o\">&gt;</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"no\">UserDecorator</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"no\">User</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">)</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#using-delegation-for-presenter-logic\"><h3 id=\"using-delegation-for-presenter-logic\">Using delegation for Presenter logic</h3></a>\n\n<p>This is arguably the most common use case for delegators. Often we end up adding a lot of methods in our models that have nothing to do with domain logic whatsoever. Does something like this look familiar?</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">User</span>\n\n  <span class=\"c1\"># ...</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">formatted_date_of_birth</span>\n    <span class=\"n\">date_of_birth</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"Born on %m/%d/%Y\"</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Such methods which are primarily written for handling presentation concerns come into the perview of Presenter logic and are best left out of models. Instead we can decorate our model instances using presenter classes before passing them to views:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">UserDecorator</span> <span class=\"o\">&lt;</span> <span class=\"no\">SimpleDelegator</span>\n\n <span class=\"k\">def</span> <span class=\"nf\">formatted_date_of_birth</span>\n  <span class=\"n\">date_of_birth</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"Born on %m/%d/%Y\"</span><span class=\"p\">)</span>\n <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">UsersController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">show</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"o\">.</span><span class=\"n\">find</span> <span class=\"n\">params</span><span class=\"o\">[</span><span class=\"ss\">:id</span><span class=\"o\">]</span>\n    <span class=\"vi\">@user</span> <span class=\"o\">=</span> <span class=\"no\">UserDecorator</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I find this to be more elegant from an object oriented perspective compared to the conventional approach using Rails helper modules.</p>\n\n<p>There are many <a href=\"https://www.ruby-toolbox.com/categories/rails_presenters\">libraries</a> for implementing additional convenience utilities around presenters. While the above simple approach takes us quite far, if you find yourself repeating the decorator instantiation boilerplate, generators and conventions offered by a library like <a href=\"https://github.com/drapergem/draper\">Draper</a> can be helpful.</p>\n\n<p>Note that one of the biggest strengths of decorators is on demand composability. For instance we may have various user centric helper methods for reporting. We can extract them into a <code>UserReportPresenter</code> decorator that is used only in the <code>UserReportsController</code>. Accordingly we can have multiple use-case specific delegators layered one upon another, each delegating to its immediate target transparently.</p>\n\n<p>We may want to have some approach to restrict what can be decorated by a decorator. We may be tempted to define something like this:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">UserReportPresenter</span> <span class=\"o\">&lt;</span> <span class=\"no\">SimpleDecorator</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">decorated</span><span class=\"p\">)</span>\n    <span class=\"k\">unless</span> <span class=\"n\">decorated</span><span class=\"o\">.</span><span class=\"n\">is_a?</span> <span class=\"no\">User</span>\n      <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s2\">\"Expected entity being decorated to be User\"</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">super</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>However this is not something we would want to do as it breaks composability. One approach would be to \"unwrap\" the decorated before instance check:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">while</span> <span class=\"n\">decorated</span><span class=\"o\">.</span><span class=\"n\">is_a?</span> <span class=\"no\">Decorator</span>\n  <span class=\"n\">decorated</span> <span class=\"o\">=</span> <span class=\"n\">decorated</span><span class=\"o\">.</span><span class=\"n\">__getobj__</span>\n<span class=\"k\">end</span>\n<span class=\"k\">unless</span> <span class=\"n\">decorated</span><span class=\"o\">.</span><span class=\"n\">is_a?</span> <span class=\"no\">User</span>\n  <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s2\">\"Expected entity being decorated to be User\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>but I strongly recommend not resorting to <code>is_a?</code> checks at all and relying instead on behavior checks using <code>responds_to?</code>.</p>\n\n<a class=\"header-link\" href=\"#delegation-for-memoization-caching\"><h3 id=\"delegation-for-memoization-caching\">Delegation for memoization/caching</h3></a>\n\n<p>This is another good use case for delegation. We can wrap our models into Delegators that transparently cache or memoize method invocations:</p>\n\n<p>Example using <code>Rails.cache</code>:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">UserReportCachedDelegator</span> <span class=\"o\">&lt;</span> <span class=\"no\">SimpleDelegator</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">annual_performance_stats</span>\n    <span class=\"no\">Rails</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">fetch</span> <span class=\"s2\">\"user.</span><span class=\"si\">#&#123;</span><span class=\"nb\">id</span><span class=\"si\">&#125;</span><span class=\"s2\">.annual_performance_stats\"</span> <span class=\"k\">do</span>\n      <span class=\"k\">super</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>However one thing that we should keep in mind that SimpleDelegator allows the decorated target to be run time configurable. While this is not a problem in the above implementation as we use an entity specific key, this may become a problem if, for example, we were using transparent memoization through <a href=\"https://github.com/matthewrudy/memoist\">Memoist</a>:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">UserReportMemoizedDelegator</span> <span class=\"o\">&lt;</span> <span class=\"no\">SimpleDelegator</span>\n\n  <span class=\"kp\">extend</span> <span class=\"no\">Memoist</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">annual_performance_stats</span><span class=\"p\">;</span> <span class=\"k\">super</span><span class=\"p\">;</span> <span class=\"k\">end</span>\n  <span class=\"n\">memoize</span> <span class=\"ss\">:annual_performance_stats</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The above implementation is broken because even if we were to change the decorated instance using <code>__setobj__</code> our memoized method would continue returning the output of invocation of the method on previously decorated instance.</p>\n\n<p>A simple solution for the above is to flush the cache when the decorated entity changes:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">MemoizedDelegator</span> <span class=\"o\">&lt;</span> <span class=\"no\">SimpleDelegator</span>\n\n  <span class=\"kp\">extend</span> <span class=\"no\">Memoist</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">__setobj__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n     <span class=\"k\">super</span>\n     <span class=\"n\">flush_cache</span>\n   <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#using-delegation-for-collection-objects\"><h3 id=\"using-delegation-for-collection-objects\">Using delegation for collection objects</h3></a>\n\n<p>This is something I recently found to be useful. Sometimes when we need to define operations that make sense for a set of instances, we just resort to class methods in model. However a better object oriented design would be to implement such behaviors on a dedicated collection resource.</p>\n\n<p>Decorating <code>ActiveRecord::CollectionProxy</code> is helpful because we get facilities like scope chaining, lazy-loading etc. for free.</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">EmployeesReportDelegator</span> <span class=\"o\">&lt;</span> <span class=\"no\">SimpleDelegator</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">month_wise_performance_stats</span>\n    <span class=\"n\">joins</span><span class=\"p\">(</span><span class=\"ss\">:assessments</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s1\">'MONTH(assessments.created_at)'</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'assessments.evaluation_rank as rank'</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#using-delegation-to-augment-lifecycle-hooks\"><h3 id=\"using-delegation-to-augment-lifecycle-hooks\">Using delegation to augment lifecycle hooks</h3></a>\n\n<p>This is occassionaly useful especially when dealing with third party SDKs. We can leverage <code>ActiveSupport::Callbacks</code> to wrap custom callback hooks around specific behaviors of decorated objects:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">MailDispatchDelegator</span> <span class=\"o\">&lt;</span> <span class=\"no\">SimpleDelegator</span>\n\n  <span class=\"kp\">include</span> <span class=\"no\">ActiveSupport</span><span class=\"o\">::</span><span class=\"no\">Callbacks</span>\n  <span class=\"n\">define_callbacks</span> <span class=\"ss\">:dispatch</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">dispatch</span>\n    <span class=\"n\">run_callbacks</span> <span class=\"ss\">:dispatch</span> <span class=\"k\">do</span>\n      <span class=\"k\">super</span>      \n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MailFilterDelegator</span> <span class=\"o\">&lt;</span> <span class=\"no\">MailDispatchDelegator</span>\n\n  <span class=\"n\">set_callback</span> <span class=\"ss\">:dispatch</span><span class=\"p\">,</span> <span class=\"ss\">:before</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">object</span><span class=\"o\">|</span>\n    <span class=\"k\">if</span> <span class=\"n\">validated_domains</span><span class=\"o\">.</span><span class=\"n\">include?</span> <span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">domain</span>\n      <span class=\"k\">raise</span> <span class=\"no\">ValidationError</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s2\">\"Domain not whitelisted\"</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#in-rails-any-module-can-delegate\"><h2 id=\"in-rails-any-module-can-delegate\">In Rails, any module can delegate</h2></a>\n\n<p>While creating a dedicated Delegator makes sense in a variety of use cases, often we want to just delegate just a few methods to a contained object. ActiveSupport Module extensions provide a convenient approach to delegate specific methods to any contained object. This comes in very handy in controllers:</p>\n\n<a class=\"header-link\" href=\"#delegating-helpers-to-model-instances-\"><h3 id=\"delegating-helpers-to-model-instances-\">Delegating helpers to model instances:</h3></a>\n\n<p>For example in a rails controller, we might want to expose a few model methods:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">ProductsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n\n  <span class=\"n\">before_action</span> <span class=\"ss\">:ensure_logged_in!</span>\n  <span class=\"n\">delegate</span> <span class=\"ss\">:available_products</span><span class=\"p\">,</span> <span class=\"ss\">to</span><span class=\"p\">:</span> <span class=\"ss\">:current_user</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">index</span>\n    <span class=\"vi\">@available_products</span> <span class=\"o\">=</span> <span class=\"n\">available_products</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>We can also simply expose the delegated methods as a helper_method to our views:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">ProductsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n\n  <span class=\"n\">before_action</span> <span class=\"ss\">:ensure_logged_in!</span>\n  <span class=\"n\">delegate</span> <span class=\"ss\">:available_products</span><span class=\"p\">,</span> <span class=\"ss\">to</span><span class=\"p\">:</span> <span class=\"ss\">:current_user</span>\n  <span class=\"n\">helper_method</span> <span class=\"ss\">:available_products</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I have found this to be a common use case, and a class method that wraps the two can help in DRYing things up:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">delegate_helper</span> <span class=\"o\">*</span><span class=\"n\">args</span>\n  <span class=\"n\">delegate</span> <span class=\"o\">*</span><span class=\"n\">args</span>\n  <span class=\"kp\">loop</span> <span class=\"k\">do</span>\n    <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">shift</span>\n    <span class=\"k\">break</span> <span class=\"k\">unless</span> <span class=\"n\">method_name</span><span class=\"o\">.</span><span class=\"n\">is_a?</span> <span class=\"no\">Symbol</span>\n    <span class=\"n\">helper_method</span> <span class=\"n\">method_name</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The above method allows us to take advantage of full api of <code>Module#delegate</code> which allows delegation of multiple methods to single target and configuration of generated method.</p>\n\n<p>So for example, we can do the following:</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">SomeController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n\n  <span class=\"n\">before_action</span> <span class=\"ss\">:ensure_logged_in!</span>\n  <span class=\"n\">delegate_helper</span> <span class=\"ss\">:designations</span><span class=\"p\">,</span> <span class=\"ss\">:products</span><span class=\"p\">,</span> \n                  <span class=\"ss\">to</span><span class=\"p\">:</span> <span class=\"ss\">:current_user</span><span class=\"p\">,</span> \n                  <span class=\"ss\">prefix</span><span class=\"p\">:</span> <span class=\"kp\">true</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Now delegated methods would be available as <code>current_user_designations</code> and <code>current_user_products</code> in our views.</p>\n\n<p><code>Module#delegate</code> works very well with instance variables and class variables as well. Here is an example from the <a href=\"http://api.rubyonrails.org/classes/Module.html#method-i-delegate\">official documentation</a> :</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">Foo</span>\n  <span class=\"no\">CONSTANT_ARRAY</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"vc\">@@class_array</span>  <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span>\n    <span class=\"vi\">@instance_array</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"o\">]</span>\n  <span class=\"k\">end</span>\n  <span class=\"n\">delegate</span> <span class=\"ss\">:sum</span><span class=\"p\">,</span> <span class=\"ss\">to</span><span class=\"p\">:</span> <span class=\"ss\">:CONSTANT_ARRAY</span>\n  <span class=\"n\">delegate</span> <span class=\"ss\">:min</span><span class=\"p\">,</span> <span class=\"ss\">to</span><span class=\"p\">:</span> <span class=\"ss\">:@@class_array</span>\n  <span class=\"n\">delegate</span> <span class=\"ss\">:max</span><span class=\"p\">,</span> <span class=\"ss\">to</span><span class=\"p\">:</span> <span class=\"ss\">:@instance_array</span>\n<span class=\"k\">end</span>\n\n<span class=\"no\">Foo</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"o\">.</span><span class=\"n\">sum</span> <span class=\"c1\"># =&gt; 6</span>\n<span class=\"no\">Foo</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"c1\"># =&gt; 4</span>\n<span class=\"no\">Foo</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"o\">.</span><span class=\"n\">max</span> <span class=\"c1\"># =&gt; 11</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#chaining-delegators\"><h3 id=\"chaining-delegators\">Chaining delegators</h3></a>\n\n<p>As you may have inferred at this point, we can easily chain delegated invocations:</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">class ProductsController &lt; ApplicationController\n\n  before_action :ensure_logged_in!\n  delegate :manager, to: :current_user\n  delegate :designation, to: :manager, prefix: :manager\n\nend\n</code></pre></div>\n<a class=\"header-link\" href=\"#delegation-as-an-alternative-to-concerns\"><h2 id=\"delegation-as-an-alternative-to-concerns\">Delegation as an alternative to Concerns</h2></a>\n\n<p>Since the official endorsement of concerns from Rails 4 concerns have soared in popularity, however I have often observend that concerns are overused, especially for use cases that are better handled by other patterns.</p>\n\n<p>Since this post is about delegation, let us look at a few things that delegation has to offer over concerns:</p>\n\n<a class=\"header-link\" href=\"#run-time-configurability-\"><h3 id=\"run-time-configurability-\">Run time configurability:</h3></a>\n\n<p>While it is true that concerns can be injected at run time, however code that runs in the included hooks potentially modifies the host instance making run time switching of concerns not very practical in most cases. Delegation offers a clearer approach and we have already demonstrated that switching delegated instances in delegator instances is quite useful.</p>\n\n<a class=\"header-link\" href=\"#on-demand-specialization-\"><h3 id=\"on-demand-specialization-\">On demand specialization:</h3></a>\n\n<p>This is particularly useful for objects that did not originate in our code. Rather than polluting the library generated objects with application specific behavior, which may cause subtle unintended side-effects, it is much more elegant to pass around decorated instances in application code and pass the unwrapped instances back to the library should there be a need to do so.</p>\n\n<p>All in all concnerns are more suitable for application specific classes where core functionality is shared among multiple classes, and delegation is more useful for implementing auxiliary use case specific behaviors or transparently augmenting existing behavior. </p>\n\n<p>A good example of former use case would be a cross-cutting functionality like using a <code>completed_at</code> column for scoping on completion status or checking if a model (eg. Payment, Project etc.) has been completed  :</p>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">module</span> <span class=\"nn\">CompletionSupport</span>\n  <span class=\"kp\">extend</span> <span class=\"no\">ActiveSupport</span><span class=\"o\">::</span><span class=\"no\">Concern</span>\n\n  <span class=\"n\">included</span> <span class=\"k\">do</span>\n\n    <span class=\"o\">%</span><span class=\"n\">i</span><span class=\"o\">[</span><span class=\"n\">complete</span> <span class=\"n\">completed</span><span class=\"o\">].</span><span class=\"n\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">name</span><span class=\"o\">|</span>\n      <span class=\"n\">scope</span> <span class=\"nb\">name</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"p\">&#123;</span> <span class=\"n\">where</span> <span class=\"s1\">'completed_at is not null'</span> <span class=\"p\">&#125;</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">scope</span> <span class=\"ss\">:incomplete</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"p\">&#123;</span> <span class=\"n\">where</span> <span class=\"n\">completed_at</span><span class=\"p\">:</span> <span class=\"kp\">nil</span> <span class=\"p\">&#125;</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">complete!</span>\n    <span class=\"nb\">self</span><span class=\"o\">.</span><span class=\"n\">completed_at</span> <span class=\"o\">=</span> <span class=\"no\">DateTime</span><span class=\"o\">.</span><span class=\"n\">now</span>\n    <span class=\"n\">save!</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">complete?</span>\n    <span class=\"n\">completed_at</span><span class=\"o\">.</span><span class=\"n\">present?</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">alias_method</span> <span class=\"ss\">:completed?</span><span class=\"p\">,</span> <span class=\"ss\">:complete?</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">incomplete?</span>\n    <span class=\"o\">!</span> <span class=\"n\">complete?</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">alias_method</span> <span class=\"ss\">:not_completed?</span><span class=\"p\">,</span> <span class=\"ss\">:incomplete?</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#delegation-in-command-line-applications\"><h2 id=\"delegation-in-command-line-applications\">Delegation in command line applications</h2></a>\n\n<p>Last but not the least, delegation makes sense in command line applications as well. An excellent example would be github's <a href=\"https://github.com/github/hub\">hub</a> command line utility that makes a lot of github <a href=\"https://github.com/github/hub#commands\">features</a> like <code>pull-requests</code> accessible from the command line, while delegating everything else to git.</p>\n\n<a class=\"header-link\" href=\"#some-alternatives\"><h2 id=\"some-alternatives\">Some alternatives</h2></a>\n\n<a class=\"header-link\" href=\"#observers\"><h3 id=\"observers\">Observers</h3></a>\n\n<p>While observer pattern can help towards decoupling and the advantags therein overlap with those offered by delegates in some cases, in general I refrain from using Observer pattern because it makes the flow of logic harder to trace - especially in larger applications.</p>\n\n<a class=\"header-link\" href=\"#refinements\"><h3 id=\"refinements\">Refinements</h3></a>\n\n<p>Refinements are a recent addition to the Ruby language where in we can selectively monkey-patch modules (and hence classes) with custom behavior. But a key aspect of refinements is lexical scoping. The offical docs explain this very well:</p>\n\n<blockquote>\n<p>Refinements are lexical in scope. When control is transferred outside the scope the refinement is deactivated. This means that if you require or load a file or call a method that is defined outside the current scope the refinement will be deactivated:</p>\n</blockquote>\n<div class=\"highlight\"><pre><code class=\"ruby language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">C</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">module</span> <span class=\"nn\">M</span>\n  <span class=\"n\">refine</span> <span class=\"n\">C</span> <span class=\"k\">do</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span>\n      <span class=\"nb\">puts</span> <span class=\"s2\">\"C#foo in M\"</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">call_foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">foo</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">using</span> <span class=\"n\">M</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">new</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">foo</span>       <span class=\"c1\"># prints \"C#foo in M\"</span>\n<span class=\"n\">call_foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; raises NoMethodError</span>\n</code></pre></div>\n<p>While this explicit aspect of Refinements is a commendable improvement over adhoc monkey-patching in many scenarios - the convenience offered by transparent overlaying of behavior that decorators offer us, is, in most practical cases, more appealing.</p>\n\n<p>The primary exception to the above would be cases where the code consuming the augmented instances rely on <code>instance_of?</code> checks to determine the identity of passed instance. Using refinements we are not changing the class of the instance, where as while passing the wrapped instance we fail on the <code>instance_of?</code> checks as the wrapped instances are actually instances of a different class though they implement interchangeable behavior.</p>\n\n<p>This concludes our post on delegation. As always any insights on pragmatic usage of this pattern is more than welcome. Please use the comments section to share any feedback or criticism.</p>\n\n",
            "tags": [
                "Ruby",
                "Rails"
            ]
        },
        {
            "id": "https://lorefnon.me/2015/11/26/boost-your-content-focussed-site-with-structured-page-fragments.html",
            "url": "https://lorefnon.me/2015/11/26/boost-your-content-focussed-site-with-structured-page-fragments.html",
            "title": "Boost your content focussed site with Structured Page Fragments",
            "date_published": "2015-11-26T00:00:00.000Z",
            "content_html": "<h2 id=\"The-context\"><a href=\"#The-context\" class=\"headerlink\" title=\"The context\"></a>The context</h2><p>SPF.js a lightweight javascript library to incorporate dynamic page updates that dramatically reduces perceived page latency. Quoting from the Repo Homepage:</p>\n<blockquote>\n<p>Using progressive enhancement and HTML5, SPF integrates with your site to enable a faster, more fluid user experience by updating just the sections of the page that change during navigation, not the whole page. SPF provides a response format for sending document fragments, a robust system for script and style management, an in-memory cache, on-the-fly processing, and more.</p>\n</blockquote>\n<p>While for complex dynamic sites which have a significant amount of client side logic, I still recommend adopting a client side javascript framework, but for content focussed sites, a nifty utility like SPF.js can be very useful.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Why-not-good-old-js-erb-templates\"><a href=\"#Why-not-good-old-js-erb-templates\" class=\"headerlink\" title=\"Why not good old js.erb templates ?\"></a>Why not good old js.erb templates ?</h2><p>While Rails allows us to render server generated javascript templates, using them to generate dynamic page updates is a bit cumbersome for most scenarios. Especially you have to handle page url updates manually, scroll back the pages manually etc. None of them are very complex concerns, but having a library deal with such cross cutting concerns is much more elegant IMHO.</p>\n<h2 id=\"What-about-turbolinks\"><a href=\"#What-about-turbolinks\" class=\"headerlink\" title=\"What about turbolinks ?\"></a>What about turbolinks ?</h2><p>While yes, turbolinks does enjoy being a part of the default Rails stack, but frankly, it has always seemed like a half baked product. While turbolinks does improve the experience over full page reloads, behind the scenes it still loads the full page content.</p>\n<p>SPF.js allows you to just fetch the parts of the page that really need updating. The GIF below, also taken from the official site, explains this much better:</p>\n<table style=\"margin: auto\">\n  <thead>\n    <tr>\n      <th> Full page re-rerendering </th>\n      <th> Partial section replacement with SPF.js </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td> <img src=\"/images/animation-static-340x178.gif\"></td>\n      <td> <img src=\"/images/animation-dynamic-340x178.gif\"></td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"But-doesn-39-t-the-latest-version-of-turbolinks-include-support-for-partial-page-replacement\"><a href=\"#But-doesn-39-t-the-latest-version-of-turbolinks-include-support-for-partial-page-replacement\" class=\"headerlink\" title=\"But doesn&#39;t the latest version of turbolinks include support for partial page replacement ?\"></a>But doesn&#39;t the latest version of turbolinks include support for partial page replacement ?</h2><p>Yes, but there is a <a href=\"https://github.com/rails/turbolinks/issues/628\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">lack of clarity</a> over when (and if) that feature will be officially released.</p>\n<p>In a nutshell, the version of turbolinks that is scheduled to ship with Rails 5, significantly diverges from what has hitherto been considered as the <a href=\"https://github.com/rails/turbolinks/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">official turbolinks repo</a>, and will probably not contain, among other features, support for partial page replacements. While the future is not set in stone, and as DHH has <a href=\"https://github.com/rails/turbolinks/issues/628#issuecomment-157376926\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">put it</a>:</p>\n<blockquote>\n<p>But, hey, it&#39;s just code. If the current state of this repo serves your\nneeds, you don&#39;t need any official blessing from anyone to use it. You can\nuse it as-is, you can fork, you can do whatever you want. MIT baby!</p>\n</blockquote>\n<p>While I appreciate the freedom associated with open source licenses, I would rather bet on a well supported library that caters to the exact same use case and which is already being used in production in a wildly popular site - Youtube.</p>\n<h2 id=\"Integrating-SPF-js-with-Rails\"><a href=\"#Integrating-SPF-js-with-Rails\" class=\"headerlink\" title=\"Integrating SPF.js with Rails\"></a>Integrating SPF.js with Rails</h2><p>The rest of the post outlines the steps required to integrate SPF.js with a rails application. The code for this tutorial is available in <a href=\"https://github.com/lorefnon/rails-spfjs-demo\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Github</a>.</p>\n<p>We will create a dummy blog application. But hey, since this is just a demo application, we can get away with a little <a href=\"https://github.com/sevenwire/forgery\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Forgery</a>:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PostsController</span> &lt; ApplicationController</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span></span>\n    <span class=\"hljs-variable\">@page</span> = params[<span class=\"hljs-symbol\">:page</span>].to_i\n    <span class=\"hljs-variable\">@num_pages</span> = <span class=\"hljs-number\">1000</span>\n    <span class=\"hljs-variable\">@posts</span> = <span class=\"hljs-number\">10</span>.times.map &#123; fake_post_summary &#125;\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">show</span></span>\n    <span class=\"hljs-variable\">@post</span> = fake_post\n  <span class=\"hljs-keyword\">end</span>\n\n  private\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fake_post</span></span>\n    OpenStruct.new fake_post_summary.to_h.merge!(\n      <span class=\"hljs-symbol\">id:</span> params[<span class=\"hljs-symbol\">:id</span>],\n      <span class=\"hljs-symbol\">body:</span> LoremIpsum.random(<span class=\"hljs-symbol\">paragraphs:</span> rand(<span class=\"hljs-number\">20</span>))\n    )\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fake_post_summary</span></span>\n    OpenStruct.new(\n      <span class=\"hljs-symbol\">id:</span> rand(<span class=\"hljs-number\">1000</span>),\n      <span class=\"hljs-symbol\">title:</span> LoremIpsum.lorem_ipsum(<span class=\"hljs-symbol\">words:</span> rand(<span class=\"hljs-number\">20</span>)),\n      <span class=\"hljs-symbol\">summary:</span> LoremIpsum.random(<span class=\"hljs-symbol\">paragraphs:</span> <span class=\"hljs-number\">1</span>),\n      <span class=\"hljs-symbol\">author:</span> OpenStruct.new(\n        <span class=\"hljs-symbol\">user_name:</span> Forgery(<span class=\"hljs-string\">&#x27;internet&#x27;</span>).user_name,\n        <span class=\"hljs-symbol\">email:</span> Forgery(<span class=\"hljs-string\">&#x27;internet&#x27;</span>).email_address\n      )\n    )\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>So now that we have our dummy posts in place, we just need to show them:</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- posts/index.html.erb --&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;blog-container&quot;</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;blog-title title&quot;</span>&gt;</span> Lorefnon&#x27;s Awesome blog <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;page-title title&quot;</span>&gt;</span> Posts <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;posts-container&quot;</span>&gt;</span></span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> render <span class=\"hljs-string\">&#x27;posts/posts&#x27;</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>\n<br/>\n\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- posts/_posts.html.erb --&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;posts-list&quot;</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;posts&quot;</span>&gt;</span></span>\n<span class=\"xml\">    &lt;%</span><span class=\"ruby\"> <span class=\"hljs-variable\">@posts</span>.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|post|</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> render <span class=\"hljs-string\">&#x27;posts/summary&#x27;</span>, <span class=\"hljs-symbol\">post:</span> post </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    &lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;navigation-links&quot;</span>&gt;</span></span>\n<span class=\"xml\">  &lt;%=</span><span class=\"ruby\"> render <span class=\"hljs-string\">&#x27;posts/navigation_links&#x27;</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>\n<br/>\n\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- posts/_summary.html.erb --&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">data-post-id</span>=<span class=\"hljs-string\">&quot;&lt;%=</span></span></span><span class=\"ruby\"> post.id </span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt;&quot;</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;title post-title&quot;</span>&gt;</span> &lt;%=</span><span class=\"ruby\"> link_to post.title, post_path(<span class=\"hljs-symbol\">id:</span> post.id) </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> &lt;%=</span><span class=\"ruby\"> post.summary </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></code></pre>\n<br/>\n\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- posts/_navigation_links.html.erb --&gt;</span></span>\n<span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@page</span> &gt; <span class=\"hljs-number\">0</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">   &lt;%=</span><span class=\"ruby\"> link_to <span class=\"hljs-string\">&#x27;Previous Page&#x27;</span>, posts_path(<span class=\"hljs-symbol\">page:</span> <span class=\"hljs-variable\">@page</span>-<span class=\"hljs-number\">1</span>) </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@page</span> &lt; <span class=\"hljs-variable\">@num_pages</span> -<span class=\"hljs-number\">1</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">   &lt;%=</span><span class=\"ruby\"> link_to <span class=\"hljs-string\">&#x27;Next Page&#x27;</span>, posts_path(<span class=\"hljs-symbol\">page:</span> <span class=\"hljs-variable\">@page</span>+<span class=\"hljs-number\">1</span>) </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span></code></pre>\n<br/>\n\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- posts/show.html.erb --&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;blog-container&quot;</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;post-title title&quot;</span>&gt;</span> &lt;%=</span><span class=\"ruby\"> link_to <span class=\"hljs-variable\">@post</span>.title, post_path(<span class=\"hljs-symbol\">id:</span> <span class=\"hljs-variable\">@post</span>.id) </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;post-body&quot;</span>&gt;</span> &lt;%=</span><span class=\"ruby\"> <span class=\"hljs-variable\">@post</span>.body </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>\n<p>The above templates have nothing particularly characteristic. If you would have written them yourself, I guess you would have implemented something very similar. I have presented above to particularly highlight that the way you structure your views does not need to be drastically altered to use SPF.js. Hence it is easy to take your existing sites and start using SPF.js.</p>\n<p>Our dummy blog looks something like this now:</p>\n<img src=\"/images/2015-11-26/blog_index.png\">\n\n<h2 id=\"Including-SPF\"><a href=\"#Including-SPF\" class=\"headerlink\" title=\"Including SPF\"></a>Including SPF</h2><p>Next step for us is to include SPF.js in the page. For that we will just add the cdn link to our layout. Other methods of including are available <a href=\"https://github.com/youtube/spfjs#download\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">here</a>.</p>\n<p>After this inclusion our template might look something like this:</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Rails Spfjs Demo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> javascript_include_tag <span class=\"hljs-string\">&#x27;//ajax.googleapis.com/ajax/libs/spf/2.3.0/spf.js&#x27;</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> stylesheet_link_tag    <span class=\"hljs-string\">&#x27;application&#x27;</span>, <span class=\"hljs-symbol\">media:</span> <span class=\"hljs-string\">&#x27;all&#x27;</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> javascript_include_tag <span class=\"hljs-string\">&#x27;application&#x27;</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> csrf_meta_tags </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span>\n\n<span class=\"xml\">  &lt;%=</span><span class=\"ruby\"> <span class=\"hljs-keyword\">yield</span> </span><span class=\"xml\">%&gt;</span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span>\n<span class=\"xml\">    spf.init();</span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span></code></pre>\n<h2 id=\"Making-navigation-links-SPF-aware\"><a href=\"#Making-navigation-links-SPF-aware\" class=\"headerlink\" title=\"Making navigation links SPF aware\"></a>Making navigation links SPF aware</h2><p>However just initializing SPF.js does not magically ajaxify all navigation links. In fact by so far SPF.js does not alter the navigation in any way. We need to explicitly enable SPFjs for links for which our server knows how to server partial content. For SPF to process a link, it should have the class &#39;spf-link&#39;. Let us start with our navigation links:</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@page</span> &gt; <span class=\"hljs-number\">0</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">   &lt;%=</span><span class=\"ruby\"> link_to <span class=\"hljs-string\">&#x27;Previous Page&#x27;</span>, posts_path(<span class=\"hljs-symbol\">page:</span> <span class=\"hljs-variable\">@page</span>-<span class=\"hljs-number\">1</span>), <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>: &#x27;<span class=\"hljs-title\">spf</span>-<span class=\"hljs-title\">link</span>&#x27; </span></span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@page</span> &lt; <span class=\"hljs-variable\">@num_pages</span> -<span class=\"hljs-number\">1</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">   &lt;%=</span><span class=\"ruby\"> link_to <span class=\"hljs-string\">&#x27;Next Page&#x27;</span>, posts_path(<span class=\"hljs-symbol\">page:</span> <span class=\"hljs-variable\">@page</span>+<span class=\"hljs-number\">1</span>), <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>: &#x27;<span class=\"hljs-title\">spf</span>-<span class=\"hljs-title\">link</span>&#x27; </span></span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span></code></pre>\n<p>One great feature of SPF.js is that it handles graceful degradation. So, since we haven&#39;t done anything on the server side to generate partial contents, SPF will try to make an ajax request to server (with the special query parameter spf=navigate) and once that response format does not match what SPF expects, it will allow a full page reload.</p>\n<h2 id=\"Server-side-handling-for-SPF\"><a href=\"#Server-side-handling-for-SPF\" class=\"headerlink\" title=\"Server side handling for SPF\"></a>Server side handling for SPF</h2><p>Let us move on to server side handling:</p>\n<p>As we have previously mentioned that SPF sends an ajax request using spf=navigate query parameter. We can detect that in our controller and send out a special response that only includes the parts of the page we need to update:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PostsController</span> &lt; ApplicationController</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span></span>\n    <span class=\"hljs-variable\">@page</span> = params[<span class=\"hljs-symbol\">:page</span>].to_i\n    <span class=\"hljs-variable\">@num_pages</span> = <span class=\"hljs-number\">1000</span>\n    <span class=\"hljs-variable\">@posts</span> = <span class=\"hljs-number\">10</span>.times.map &#123; fake_post_summary &#125;\n\n    <span class=\"hljs-keyword\">if</span> params[<span class=\"hljs-symbol\">:spf</span>] == <span class=\"hljs-string\">&#x27;navigate&#x27;</span>\n      render <span class=\"hljs-string\">&#x27;posts/index.json&#x27;</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n...</code></pre>\n<p>Next we will have to designate the parts that can be dynamically replace using an id. In our modified <code>posts/_summary.html.erb</code> below, <code>spf-posts-container</code> serves that purpose:</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">data-post-id</span>=<span class=\"hljs-string\">&quot;&lt;%=</span></span></span><span class=\"ruby\"> post.id </span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">%&gt;&quot;</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;title post-title&quot;</span>&gt;</span> &lt;%=</span><span class=\"ruby\"> link_to post.title, post_path(<span class=\"hljs-symbol\">id:</span> post.id) </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span> &lt;%=</span><span class=\"ruby\"> post.summary </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></code></pre>\n\n<p>While SPF does not require DOM node IDs to begin with <code>spf-</code> prefix I think this is a good convention and makes the intent explict.</p>\n<p>Finally here is our json template that contains the partial page update, in the format that SPF.js <a href=\"https://youtube.github.io/spfjs/documentation/responses/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">can process</a>.</p>\n<p>index.json.erb:</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\">&#123;</span>\n<span class=\"xml\">  &quot;body&quot;: &#123;</span>\n<span class=\"xml\">    &quot;spf-posts-container&quot;: &quot;&lt;%=</span><span class=\"ruby\"> j render <span class=\"hljs-string\">&#x27;posts/posts&#x27;</span> </span><span class=\"xml\">%&gt;&quot;</span>\n<span class=\"xml\">  &#125;</span>\n<span class=\"xml\">&#125;</span></code></pre>\n<p>While we are using a simple <code>json.erb</code> template, it should be noted that any generic approach that can generate json response in rails, works well. So if you are already using <code>rabl</code> or <code>jbuilder</code> in your APIs, you can continue using that.</p>\n<p>Now when a navigation link is clicked, the json response is fetched via ajax and the page is dynamically updated - resulting in a much smoother user experience. Also note that browser url has been automatically updated and the page scrolls to the top. SPF tries to emulate the experience the experience of page change as much as possible to prevent uncanny surprises.</p>\n<img src=\"/images/2015-11-26/spf_response.png\">\n\n<h2 id=\"Optional-Leveraging-rails-magic-for-leaner-controllers\"><a href=\"#Optional-Leveraging-rails-magic-for-leaner-controllers\" class=\"headerlink\" title=\"(Optional) Leveraging rails magic for leaner controllers\"></a>(Optional) Leveraging rails magic for leaner controllers</h2><p>While the above works, it is unweildy to handle the navigation link in each controller. We can alternatively make the <code>default_render</code> method that is used by rails to be SPF aware. The <a href=\"https://github.com/rails/rails/blob/7f18ea14c893cb5c9f04d4fda9661126758332b5/actionpack/lib/action_controller/metal/implicit_render.rb\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">default implementation</a> looks like this:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">default_render</span><span class=\"hljs-params\">(*args)</span></span>\n  <span class=\"hljs-keyword\">if</span> template_exists?(action_name.to_s, _prefixes, <span class=\"hljs-symbol\">variants:</span> request.variant)\n    render(*args)\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-keyword\">if</span> block_given?\n      <span class=\"hljs-keyword\">yield</span>(*args)\n    <span class=\"hljs-keyword\">else</span>\n      logger.info <span class=\"hljs-string\">&quot;No template found for <span class=\"hljs-subst\">#&#123;<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-keyword\">class</span>.name&#125;</span>\\#<span class=\"hljs-subst\">#&#123;action_name&#125;</span>, rendering head :no_content&quot;</span> <span class=\"hljs-keyword\">if</span> logger\n      <span class=\"hljs-keyword\">super</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<p>We can override this in our ApplicationController</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ApplicationController</span> &lt; ActionController::Base</span>\n\n  <span class=\"hljs-comment\"># Prevent CSRF attacks by raising an exception.</span>\n  <span class=\"hljs-comment\"># For APIs, you may want to use :null_session instead.</span>\n  protect_from_forgery <span class=\"hljs-symbol\">with:</span> <span class=\"hljs-symbol\">:exception</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">default_render</span><span class=\"hljs-params\">(*args)</span></span>\n    <span class=\"hljs-keyword\">if</span> params[<span class=\"hljs-symbol\">:spf</span>] == <span class=\"hljs-string\">&#x27;navigate&#x27;</span>\n      render <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">#&#123;controller_name&#125;</span>/spf_<span class=\"hljs-subst\">#&#123;action_name&#125;</span>.json&quot;</span>\n    <span class=\"hljs-keyword\">else</span>\n      <span class=\"hljs-keyword\">super</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n<p>Now all we have to do is prefix the names of our SPF specific templates with <code>spf_</code> and we are done. Our <code>spf_index.json.erb</code> remains unchanged.</p>\n<p>We can clean up the action and remove SPF specific code:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PostsController</span> &lt; ApplicationController</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span></span>\n    <span class=\"hljs-variable\">@page</span> = params[<span class=\"hljs-symbol\">:page</span>].to_i\n    <span class=\"hljs-variable\">@num_pages</span> = <span class=\"hljs-number\">1000</span>\n    <span class=\"hljs-variable\">@posts</span> = <span class=\"hljs-number\">10</span>.times.map &#123; fake_post_summary &#125;\n  <span class=\"hljs-keyword\">end</span>\n\n...</code></pre>\n<h2 id=\"Navigation-hooks\"><a href=\"#Navigation-hooks\" class=\"headerlink\" title=\"Navigation hooks\"></a>Navigation hooks</h2><p>While so far everything works pretty well, we may want to hook into navigation events for greater flexibility. This may be useful for sending events to analytics service or for highlighting specific parts of page. The latter is useful because in some cases when the part replaced is very small, user might not immediate notice a quick change in the page content.</p>\n<p>For instance <code>spfdone</code> event is invoked after the asynchronous update has been applied to the page. We can attach handlers to this event just like any other event, and hook custom logic:</p>\n<img src=\"/images/2015-11-26/spfdone.png\">\n\n<p>Let us highlight the listing of our posts using CSS 3 animations when loaded asynchronously:</p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-built_in\">document</span>).on(<span class=\"hljs-string\">&#x27;spfdone&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>&#123;\n\n  <span class=\"hljs-keyword\">if</span> (event.originalEvent.detail.response.body[<span class=\"hljs-string\">&#x27;spf-posts-container&#x27;</span>]) &#123;\n    $(<span class=\"hljs-string\">&#x27;#spf-posts-container&#x27;</span>).addClass(<span class=\"hljs-string\">&#x27;flash&#x27;</span>)\n\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n      $(<span class=\"hljs-string\">&#x27;#spf-posts-container&#x27;</span>).removeClass(<span class=\"hljs-string\">&#x27;flash&#x27;</span>)\n    &#125;, <span class=\"hljs-number\">3000</span>)\n\n  &#125;\n\n&#125;);</code></pre>\n<br/>\n\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.flash</span> &#123;\n  <span class=\"hljs-attribute\">-moz-animation</span>: flash <span class=\"hljs-number\">1s</span> ease-out;\n  <span class=\"hljs-attribute\">-moz-animation-iteration-count</span>: <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-attribute\">-webkit-animation</span>: flash <span class=\"hljs-number\">1s</span> ease-out;\n  <span class=\"hljs-attribute\">-webkit-animation-iteration-count</span>: <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-attribute\">-ms-animation</span>: flash <span class=\"hljs-number\">1s</span> ease-out;\n  <span class=\"hljs-attribute\">-ms-animation-iteration-count</span>: <span class=\"hljs-number\">1</span>;\n&#125;\n\n<span class=\"hljs-keyword\">@-webkit-keyframes</span> flash &#123;\n    0% &#123; <span class=\"hljs-attribute\">background-color</span>: none; &#125;\n    50% &#123; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fbf8b2</span>; &#125;\n    100% &#123; <span class=\"hljs-attribute\">background-color</span>: none; &#125;\n&#125;\n\n<span class=\"hljs-keyword\">@-moz-keyframes</span> flash &#123;\n    0% &#123; <span class=\"hljs-attribute\">background-color</span>: none; &#125;\n    50% &#123; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fbf8b2</span>; &#125;\n    100% &#123; <span class=\"hljs-attribute\">background-color</span>: none; &#125;\n&#125;\n\n<span class=\"hljs-keyword\">@-ms-keyframes</span> flash &#123;\n    0% &#123; <span class=\"hljs-attribute\">background-color</span>: none; &#125;\n    50% &#123; <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fbf8b2</span>; &#125;\n    100% &#123; <span class=\"hljs-attribute\">background-color</span>: none; &#125;\n&#125;</code></pre>\n<p>Now you should see a subtle flash when page content has been replaced.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This concludes our small post on SPF integration with Rails. SPF allows for a lot more customization options beyond what our small covers. In particular SPF allows us to inject new scripts and styles dynamically, sophisticated <a href=\"https://youtube.github.io/spfjs/documentation/caching/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">cache management</a> and <a href=\"https://youtube.github.io/spfjs/documentation/versioning/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">resource versioning</a> support, which are all very useful features.</p>\n<p>The <a href=\"https://youtube.github.io/spfjs/documentation\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">official documentation</a> is a great place to start exploring more.</p>\n",
            "tags": [
                "Javascript",
                "Rails",
                "SPF"
            ]
        },
        {
            "id": "https://lorefnon.me/2015/11/15/a-minimal-setup-for-using-es6-modules-in-rails.html",
            "url": "https://lorefnon.me/2015/11/15/a-minimal-setup-for-using-es6-modules-in-rails.html",
            "title": "A minimal setup for using ES6 modules in Rails",
            "date_published": "2015-11-15T00:00:00.000Z",
            "content_html": "<p>While ES6 adoption is progressively improving across browsers, and the sprockets team is planning to integrate ES6 features into Rails asset pipeline in near future, using a widely popular transpiler: <a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Babel</a> we can leverage many of those features right away. The specific aspect of interest for this post is ES6 modules feature which provides a standardized module system for javascript.</p>\n<p>While babel does have a solution for ES6 modules, rather than handling dependency resolution itself - it transpiles the modules to existing javascript based module systems - the most popular ones being <a href=\"https://github.com/amdjs\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">AMD</a> and <a href=\"https://commonjs.org/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">CommonJS</a>. This post does not go into a compartive analysis of them, but there is an excellent <a href=\"addyosmani.com/writing-modular-js/\">article</a> by <a href=\"https://twitter.com/addyosmani\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Addy Osmani</a> which provides an in-depth elaboration on the topic.</p>\n<p>The solution <a href=\"https://babeljs.io/docs/setup/#rails\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">recommended</a> by the Babel team for using babel with rails, is through an experimental <a href=\"https://github.com/TannerRogalsky/sprockets-es6\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">sprockets-es6</a> gem, which is intended to be a PoC for future work to be integrated into Sprockets. Quoting from the README:</p>\n<blockquote>\n<p>This plugin is primarily experimental and will never reach a stable 1.0. The purpose is to test out BabelJS features on Sprockets 3.x and include it by default in Sprockets 4.x.</p>\n</blockquote>\n<p>Apart from the experimental status, the key issue with using this gem is that it is non-trivial to get ES6 modules to work with it. The primary reason being that, as mentioned above, even though babel transpiles ES6 modules to CommonJS (or AMD), we still need to provide an implementation of the relevant module system that will enable the browsers to recognize the modules. This means we will have to include another dependency like <a href=\"https://github.com/maccman/sprockets-commonjs\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">sprockets-commonjs</a>. However there is a caveat:</p>\n<blockquote>\n<p>One caveat to the approach this library takes, is that dependencies loaded through require() will not be added to the dependency graph. This library will not parse the AST tree for require calls. This decision has been made for a variety of reasons, but it does mean you need to require files through both CommonJS and Sprockets.</p>\n</blockquote>\n<p>Using AMD modules with <a href=\"https://github.com/jwhitley/requirejs-rails\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">requirejs-rails</a> is something that works, however javascript community has largely adopted <a href=\"https://npmjs.com/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">npm</a> for package management framework. For example - jQuery plugin repository now states:</p>\n<blockquote>\n<p>The jQuery Plugin Registry is in read-only mode.\nNew plugin releases will not be processed.\nWe recommend moving to npm, using &quot;jquery-plugin&quot; as the keyword in your package.json. The npm blog has instructions for publishing your plugin to npm.</p>\n</blockquote>\n<p>There is however a simpler solution: Using the gem <a href=\"https://github.com/browserify-rails/browserify-rails\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">browserify-rails</a> which bridges sprockets and <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">browserify</a>. Browserify is a javascript bundler that leverages CommonJS :</p>\n<blockquote>\n<p>Browserify lets you require(&#39;modules&#39;) in the browser by bundling up all of your dependencies</p>\n</blockquote>\n<p>The great thing about browserify is that we can hook in transforms which can take care of additional pre-processing before the <code>require</code>d files are bundled up. Of particular interest to us, is the browserify transform for babel - <a href=\"https://github.com/babel/babelify\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">babelify</a> which allows us to  sidestep the caveat above. We need to have a node installation on the system though, just having a javascript runtime is not sufficient - but this is not much of an issue because node.js is now widely supported on all widely used platforms.</p>\n<p>To get this to work we need to add <code>browserify-rails</code> to Gemfile:</p>\n<pre><code class=\"hljs ruby\">gem <span class=\"hljs-string\">&quot;browserify-rails&quot;</span></code></pre>\n<p>as well as a <code>package.json</code> in project root:</p>\n<pre><code class=\"hljs javascript\">&#123;\n    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;something&quot;</span>,\n    <span class=\"hljs-string\">&quot;license&quot;</span>: <span class=\"hljs-string\">&quot;MIT&quot;</span>,\n    <span class=\"hljs-string\">&quot;engines&quot;</span>: &#123;\n        <span class=\"hljs-string\">&quot;node&quot;</span>: <span class=\"hljs-string\">&quot;&gt;= 0.10&quot;</span>\n    &#125;,\n    <span class=\"hljs-string\">&quot;dependencies&quot;</span>: &#123;\n        <span class=\"hljs-string\">&quot;babel-preset-es2015&quot;</span>: <span class=\"hljs-string\">&quot;^6.1.18&quot;</span>,\n        <span class=\"hljs-string\">&quot;babelify&quot;</span>: <span class=\"hljs-string\">&quot;^7.2.0&quot;</span>,\n        <span class=\"hljs-string\">&quot;browserify&quot;</span>: <span class=\"hljs-string\">&quot;~&gt; 10.2.4&quot;</span>,\n        <span class=\"hljs-string\">&quot;browserify-incremental&quot;</span>: <span class=\"hljs-string\">&quot;^3.0.1&quot;</span>\n    &#125;\n&#125;</code></pre>\n<p>If we want to use other javascript libraries available through npm we can include them directly in the package.json. There is a single caveat though: We can not directly start using ES6 modules in our top level files (typically application.js) but only in our <code>require</code>d files:</p>\n<p>So our application.js can be fairly minimal with a single require statement:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./main&#x27;</span>)</code></pre>\n<p>Now we can use ES6 modules in main.js</p>\n<p>main.js:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> hello <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./hello&#x27;</span>\n\nhello()</code></pre>\n<p>hello.js:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    alert(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);\n&#125;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> hello;</code></pre>\n<p>If we run the server now and visit the home page, we should be greeted with a hello prompt.</p>\n",
            "tags": [
                "Javascript",
                "Rails",
                "ES6"
            ]
        },
        {
            "id": "https://lorefnon.me/2015/04/04/gathering-and-visualizing-rails-metrics-influxdb.html",
            "url": "https://lorefnon.me/2015/04/04/gathering-and-visualizing-rails-metrics-influxdb.html",
            "title": "Gathering and Visualizing metrics from Rails application using InfluxDB",
            "date_published": "2015-04-04T00:00:00.000Z",
            "content_html": "<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>InfluxDB is a distributed time series database. It is a specialized data store for saving large volumes of timestamped event data and this makes it especially suited for storing metrics, lifecycle events and analytics. The <code>influxdb-rails</code> gem, maintained by the InfluxDB team, facilitates integration with Rails and makes it easy to save various metrics from a rails application to InfluxDB and visualize it through frontends like <a href=\"http://grafana.org/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Grafana</a>.</p>\n<p>The rest of this post, explores various aspects of a simple setup in which we build a rudimentary cms based site and monitor it using influxdb and grafana. We don&#39;t assume prior familiarity with InfluxDB, and elaborate on relevant aspects of time series databases on the go, but familiarity with Rails is assumed.</p>\n<p>This post also assumes that InfluxDB is installed as per the official <a href=\"http://influxdb.com/docs/v0.8/introduction/installation.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">installation instructions</a> with default configuration. If installation has been customized eg. ports have been changed, the configurations provided to <code>influxdb-rails</code> will have to be adapted accordingly. On mac influxdb can be installed using <a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Homebrew</a> : <code>brew install influxdb</code>.</p>\n<h2 id=\"Setting-up-a-basic-application\"><a href=\"#Setting-up-a-basic-application\" class=\"headerlink\" title=\"Setting up a basic application\"></a>Setting up a basic application</h2><p>Next, we bootstrap a simple rails application using the <a href=\"https://github.com/comfy/comfortable-mexican-sofa\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Comfortable mexican sofa</a> CMS to quickly setup a site with a few pages we can tinker with. This is not really important, but it simply helps us work with a reasonably more realistic setup than a typically crud ui generated through scaffolds.</p>\n<pre><code class=\"hljs bash\">rails new influxdb-cms-demo --database=mysql</code></pre>\n\n<p>In Gemfile:</p>\n<pre><code class=\"hljs ruby\">gem <span class=\"hljs-string\">&#x27;comfortable_mexican_sofa&#x27;</span>, <span class=\"hljs-string\">&#x27;~&gt; 1.12.0&#x27;</span>\ngem <span class=\"hljs-string\">&#x27;influxdb-rails&#x27;</span></code></pre>\n\n<p>Setting up CMS requires an additional step:</p>\n<pre><code class=\"hljs bash\">rails generate comfy:cms</code></pre>\n\n<p>Setting up InfluxDB adapter also requires an additional step:</p>\n<pre><code class=\"hljs bash\">rails g influxdb</code></pre>\n\n<p>The default configuration options are available in the generated <code>influxdb-rails.rb</code> and they correspond to the default settings of influxdb.</p>\n<pre><code class=\"hljs ruby\">InfluxDB::Rails.configure <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|config|</span>\n  config.influxdb_database = <span class=\"hljs-string\">&quot;rails&quot;</span>\n  config.influxdb_username = <span class=\"hljs-string\">&quot;root&quot;</span>\n  config.influxdb_password = <span class=\"hljs-string\">&quot;root&quot;</span>\n  config.influxdb_hosts    = [<span class=\"hljs-string\">&quot;localhost&quot;</span>]\n  config.influxdb_port     = <span class=\"hljs-number\">8086</span>\n\n  <span class=\"hljs-comment\"># config.series_name_for_controller_runtimes = &quot;rails.controller&quot;</span>\n  <span class=\"hljs-comment\"># config.series_name_for_view_runtimes       = &quot;rails.view&quot;</span>\n  <span class=\"hljs-comment\"># config.series_name_for_db_runtimes         = &quot;rails.db&quot;</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>The last three lines signify the names of time series where the corresponding metrics would be stored, and we will use the same when querying the time series database.</p>\n<p>Before our application can start dispatching metrics to InfluxDB the database &quot;rails&quot; specified in the above configuration file would have to be created. InfluxDB admin provides a means to do that using the GUI. The admin interface may be accessed by visiting: <a href=\"http://localhost:8083/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">localhost:8083</a></p>\n<p><img src=\"/images/influxdb_landing_page.png\" alt=\"InfluxDB landing page\" loading=\"lazy\"></p>\n<p>The default username/password combination is root/root, which is not advisable for production use.</p>\n<p>The only option that is particularly relevant is database name: which we would have to change to &quot;rails&quot;.</p>\n<p><img src=\"/images/influxdb_create_database.png\" alt=\"InfluxDB creating database\" loading=\"lazy\"></p>\n<p>This would be a good point to run <code>db:migrate</code> and visit the CMS dashboard <code>/admin</code></p>\n<p>Once a new site has been bootstrapped, we can rapidly create multiple pages through the CMS admin interface. These steps are not elaborated here because the guided CMS admin makes it pretty trivial. Once a few pages have been setup, we have some metrics to explore in InfluxDB.</p>\n<p><img src=\"/images/new_page_cms.png\" alt=\"Add a new page in CMS\" loading=\"lazy\"></p>\n<h2 id=\"Data-exploration\"><a href=\"#Data-exploration\" class=\"headerlink\" title=\"Data exploration\"></a>Data exploration</h2><p>In the list of databases, we should have an option to <code>Explore Data</code>. Let us go ahead and click that:</p>\n<p><img src=\"/images/influxdb_database_list.png\" alt=\"InfluxDB database list\" loading=\"lazy\"></p>\n<p>We will be presented with a simple interface to read and write points (which are essentially multi-column timestamped datasets).</p>\n<p><img src=\"/images/influxdb_query_interface.png\" alt=\"InfluxDB Query interface\" loading=\"lazy\"></p>\n<p>This page also highlights an interesting aspect of InfluxDB - though it is not a relational database, it does provide an SQL like language to query the database.</p>\n<p>A basic query might look something like this:</p>\n<p><img src=\"/images/influxdb_select_all_query.png\" alt=\"InfluxDB Select All Query\" loading=\"lazy\"></p>\n<p>Besides controllers, we can also run similar queries for our timeseries for views and db:\n<img src=\"/images/influxdb_select_all_from_view.png\" alt=\"InfluxDB Select All from View Query\" loading=\"lazy\">\n<img src=\"/images/influxdb_select_all_from_db.png\" alt=\"InfluxDB Select All from DB Query\" loading=\"lazy\"></p>\n<h2 id=\"Configuring-additional-lifecycle-events\"><a href=\"#Configuring-additional-lifecycle-events\" class=\"headerlink\" title=\"Configuring additional lifecycle events\"></a>Configuring additional lifecycle events</h2><p>In a real applications we would want to aggregate additional metrics of our choosing. A popular solution for dispatching and subscribing to various lifecycle events that ruby community has developed is <code>ActiveSupport::Notifications</code> which Rails internally uses.</p>\n<p>Using <code>ActiveSupport::Notifications</code> we can subscribe to lifecycle events of a rails application and add callbacks to dispatch these metrics to InfluxDB.</p>\n<p>For example if we would like to track the execution times of queries in InfluxDB we can write an initializer:</p>\n<pre><code class=\"hljs ruby\">ActiveSupport::Notifications.subscribe(<span class=\"hljs-string\">&#x27;sql.active_record&#x27;</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|name, start, finish, id, payload|</span>\n  InfluxDB::Rails.client.write_point(name, &#123; <span class=\"hljs-symbol\">value:</span> (finish-start), <span class=\"hljs-symbol\">start:</span> start, <span class=\"hljs-symbol\">finish:</span> finish &#125;)\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>The value attribute is something that InfluxDB admin will use to generate graph by default. We can query this just like the previous queries:</p>\n<p><img src=\"/images/influxdb_lifecycle_event_query.png\" alt=\"InfluxDB Query lifecycle event\" loading=\"lazy\"></p>\n<p>More lifecycle events of Rails application can be found in the <a href=\"http://edgeguides.rubyonrails.org/active_support_instrumentation.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Rails guides</a>.</p>\n<p>In addition, the instrumentation API can be used directly to create a custom lifecycle events. Here is an example taken from the <a href=\"http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">official documentation</a> that outlines how a part of application code can be wrapped into an instrumented block which we could subscribe to in an identical fashion.</p>\n<pre><code class=\"hljs ruby\">ActiveSupport::Notifications.instrument(<span class=\"hljs-string\">&#x27;render&#x27;</span>, <span class=\"hljs-symbol\">extra:</span> <span class=\"hljs-symbol\">:information</span>) <span class=\"hljs-keyword\">do</span>\n  render <span class=\"hljs-symbol\">text:</span> <span class=\"hljs-string\">&#x27;Foo&#x27;</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>While the InfluxDB admin interface provides a convenient dashboard to visualize the metrics, it is not ideal for complex, comparative or realtime visualizations. For such use cases it is better to resort to dedicated solutions like Grafana.</p>\n<h2 id=\"Setting-up-Grafana\"><a href=\"#Setting-up-Grafana\" class=\"headerlink\" title=\"Setting up Grafana\"></a>Setting up Grafana</h2><p>While Grafana releases binary downloads for most major versions of linux, there isn&#39;t one available for Mac. And neither is it available from Homebrew. However installation from the sources is straightforward if you have Go. It is important that the version of Go is correct (1.4 +) otherwise installation fails with totally incomprehensible errors. The version of Go available from Homebrew is outdated - however Google provides <a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">installers</a> which work like a charm. Once Go is setup properly, the <a href=\"https://github.com/grafana/grafana#building-the-backend\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">installation steps</a> for Grafana are straightforward.</p>\n<p>Another hiccup is that when running the web interface, Grafana uses the same default port as Rails (3000). To alleviate that we need to edit configuration file dev.ini in <code>$GOPATH/src/github.com/grafana/grafana/conf</code> and specify an alternate port</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">app_mode</span> = development\n\n<span class=\"hljs-section\">[server]</span>\n<span class=\"hljs-attr\">router_logging</span> = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">http_port</span> = <span class=\"hljs-number\">8000</span>\n\n<span class=\"hljs-section\">[log]</span>\n<span class=\"hljs-attr\">level</span> = Trace</code></pre>\n\n<p>Once this is configured running <code>./grafana web</code> from grafana source directory, should run the webserver on port 8000:</p>\n<p><img src=\"/images/grafana_startup_log.png\" alt=\"Grafana server log\" loading=\"lazy\"></p>\n<p>Now we can browse the Grafana dashboard and provide the default login details admin/admin. Again it is not advisable to use this in production.</p>\n<p><img src=\"/images/grafana_login.png\" alt=\"Grafana Login\" loading=\"lazy\"></p>\n<p>The default dashboard is pretty bare:</p>\n<p><img src=\"/images/grafana_home.png\" alt=\"Grafana Home page\" loading=\"lazy\"></p>\n<p>Adding a new dashboard is straightforward:</p>\n<p><img src=\"/images/grafana_add_dashboard.png\" alt=\"Grafana : Adding a dashboard\" loading=\"lazy\"></p>\n<p>Once we have a dedicated dashboard for our Rails application we can start adding graphs:</p>\n<p><img src=\"/images/grafana_add_graph.png\" alt=\"Grafana : Add Graph\" loading=\"lazy\"></p>\n<p>It would be probably surprising to see a great looking graph instantly generated. After all no influxdb/rails specific configuration has been done yet, so what data is being presented ?</p>\n<p><img src=\"/images/grafana_test_graph.png\" alt=\"Grafana : Default Graph\" loading=\"lazy\"></p>\n<p>Once we try to edit the data source, it would become clear that the graph being presented is infact coming from a dummy data source</p>\n<p><img src=\"/images/grafana_edit_graph.png\" alt=\"Grafana : Edit Graph\" loading=\"lazy\">\n<img src=\"/images/grafana_configure_graph_data_source.png\" alt=\"Grafana : Configure Graph Data Source\" loading=\"lazy\"></p>\n<p>At this point, because InfluxDB data source hasn&#39;t been configured hence no other data source is available :</p>\n<p><img src=\"/images/grafana_singular_data_source.png\" alt=\"Grafana : Missing Data Source\" loading=\"lazy\"></p>\n<p>The sidebar has a section for data sources that can be used for this task:\n<img src=\"/images/grafana_sidebar_close_up.png\" alt=\"Grafana : Sidebar\" loading=\"lazy\">\n<img src=\"/images/grafana_add_data_source.png\" alt=\"Grafana : Add data source\" loading=\"lazy\"></p>\n<p>While adding a data source it is of particular importance the version of InfluxDB is correct in the type field. Rest of the fields in form are self explanatory - It is advisable that in production Auth is configured to protect against intrusion.</p>\n<p><img src=\"/images/grafana_edit_data_source.png\" alt=\"Grafana : Edit data source\" loading=\"lazy\"></p>\n<p>Now in the graph editor multiple data sources should be available:</p>\n<p><img src=\"/images/grafana_multiple_data_source_selector.png\" alt=\"Grafana : Multiple data sources\" loading=\"lazy\"></p>\n<p>We can now specify the InfluxDB query to be made in the <code>Metrics</code> section:\n<img src=\"/images/grafana_metric_specification.png\" alt=\"Grafana : Specify Metric\" loading=\"lazy\"></p>\n<p>Since we don&#39;t have a lot of historical data at this point, for inspection we can adjust the time range to something recent:\n<img src=\"/images/grafana_range_selection.png\" alt=\"Grafana : Range Selection\" loading=\"lazy\"></p>\n<p>The dummy graph should now be replaced with a real visualization of our metric\n<img src=\"/images/grafana_metric_output.png\" alt=\"Grfana : Metric Output\" loading=\"lazy\"></p>\n<p>In similar fashion more graphs can be added and additional dashboards can be set up as per requirements.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This concludes this post, in which we have setup a basic development setup of InfluxDB and explored how a time series datastore can be used to save metrics from our Rails application and how we can query this data store and derive actionable insights. Also we explored creation of dashboards using Grafana to visualize these metrics in near-real time.</p>\n<p>Our proof of concept setup, however is not suitable for production deployments with large volumes of data, in which case we would want to utilize advanced cluster management features of InfluxDB. Fortunately InfluxDB documentation already has a lot of <a href=\"http://influxdb.com/docs/v0.8/clustering/setup.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">helpful information</a> on scaling up production deployment which is only expected to mature over time. There are also <a href=\"https://customers.influxdb.com/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">commercial options</a> available for hosted InfluxDB which I encourage users to <a href=\"https://customers.influxdb.com/users/sign_up\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">try out</a> and evaluate.</p>\n<h2 id=\"Where-to-go-from-here\"><a href=\"#Where-to-go-from-here\" class=\"headerlink\" title=\"Where to go from here\"></a>Where to go from here</h2><ul>\n<li><a href=\"http://influxdb.com/docs/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">InfluxDB documentation</a></li>\n<li><a href=\"http://docs.grafana.org/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Grafana Documentation</a></li>\n</ul>\n",
            "tags": [
                "Ruby",
                "Rails",
                "InfluxDB",
                "Grafana"
            ]
        },
        {
            "id": "https://lorefnon.me/2015/03/02/dealing-with-json-fields-in-active-admin.html",
            "url": "https://lorefnon.me/2015/03/02/dealing-with-json-fields-in-active-admin.html",
            "title": "Dealing with JSON data in Active Admin",
            "date_published": "2015-03-02T00:00:00.000Z",
            "content_html": "<p>Many a times, depending on the requirements, it makes sense to store\nunstructured json data in database fields. PostgreSQL recognizes this\nrequirement and provides a dedicated json field that automatically\nhandles JSON validation. As has been outlined in the\n<a href=\"http://edgeguides.rubyonrails.org/active_record_postgresql.html\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">RoR Guides</a>\n, it is pretty simple to take advantage of this feature from Rails.\nHowever if you also use <a href=\"https://github.com/activeadmin/activeadmin\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">ActiveAdmin</a> to manage your admin interface,\nyou will quickly find out that library <a href=\"https://github.com/justinfrench/formtastic\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Formtastic</a> that ActiveAdmin\nuses to manage its forms, leaves a lot to be desired when it comes to\nJSON editing support.</p>\n<p>In this post we outline a simple approach to improve JSON editing\nsupport in ActiveAdmin using the excellent <a href=\"https://github.com/josdejong/jsoneditor/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">JSON editor widget</a>\nby <a href=\"https://github.com/josdejong\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Jos de Jong</a>. It is worth pointing\nout that our implementation has very little to do with PostgreSQL\nand may be used without modifications if you are storing JSON in say MySQL\ntext fields. Of course you will need to handle server side validation yourself in that case.</p>\n<p>The source code for the post is available on <a href=\"https://github.com/lorefnon/activeadmin-jsoneditor-demo\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Github</a>.</p>\n<p>Let us have a simple product model with following schema:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CreateProducts</span> &lt; ActiveRecord::Migration</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span></span>\n    create_table <span class=\"hljs-symbol\">:products</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|t|</span>\n      t.string <span class=\"hljs-symbol\">:name</span>\n      t.text <span class=\"hljs-symbol\">:description</span>\n      t.json <span class=\"hljs-symbol\">:metadata</span>\n      t.timestamps\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>You may expect providing admin support for this model will just be\na matter of adding a file <code>app/admin/product.rb</code>:</p>\n<pre><code class=\"hljs ruby\">ActiveAdmin.register Product <span class=\"hljs-keyword\">do</span>\n  permit_params <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:description</span>, <span class=\"hljs-symbol\">:metadata</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>However the moment you try to create a new instance, you will be greeted\nwith an error message:</p>\n<p><img src=\"/images/formtastic_unknown_input.png\" alt=\"Formtastic unknown input error\" loading=\"lazy\"></p>\n<p>So basically Formtastic has no input field pre-configured for json\nfield. A rudimentary workaround is fairly simple - We explicitly ask\nit to use a textarea for metadata field</p>\n<pre><code class=\"hljs ruby\">ActiveAdmin.register Product <span class=\"hljs-keyword\">do</span>\n\n  permit_params <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:description</span>, <span class=\"hljs-symbol\">:metadata</span>\n\n  form <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|f|</span>\n    f.inputs <span class=\"hljs-keyword\">do</span>\n      f.input <span class=\"hljs-symbol\">:name</span>\n      f.input <span class=\"hljs-symbol\">:description</span>\n      f.input <span class=\"hljs-symbol\">:metadata</span>, <span class=\"hljs-symbol\">as:</span> <span class=\"hljs-symbol\">:text</span>\n    <span class=\"hljs-keyword\">end</span>\n    f.actions\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>This does the job:</p>\n<p><img src=\"/images/aa1.png\" alt=\"Form with explicitly specified textarea\" loading=\"lazy\"></p>\n<p>But seriously, if you have to edit this json very frequently or manage\nlarge json entries, a simple textarea is not an ideal solution. Plus\nif you accidentally enter some invalid json, You will be provided with a\nfeedback only post submission:</p>\n<p><img src=\"/images/aa2.png\" alt=\"Error in JSON field\" loading=\"lazy\">\n<img src=\"/images/aa3.png\" alt=\"JSON validation error\" loading=\"lazy\"></p>\n<p>The <a href=\"https://github.com/josdejong/jsoneditor/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">JSON editor widget</a>\nby <a href=\"https://github.com/josdejong\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Jos de Jong</a> provides a lot better json editing\ninterface. You can try it out <a href=\"http://jsoneditoronline.org/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">online</a>.</p>\n<p>If you like what you see, you will be pleased to find that the widget\nis pretty easy to integrate right inside ActiveAdmin.</p>\n<p>Let us first configure our form to add a class to the json field\nso that we can handle json input fields in a generic fashion.</p>\n<pre><code class=\"hljs ruby\">ActiveAdmin.register Product <span class=\"hljs-keyword\">do</span>\n\n  permit_params <span class=\"hljs-symbol\">:name</span>, <span class=\"hljs-symbol\">:description</span>, <span class=\"hljs-symbol\">:metadata</span>\n\n  form <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|f|</span>\n    f.inputs <span class=\"hljs-keyword\">do</span>\n      f.input <span class=\"hljs-symbol\">:name</span>\n      f.input <span class=\"hljs-symbol\">:description</span>\n      f.input <span class=\"hljs-symbol\">:metadata</span>, <span class=\"hljs-symbol\">as:</span> <span class=\"hljs-symbol\">:text</span>, <span class=\"hljs-symbol\">input_html:</span> &#123; <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>: &#x27;<span class=\"hljs-title\">jsoneditor</span>-<span class=\"hljs-title\">target</span>&#x27; &#125;</span>\n    <span class=\"hljs-keyword\">end</span>\n    f.actions\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Next we will need to download the <a href=\"http://jsoneditoronline.org/downloads/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">relevant files</a> and add to our vendor\ndirectory. I have already changed the files to use sprockets urls, so you can\ngrab the files form the repo.</p>\n<p>Next we modify the active_admin.js.coffee:</p>\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-comment\">#= require active_admin/base</span>\n<span class=\"hljs-comment\">#= require jsoneditor</span>\n<span class=\"hljs-comment\">#= require jsoneditor_activeadmin_integration</span></code></pre>\n\n<p>Once we have the required files in place, integration is pretty simple -\n<code>app/assets/javascripts/jsoneditor_activeadmin_integration</code>:</p>\n<pre><code class=\"hljs coffeescript\">$ -&gt;\n\n  $(<span class=\"hljs-string\">&#x27;.jsoneditor-target&#x27;</span>).each -&gt;\n\n    target = $ <span class=\"hljs-built_in\">this</span>\n\n    container = $(<span class=\"hljs-string\">&#x27;&lt;div class=&quot;jsoneditor-container&quot;&gt;&#x27;</span>)\n      .insertAfter target\n\n    editor = <span class=\"hljs-keyword\">new</span> JSONEditor container[<span class=\"hljs-number\">0</span>],\n      modes: [<span class=\"hljs-string\">&#x27;code&#x27;</span>, <span class=\"hljs-string\">&#x27;form&#x27;</span>, <span class=\"hljs-string\">&#x27;text&#x27;</span>, <span class=\"hljs-string\">&#x27;tree&#x27;</span>, <span class=\"hljs-string\">&#x27;view&#x27;</span>]\n      change: <span class=\"hljs-function\">-&gt;</span>\n        target.val editor.get()\n\n    editor.set(\n      <span class=\"hljs-keyword\">try</span>\n        <span class=\"hljs-built_in\">JSON</span>.parse target.val()\n    )\n\n    target.hide()</code></pre>\n\n<p>This simply hides the textarea for json field, and adds a json editor\nwidget. When the editor is updated, the hidden textarea is updated\nwith the new value - so our form continues to work just as expected,\nwithout Formtastic having to be aware of the widget at all.</p>\n<p>I had to explicitly override some of the conflicting styles from\nActiveAdmin which were messing up the Editor Widget css:</p>\n<pre><code class=\"hljs scss\"><span class=\"hljs-selector-class\">.jsoneditor-container</span>, <span class=\"hljs-selector-class\">.jsoneditor-contextmenu</span> &#123;\n    <span class=\"hljs-selector-tag\">table</span> &#123;\n        <span class=\"hljs-attribute\">width</span>: auto;\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n    &#125;\n\n    <span class=\"hljs-selector-class\">.jsoneditor</span> &#123;\n        <span class=\"hljs-attribute\">background</span>: white;\n    &#125;\n\n    <span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:hover</span>, <span class=\"hljs-selector-class\">.menu</span> <span class=\"hljs-selector-tag\">button</span>, <span class=\"hljs-selector-class\">.menu</span> <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;\n        <span class=\"hljs-attribute\">background</span>: none;\n        <span class=\"hljs-attribute\">text-shadow</span>: none;\n        <span class=\"hljs-attribute\">box-shadow</span>: none;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">0</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-selector-class\">.jsoneditor-container</span> &#123;\n    <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">20%</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80%</span>;\n&#125;</code></pre>\n\n<p>And we are pretty much done:\n<img src=\"/images/aa4.png\" alt=\"Widget integrated with Active Admin\" loading=\"lazy\"></p>\n<p>I realize that the default styling of the widget sticks out a bit against\n the default styling of ActiveAdmin page, but all that is needed to rectify is a few CSS\nrules which I leave as an exercise for the reader.</p>\n<p>As always, any feedback and suggestions are more than welcome.</p>\n",
            "tags": [
                "Ruby",
                "Rails",
                "ActiveAdmin"
            ]
        },
        {
            "id": "https://lorefnon.me/2015/01/03/leveraging-strategy-pattern-in-rails.html",
            "url": "https://lorefnon.me/2015/01/03/leveraging-strategy-pattern-in-rails.html",
            "title": "Leveraging the strategy pattern in Rails - I",
            "date_published": "2015-01-03T00:00:00.000Z",
            "content_html": "<h1 id=\"To-begin-with-what-is-strategy-pattern\"><a href=\"#To-begin-with-what-is-strategy-pattern\" class=\"headerlink\" title=\"To begin with, what is strategy pattern ?\"></a>To begin with, what is strategy pattern ?</h1><p>Quoting from <a href=\"http://en.wikipedia.org/wiki/Strategy_pattern\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Wikipedia</a>,</p>\n<blockquote>\n<p>the strategy pattern (also known as the policy pattern) is a software design\npattern that enables an algorithm&#39;s behavior to be selected at runtime.</p>\n</blockquote>\n<h1 id=\"So-how-does-this-help-us\"><a href=\"#So-how-does-this-help-us\" class=\"headerlink\" title=\"So how does this help us ?\"></a>So how does this help us ?</h1><p>Strategy pattern just helps us escape the soup of complex nested conditionals\nand model behavior selection in an object oriented fashion. To understand why this is\nrequired let us explore a fictional example:</p>\n<h1 id=\"An-adventure\"><a href=\"#An-adventure\" class=\"headerlink\" title=\"An adventure\"></a>An adventure</h1><p>Suppose that we are developing a social network for book lovers. To encourage users\nto read more we decide to show a recommendations panel which highlights books that\nare trending in the community.</p>\n<p>Our (over-simplified) implementation might be something like:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> &lt; ActiveRecord::Base</span>\n\n  has_many <span class=\"hljs-symbol\">:recommendations</span>\n  has_many <span class=\"hljs-symbol\">:tags</span>\n\n  scope <span class=\"hljs-symbol\">:popular</span>, -&gt; &#123;  where <span class=\"hljs-string\">&#x27;recommendations_count &gt; 100&#x27;</span> &#125;\n\n  <span class=\"hljs-comment\"># Return a random subset of recommended books</span>\n  <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-comment\"># Yes, this approach is sub-optimal for large number of popular books. Better</span>\n  <span class=\"hljs-comment\"># approaches are outlined here:</span>\n  <span class=\"hljs-comment\"># http://stackoverflow.com/questions/4329396/mysql-select-10-random-rows-from-600k-rows-fast</span>\n  <span class=\"hljs-comment\">#</span>\n  def <span class=\"hljs-keyword\">self</span>.recommended\n    popular.order(<span class=\"hljs-string\">&#x27;RAND()&#x27;</span>).limit(<span class=\"hljs-number\">5</span>)\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Recommendation</span></span>\n  belongs_to <span class=\"hljs-symbol\">:user</span>, <span class=\"hljs-symbol\">counter_cache:</span> <span class=\"hljs-literal\">true</span>\n  belongs_to <span class=\"hljs-symbol\">:book</span>, <span class=\"hljs-symbol\">counter_cache:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>In home/index.html.erb</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;recommended-book-list&#x27;</span>&gt;</span></span>\n<span class=\"xml\">  &lt;%</span><span class=\"ruby\"> Book.recommended.each <span class=\"hljs-keyword\">do</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span> &lt;%=</span><span class=\"ruby\"> book.title </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n<span class=\"xml\">  &lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></code></pre>\n\n<p>So far so good, however we realize that for users who have been using our service\nfor a while, it makes more sense to show recommendations based on their intersts. So we do a\nshotgun surgery and modify our code to the following:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> &lt; ActiveRecord::Base</span>\n  ...\n  def <span class=\"hljs-keyword\">self</span>.recommended_for user\n    <span class=\"hljs-keyword\">if</span> user.blank? <span class=\"hljs-params\">||</span> (user.recommendations_count &lt; <span class=\"hljs-number\">5</span>)\n      popular\n    <span class=\"hljs-keyword\">else</span>\n      not_recommended_by(user).where(<span class=\"hljs-symbol\">tags:</span> user.recommended_tags)\n    <span class=\"hljs-keyword\">end</span>.order(<span class=\"hljs-string\">&#x27;RAND()&#x27;</span>).limit(<span class=\"hljs-number\">5</span>)\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n  ...\n  has_many <span class=\"hljs-symbol\">:recommendations</span>\n  has_many <span class=\"hljs-symbol\">:recommended_books</span>,\n    <span class=\"hljs-symbol\">through:</span> <span class=\"hljs-symbol\">:recommendations</span>,\n    <span class=\"hljs-symbol\">source:</span> <span class=\"hljs-symbol\">:book</span>\n  has_many <span class=\"hljs-symbol\">:recommended_tags</span>,\n    <span class=\"hljs-symbol\">through:</span> <span class=\"hljs-symbol\">:recommended_books</span>,\n    <span class=\"hljs-symbol\">source:</span> <span class=\"hljs-symbol\">:tags</span>\n\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> &lt; ActiveRecord::Base</span>\n  ...\n  scope <span class=\"hljs-symbol\">:not_recommended_by</span>, -&gt; (user) <span class=\"hljs-keyword\">do</span>\n    joins(<span class=\"hljs-symbol\">:recommendations</span>)\n      .where(<span class=\"hljs-string\">&#x27;recommendations.user_id != ?&#x27;</span>, user.id)\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>And our template becomes something like:</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;recommended-book-list&#x27;</span>&gt;</span></span>\n<span class=\"xml\">  &lt;%</span><span class=\"ruby\"> Book.recommended_for(current_user).each <span class=\"hljs-keyword\">do</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span> &lt;%=</span><span class=\"ruby\"> book.title </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n<span class=\"xml\">  &lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></code></pre>\n\n<p>We see that at this point our <code>recommended_for</code> method is burdened with multiple\nresponsibilities - the decision for the approach to be used as well as the logic\nfor multiple approaches all reside in the same method, which is not very ideal.</p>\n<p>Let us push this further. Say, after a couple of months our social networks gains\na lot of traction and we strike a very profitable deal with a major publishing\nfirm &#39;Jackass Kangaroo Publications&#39; and as a part of the deal we need to ensure\nthat the recommended books include only those which have been published by this\npublication.</p>\n<p>No problem, we just need add a few lines of code:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> &lt; ActiveRecord::Base</span>\n  ...\n  def <span class=\"hljs-keyword\">self</span>.recommended_for user\n    query = Book\n\n    <span class=\"hljs-comment\"># Comment this out when deal with Jackass Kangaroo Publication is over.</span>\n    query = query.where(<span class=\"hljs-symbol\">publisher:</span> Publisher.where(<span class=\"hljs-symbol\">name:</span> <span class=\"hljs-string\">&#x27;Jackass Kangaroo Publication&#x27;</span>).first)\n\n    <span class=\"hljs-keyword\">if</span> user.blank? <span class=\"hljs-params\">||</span> (user.recommendations_count &lt; <span class=\"hljs-number\">5</span>)\n      query.popular\n    <span class=\"hljs-keyword\">else</span>\n      query.not_recommended_by(user).where(<span class=\"hljs-symbol\">tags:</span> user.recommended_tags)\n    <span class=\"hljs-keyword\">end</span>.order(<span class=\"hljs-string\">&#x27;RAND()&#x27;</span>).limit(<span class=\"hljs-number\">5</span>)\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>No words are needed to describe the ugliness of the code above. Our eyes bleed but we\nchoose to look away and carry on with our buisness.</p>\n<p>Of course, the journey of our social network is not all rosy. We get hit by a\nlawsuit making our deal with <code>Jackass Kangaroo Publications</code> illegal in a specific country.\nBut why bother backing off from this insanity when all problems can be resolved\nby adding just another condition:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> &lt; ActiveRecord::Base</span>\n  ...\n  def <span class=\"hljs-keyword\">self</span>.recommended_for user\n    query = Book\n\n    <span class=\"hljs-comment\"># Comment this out when deal with Jackass Kangaroo Publication is over.</span>\n    <span class=\"hljs-keyword\">unless</span> user.located_in? DISPUTED_DEMOGRAPHY\n      query = query.where(<span class=\"hljs-symbol\">publisher:</span> Publisher.where(<span class=\"hljs-symbol\">name:</span> <span class=\"hljs-string\">&#x27;Jackass Kangaroo Publication&#x27;</span>).first)\n    <span class=\"hljs-keyword\">end</span>\n\n    ...\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<h1 id=\"A-downhill-slope\"><a href=\"#A-downhill-slope\" class=\"headerlink\" title=\"A downhill slope\"></a>A downhill slope</h1><p>So requirements keep stacking up and we keep adding conditions. Fast forward a few years, and\na sincere programmer who is new to the project, unfamiliar with our rocky history and now is responsible\nfor maintenance of the project is staring\nblankly at the entangled mess of conditional statements. Of course the crutial details of the deal\nand the subsequent lawsuits are now lost in sands of time, and none of the present team members\nhave any idea what is going on.</p>\n<h1 id=\"Retrospection\"><a href=\"#Retrospection\" class=\"headerlink\" title=\"Retrospection\"></a>Retrospection</h1><p>The question now is, what could be done to avoid a situation like this ? As you might have guessed\nat this point, burdening the Book class with responsibility to determine various aspects of\napplication that affect our recommendation policy as well as the complete implementation of all these policies\nis cumbersome. What we can do is that we can refactor out the specific strategies into dedicated\nclasses that encapsulate the actual implementation details. This is exactly what the strategy pattern\nencourages us to embrace.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Strategies</span></span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RecommendationGeneration</span> &lt; Struct.<span class=\"hljs-title\">new</span>(<span class=\"hljs-title\">user</span>, <span class=\"hljs-title\">scoped_collection</span>)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">scoped_collection</span></span>\n      <span class=\"hljs-keyword\">super</span> <span class=\"hljs-params\">||</span> Book\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">applicable?</span></span>\n      <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">execute</span></span>\n    <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<br>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Strategies</span></span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefaultRecommendationGeneration</span> &lt; RecommendationGeneration</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">applicable?</span></span>\n          <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">scoped_collection</span></span>\n          <span class=\"hljs-keyword\">super</span> <span class=\"hljs-params\">||</span> popular\n        <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">execute</span></span>\n          scoped_collection.order(<span class=\"hljs-string\">&#x27;RAND()&#x27;</span>).limit(<span class=\"hljs-number\">5</span>)\n    <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<br>\n<pre><code class=\"hljs ruby\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Strategies</span></span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserAdaptedRecommendationGeneration</span> &lt; RecommendationGeneration</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">applicable?</span></span>\n      user.present?\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">scoped_collection</span></span>\n      <span class=\"hljs-keyword\">if</span> user.present?\n        not_recommended_by(user).where(<span class=\"hljs-symbol\">tags:</span> user.recommended_tags)\n      <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">super</span>\n          <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">execute</span></span>\n          Strategies::DefaultRecommendation\n            .new(user, scoped_collection)\n                .execute\n        <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<br>\n<pre><code class=\"hljs ruby\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Strategies</span></span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PartnershipAdaptedRecommendationGeneration</span> &lt; RecommendationGeneration</span>\n\n    <span class=\"hljs-comment\"># It is better to model buisness constraints in the persistance layer</span>\n        <span class=\"hljs-comment\"># rather than relying on implicit assumptions.</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">applicable?</span></span>\n          ! partner_publisher.blank?\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">partner_publisher</span></span>\n          Partnership\n            .legal_in(user.demography)\n        .having_recommendation_priviledge\n                .active\n                .first\n                .publisher\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">scoped_collection</span></span>\n          Book.where(<span class=\"hljs-symbol\">publisher:</span> partner_publisher)\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">execute</span></span>\n          Strategies::UserAdaptedRecommendationGeneration\n                .new(user, scoped_collection)\n                .execute\n        <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Now our <code>recommended_for</code> method just has to decide which is the applicable strategy and execute\nit:</p>\n<pre><code class=\"hljs ruby\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> &lt; ActiveRecord::Base</span>\n  ...\n\n  RECOMMENDATION_STRATEGIES = [\n    PartnershipAdaptedRecommendationGeneration\n        UserAdaptedRecommendationGeneration\n        DefaultRecommendationGeneration\n  ]\n\n  def <span class=\"hljs-keyword\">self</span>.recommended_for user\n    RECOMMENDATION_STRATEGIES.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|strategy_class|</span>\n          strategy = strategy_class.new(user)\n          <span class=\"hljs-keyword\">if</span> strategy.applicable?\n            strategy.execute\n                <span class=\"hljs-keyword\">break</span>\n          <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n\n<p>This is signficantly better than our prior approach and aligns well with the tenets of\n<a href=\"http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">SOLID</a> principles. Apart from\nexplaining the use of strategy pattern it also illustrates how strategies can reuse existing\nstrategies by means of composition thus keeping our code DRY.</p>\n<p>So we see that, the strategy pattern is especially helpful when it comes to applications where\nrequirements are rapidly changing all the time. Since the core logic is encapsulated\ninto interchangeable concrete implementations, strategy implementations can be\nintroduced or switched with relative ease at a later phase.</p>\n<p>While this post focussed on use of strategy pattern to simply complex logic in model layer, in\nsubsequent posts we will cover how this pattern can simplify our implementations in controller\nand view layers as well.</p>\n<p>This concludes the post. Please feel free to let me know about your suggestions for improvements, or\nmistakes that I might have made in the post above.</p>\n",
            "tags": [
                "Ruby",
                "Rails",
                "Design Patterns"
            ]
        },
        {
            "id": "https://lorefnon.me/2014/09/07/devise-multiple-emails.html",
            "url": "https://lorefnon.me/2014/09/07/devise-multiple-emails.html",
            "title": "Effectively debugging KnockoutJS applications.",
            "date_published": "2014-09-07T00:00:00.000Z",
            "content_html": "\n\n          \n\n<p><a href=\"https://github.com/plataformatec/devise\">Devise</a> is an incredibly popular authorization gem for Rails. Unfortunately allowing a user to log in through multiple emails is not as straightforward as one might expect. This post outlines a way to do just that.</p>\n\n<p>The code for this blog is available <a href=\"https://github.com/lorefnon/devise_multi_email_demo.git\">here</a>. We start off with a rudimentary devise installation (you may want to checkout <a href=\"https://github.com/lorefnon/devise_multi_email_demo/tree/3d5be26be7986aaf73c18497cffd67a9365e38cb\">Commit:3d5be26</a> as a starting point - if you are not familiar with devise I suggest you take a look at the official documentation. As you may have noticed I am writing this post against Rails 4.2 Beta which Devise master does not support as of this writing. Luckily <a href=\"https://github.com/lucasmazza\">lucasmazza</a> has already submitted a pull request for 4.2 compatibility and we just need to use the branch <code>lm-rails-4-2</code>.</p>\n\n<a class=\"header-link\" href=\"#creating-email-model\"><h2 id=\"creating-email-model\">Creating Email model</h2></a>\n\n<p>First step is creating an email model.</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">rails g model email email:string user_id:integer\n</code></pre></div>\n<p>Next we setup the relationships between user and email:</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">Email</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">belongs_to</span> <span class=\"ss\">:user</span>\n  <span class=\"n\">validates</span> <span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"ss\">email</span><span class=\"p\">:</span> <span class=\"kp\">true</span><span class=\"p\">,</span> <span class=\"ss\">presence</span><span class=\"p\">:</span> <span class=\"kp\">true</span><span class=\"p\">,</span> <span class=\"ss\">uniqueness</span><span class=\"p\">:</span> <span class=\"kp\">true</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>The email format validation comes from <a href=\"https://github.com/balexand/email_validator\">email_validator</a> gem.</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"c1\"># Include default devise modules. Others available are:</span>\n  <span class=\"c1\"># :confirmable, :lockable, :timeoutable and :omniauthable</span>\n  <span class=\"n\">devise</span> <span class=\"ss\">:database_authenticatable</span><span class=\"p\">,</span> <span class=\"ss\">:registerable</span><span class=\"p\">,</span>\n         <span class=\"ss\">:recoverable</span><span class=\"p\">,</span> <span class=\"ss\">:rememberable</span><span class=\"p\">,</span> <span class=\"ss\">:trackable</span><span class=\"p\">,</span> <span class=\"ss\">:validatable</span>\n\n  <span class=\"n\">has_many</span> <span class=\"ss\">:emails</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>Once we have done that, we can do away with the email field provided by devise. Instead of that, let us have a default email reference which may be used as a primary means of communication eg. for sending\nnewsletters, fetching gravatars etc. So here we go:</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">rails g migration add_default_email_to_users default_email_id:integer\n</code></pre></div>\n<p>In <code>db/migrate/20140907091858_add_default_email_to_users.rb</code></p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">AddDefaultEmailToUsers</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Migration</span>\n  <span class=\"k\">def</span> <span class=\"nf\">change</span>\n    <span class=\"n\">remove_column</span> <span class=\"ss\">:users</span><span class=\"p\">,</span> <span class=\"ss\">:email</span>\n    <span class=\"n\">add_column</span> <span class=\"ss\">:users</span><span class=\"p\">,</span> <span class=\"ss\">:default_email_id</span><span class=\"p\">,</span> <span class=\"ss\">:integer</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>In user model:</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"n\">belongs_to</span> <span class=\"ss\">:default_email</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Email\"</span>\n</code></pre></div>\n\n<a class=\"header-link\" href=\"#setting-up-the-registration-flow-\"><h2 id=\"setting-up-the-registration-flow-\">Setting up the registration flow:</h2></a>\n\n<p>At this point if we try visiting a devise sign up page, we will\nget an obvious error because devise views expect an email field in\nmodel.</p>\n\n<p><image src=\"/images/devise_email_not_found.png\"></image></p>\n\n<p>We resort to a simple hack rather than put in a lot of effort in rewiring Devise. We add email accessors which (as far as devise is concerned) behave just like the email field devise had generated, but internally act as proxy to default email. Duck typing FTW.</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n\n  <span class=\"n\">devise</span> <span class=\"ss\">:database_authenticatable</span><span class=\"p\">,</span> <span class=\"ss\">:registerable</span><span class=\"p\">,</span>\n         <span class=\"ss\">:recoverable</span><span class=\"p\">,</span> <span class=\"ss\">:rememberable</span><span class=\"p\">,</span> <span class=\"ss\">:trackable</span>\n\n  <span class=\"n\">has_many</span> <span class=\"ss\">:emails</span><span class=\"p\">,</span> <span class=\"ss\">dependent</span><span class=\"p\">:</span> <span class=\"ss\">:destroy</span>\n  <span class=\"n\">after_commit</span> <span class=\"ss\">:save_default_email</span><span class=\"p\">,</span> <span class=\"ss\">on</span><span class=\"p\">:</span> <span class=\"ss\">:create</span>\n\n  <span class=\"n\">belongs_to</span> <span class=\"ss\">:default_email</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Email\"</span>\n  <span class=\"n\">validates</span> <span class=\"ss\">:default_email</span><span class=\"p\">,</span> <span class=\"ss\">presence</span><span class=\"p\">:</span> <span class=\"kp\">true</span>\n  <span class=\"n\">default_scope</span> <span class=\"p\">&#123;</span> <span class=\"n\">includes</span> <span class=\"ss\">:default_email</span> <span class=\"p\">&#125;</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">email</span>\n    <span class=\"n\">default_email</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"k\">rescue</span> <span class=\"kp\">nil</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">email</span><span class=\"o\">=</span> <span class=\"n\">email</span>\n    <span class=\"nb\">self</span><span class=\"o\">.</span><span class=\"n\">default_email</span> <span class=\"o\">=</span> <span class=\"n\">emails</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"ss\">email</span><span class=\"p\">:</span> <span class=\"n\">email</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_initialize</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"kp\">private</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">save_default_email</span>\n    <span class=\"k\">if</span> <span class=\"n\">default_email</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">blank?</span>\n      <span class=\"n\">default_email</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nb\">self</span>\n    <span class=\"k\">elsif</span> <span class=\"n\">default_email</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">!=</span> <span class=\"nb\">self</span>\n      <span class=\"k\">raise</span> <span class=\"no\">Exceptions</span><span class=\"o\">::</span><span class=\"no\">EmailConflict</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">default_email</span><span class=\"o\">.</span><span class=\"n\">save!</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>Note that we have removed <code>:validatable</code> which is added by default\nby devise. Also the after commit hook is required because when we are saving the user\nfor the first time, user id is nil when email is instantiated and hence will have to assign it once we have saved the user. An email conflict will be raised if the email\nis already associated with another account. Handling that error gracefully is left as an exercise for the reader.</p>\n\n<a class=\"header-link\" href=\"#setting-up-the-login-flow-\"><h2 id=\"setting-up-the-login-flow-\">Setting up the login flow:</h2></a>\n\n<p>While registration should work smoothly at this point, if we try to login we will run into trouble:</p>\n\n<p><img src=\"/images/devise_login_flow_fail.png\"></p>\n\n<p>The problem is obvious. Devise tries to search using email field which does not exist. So we need to\nconfigure devise to find using the emails table we have created.</p>\n\n<p>This can be done by overriding the class method <code>find_first_by_auth_conditions</code> :</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">having_email</span> <span class=\"n\">email</span>\n    <span class=\"no\">User</span>\n      <span class=\"o\">.</span><span class=\"n\">includes</span><span class=\"p\">(</span><span class=\"ss\">:emails</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">joins</span><span class=\"p\">(</span><span class=\"ss\">emails</span><span class=\"p\">:</span> <span class=\"p\">&#123;</span>\n        <span class=\"ss\">email</span><span class=\"p\">:</span>  <span class=\"n\">email</span>\n      <span class=\"p\">&#125;)</span>\n      <span class=\"o\">.</span><span class=\"n\">first</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">find_first_by_auth_conditions</span> <span class=\"n\">warden_conditions</span>\n    <span class=\"n\">conditions</span> <span class=\"o\">=</span> <span class=\"n\">warden_conditions</span><span class=\"o\">.</span><span class=\"n\">dup</span>\n    <span class=\"k\">if</span> <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">conditions</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"ss\">:email</span><span class=\"p\">)</span>\n      <span class=\"n\">having_email</span> <span class=\"n\">email</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"n\">warden_conditions</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"kp\">private</span>\n\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>Once we have done that, login flow should as intended.</p>\n\n<a class=\"header-link\" href=\"#interface-for-managing-emails\"><h2 id=\"interface-for-managing-emails\">Interface for managing emails</h2></a>\n\n<p>At this point a user can login and signup but he can not manage the emails which are associated with his/her account. Let us take care of that.</p>\n\n<p>The default edit account view of devise looks something like this:</p>\n\n<p><img src=\"/images/devise_default_edit.png\"></p>\n\n<p>Note that this form works perfectly well - thanks to our email accessor hack. But users don't have the ability to add new emails or delete existing emails.</p>\n\n<p>We will to augment this form to accept nested attributes for emails. For nested forms probably the most popular solution is <a href=\"https://github.com/ryanb/nested_form\">nested_form</a> but it has been unmaintained for a while. So I resorted to <a href=\"https://github.com/nathanvda/cocoon\">cocoon</a> which is more actively maintained. Both of them work in a similar fashion - through unobstructive javascript.</p>\n\n<p>First we have to configure our model to accept nested attributes for emails - this part is easy:</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n  <span class=\"n\">accepts_nested_attributes_for</span> <span class=\"ss\">:emails</span><span class=\"p\">,</span> <span class=\"n\">reject_if</span><span class=\"p\">:</span> <span class=\"ss\">:all_blank</span><span class=\"p\">,</span> <span class=\"n\">allow_destroy</span><span class=\"p\">:</span> <span class=\"kp\">true</span>\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>Nest we need to generate devise views using <code>rails g devise:views</code> and edit the <code>app/views/devise/registrations/edit.html.erb</code>.</p>\n\n<p>We edit the template to add nested form for emails:</p>\n\n<div class=\"highlight\"><pre><code class=\"erb\"><span class=\"x\">&lt;h2&gt;Edit </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">resource_name</span><span class=\"o\">.</span><span class=\"n\">to_s</span><span class=\"o\">.</span><span class=\"n\">humanize</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;/h2&gt;</span>\n\n<span class=\"cp\">&lt;%=</span> <span class=\"n\">form_for</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"ss\">as</span><span class=\"p\">:</span> <span class=\"n\">resource_name</span><span class=\"p\">,</span> <span class=\"ss\">url</span><span class=\"p\">:</span> <span class=\"n\">registration_path</span><span class=\"p\">(</span><span class=\"n\">resource_name</span><span class=\"p\">),</span> <span class=\"ss\">html</span><span class=\"p\">:</span> <span class=\"p\">&#123;</span> <span class=\"nb\">method</span><span class=\"p\">:</span> <span class=\"ss\">:put</span> <span class=\"p\">&#125;)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">  </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">devise_error_messages!</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n\n<span class=\"x\">  &lt;div&gt;</span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"s2\">\"Default Email\"</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;br /&gt;</span>\n<span class=\"x\">  </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">email_field</span> <span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"ss\">autofocus</span><span class=\"p\">:</span> <span class=\"kp\">true</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;/div&gt;</span>\n\n<span class=\"x\">  &lt;div&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">fields_for</span> <span class=\"ss\">:emails</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">email_f</span><span class=\"o\">|</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">      </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"s1\">'email_fields'</span><span class=\"p\">,</span> <span class=\"ss\">f</span><span class=\"p\">:</span> <span class=\"n\">email_f</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">    </span><span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;div class=\"links\"&gt;</span>\n<span class=\"x\">      </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">link_to_add_association</span> <span class=\"s1\">'Add Email'</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"ss\">:emails</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;/div&gt;</span>\n<span class=\"x\">  &lt;/div&gt;</span>\n\n<span class=\"x\">  </span><span class=\"cp\">&lt;%</span> <span class=\"k\">if</span> <span class=\"n\">devise_mapping</span><span class=\"o\">.</span><span class=\"n\">confirmable?</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">pending_reconfirmation?</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;div&gt;Currently waiting confirmation for: </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">unconfirmed_email</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;/div&gt;</span>\n<span class=\"x\">  </span><span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n\n<span class=\"x\">  &lt;div&gt;</span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"ss\">:password</span> <span class=\"cp\">%&gt;</span><span class=\"x\"> &lt;i&gt;(leave blank if you don't want to change it)&lt;/i&gt;&lt;br /&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">password_field</span> <span class=\"ss\">:password</span><span class=\"p\">,</span> <span class=\"ss\">autocomplete</span><span class=\"p\">:</span> <span class=\"s2\">\"off\"</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;/div&gt;</span>\n\n<span class=\"x\">  &lt;div&gt;</span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"ss\">:password_confirmation</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;br /&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">password_field</span> <span class=\"ss\">:password_confirmation</span><span class=\"p\">,</span> <span class=\"ss\">autocomplete</span><span class=\"p\">:</span> <span class=\"s2\">\"off\"</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;/div&gt;</span>\n\n<span class=\"x\">  &lt;div&gt;</span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"ss\">:current_password</span> <span class=\"cp\">%&gt;</span><span class=\"x\"> &lt;i&gt;(we need your current password to confirm your changes)&lt;/i&gt;&lt;br /&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">password_field</span> <span class=\"ss\">:current_password</span><span class=\"p\">,</span> <span class=\"ss\">autocomplete</span><span class=\"p\">:</span> <span class=\"s2\">\"off\"</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;/div&gt;</span>\n\n<span class=\"x\">  &lt;div&gt;</span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">submit</span> <span class=\"s2\">\"Update\"</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;/div&gt;</span>\n<span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n\n<span class=\"x\">&lt;h3&gt;Cancel my account&lt;/h3&gt;</span>\n\n<span class=\"x\">&lt;p&gt;Unhappy? </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">button_to</span> <span class=\"s2\">\"Cancel my account\"</span><span class=\"p\">,</span> <span class=\"n\">registration_path</span><span class=\"p\">(</span><span class=\"n\">resource_name</span><span class=\"p\">),</span> <span class=\"ss\">data</span><span class=\"p\">:</span> <span class=\"p\">&#123;</span> <span class=\"ss\">confirm</span><span class=\"p\">:</span> <span class=\"s2\">\"Are you sure?\"</span> <span class=\"p\">&#125;,</span> <span class=\"nb\">method</span><span class=\"p\">:</span> <span class=\"ss\">:delete</span> <span class=\"cp\">%&gt;</span><span class=\"x\">&lt;/p&gt;</span>\n\n<span class=\"cp\">&lt;%=</span> <span class=\"n\">link_to</span> <span class=\"s2\">\"Back\"</span><span class=\"p\">,</span> <span class=\"ss\">:back</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n</code></pre></div>\n\n<p>Cocoon mandates a separate partial for email fields, which in our case is very simple:</p>\n\n<div class=\"highlight\"><pre><code class=\"erb\"><span class=\"x\">&lt;div class=\"nested-fields\"&gt;</span>\n<span class=\"x\">  &lt;div&gt;</span>\n<span class=\"x\">      </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"ss\">:email</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">      </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">email_field</span> <span class=\"ss\">:email</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">      </span><span class=\"cp\">&lt;%=</span> <span class=\"n\">link_to_remove_association</span> <span class=\"s2\">\"remove email\"</span><span class=\"p\">,</span> <span class=\"n\">f</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">  &lt;/div&gt;</span>\n<span class=\"x\">&lt;/div&gt;</span>\n</code></pre></div>\n\n<p>At this point if we try saving the form, we will notice that email fields are not getting saved. The reason is that the strong parameters specified by devise does not include our email fields. Fortunately devise provides a way to configure that :</p>\n\n<p>In <code>ApplicationController</code> :</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">ApplicationController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActionController</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"c1\"># Prevent CSRF attacks by raising an exception.</span>\n  <span class=\"c1\"># For APIs, you may want to use :null_session instead.</span>\n\n  <span class=\"n\">protect_from_forgery</span> <span class=\"ss\">with</span><span class=\"p\">:</span> <span class=\"ss\">:exception</span>\n  <span class=\"n\">before_action</span> <span class=\"ss\">:configure_permitted_parameters</span><span class=\"p\">,</span> <span class=\"k\">if</span><span class=\"p\">:</span> <span class=\"ss\">:devise_controller?</span>\n\n  <span class=\"kp\">protected</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">configure_permitted_parameters</span>\n    <span class=\"n\">devise_parameter_sanitizer</span><span class=\"o\">.</span><span class=\"n\">for</span><span class=\"p\">(</span><span class=\"ss\">:account_update</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">u</span><span class=\"o\">|</span>\n      <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">permit</span> <span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"ss\">:password</span><span class=\"p\">,</span> <span class=\"ss\">:password_confirmation</span><span class=\"p\">,</span> <span class=\"ss\">:current_password</span><span class=\"p\">,</span> <span class=\"n\">emails_attributes</span><span class=\"p\">:</span> <span class=\"o\">[</span><span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"ss\">:id</span><span class=\"p\">,</span> <span class=\"ss\">:_destroy</span><span class=\"o\">]</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>Note that <code>:_destroy</code> symbol in the attribute list. It is required because to destroy nested models, rails uses a virtual attribute called _destroy. When _destroy is set, the nested model will be deleted.</p>\n\n<p>If we try adding, removing and editing emails now, everything should work smoothly.\n<img src=\"/images/devise_nested_form_edit.png\"></p>\n\n<p>In a production setting we will most certainly need to send out confirmation mails before activating the emails. We skip the additional steps for the sake of brevity.</p>\n\n<a class=\"header-link\" href=\"#omniauth-integration-\"><h2 id=\"omniauth-integration-\">Omniauth integration:</h2></a>\n\n<p>One of the things we all love about devise is that it integrates beautifully with\n<a href=\"https://github.com/intridea/omniauth\">omniauth</a> making integration with a plethora of social services painless. However due to the fundamental changes we have made, omniauth integration requires jumping through a few extra hoops.</p>\n\n<p>We use Facebook login as an example below:</p>\n\n<p>Firstly, of course we need to create an application on <a href=\"https://developers.facebook.com\">https://developers.facebook.com</a>. Once we have created an application, and have obtained the API key and secret, we configure devise omniauth parameters:</p>\n\n<p>In Gemfile</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"n\">gem</span> <span class=\"s1\">'omniauth'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'omniauth-facebook'</span>\n</code></pre></div>\n\n<p>In config/initializers/devise.rb</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"no\">Devise</span><span class=\"o\">.</span><span class=\"n\">setup</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">config</span><span class=\"o\">|</span>\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n  <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">omniauth</span> <span class=\"ss\">:twitter</span><span class=\"p\">,</span> <span class=\"no\">Rails</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">fb_app_id</span><span class=\"p\">,</span> <span class=\"no\">Rails</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">fb_app_secret</span>\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>In config/secrets.yml</p>\n\n<div class=\"highlight\"><pre><code class=\"yaml\"><span class=\"l-Scalar-Plain\">development</span><span class=\"p-Indicator\">:</span>\n  <span class=\"l-Scalar-Plain\">fb_app_id</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">&lt;add api key here&gt;</span>\n  <span class=\"l-Scalar-Plain\">fb_app_secret</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">&lt;add api secret here&gt;</span>\n</code></pre></div>\n\n<p>In app/models/user.rb</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n  <span class=\"n\">devise</span> <span class=\"ss\">:omniauthable</span><span class=\"p\">,</span> <span class=\"n\">omniauth_providers</span><span class=\"p\">:</span> <span class=\"o\">[</span><span class=\"ss\">:facebook</span><span class=\"o\">]</span>\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>In config/routes.rb</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\">  <span class=\"n\">devise_for</span> <span class=\"ss\">:users</span><span class=\"p\">,</span> <span class=\"ss\">controllers</span><span class=\"p\">:</span> <span class=\"p\">&#123;</span> <span class=\"n\">omniauth_callbacks</span><span class=\"p\">:</span> <span class=\"s2\">\"users/omniauth_callbacks\"</span> <span class=\"p\">&#125;</span>\n</code></pre></div>\n\n<p>where <code>users/omniauth_callbacks</code> is a controller we define to which facebook will redirect to after authenticating our application.</p>\n\n<p>If you have used omniauth with devise before, there is nothing out of the ordinary so far.</p>\n\n<p>Just like we wish to allow the user to sign up through multiple emails, we also wish to allow a user to sign up through multiple social networks. (s)he may be registered in different social networks with different emails. A simple and elegant way to represent a user's presence in multiple third party sites is through a separate <code>UserIdentity</code> model.</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">rails g model UserIdentity user_id:integer email_id:integer uid:string provider:string\n</code></pre></div>\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">UserIdentity</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">belongs_to</span> <span class=\"ss\">:user</span>\n  <span class=\"n\">belongs_to</span> <span class=\"ss\">:email</span>\n  <span class=\"n\">validates</span> <span class=\"ss\">:user</span><span class=\"p\">,</span> <span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"ss\">:uid</span><span class=\"p\">,</span> <span class=\"ss\">:provider</span><span class=\"p\">,</span> <span class=\"ss\">presence</span><span class=\"p\">:</span> <span class=\"kp\">true</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>Our callback controller is intentially very simple. Depending on your use case you may want to check if the user is newly created and direct him/her to a profile completion page. For the sake of simplicity, we just redirect any user to the profile page.</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">Users</span><span class=\"o\">::</span><span class=\"no\">OmniauthCallbacksController</span> <span class=\"o\">&lt;</span> <span class=\"no\">Devise</span><span class=\"o\">::</span><span class=\"no\">OmniauthCallbacksController</span>\n  <span class=\"k\">def</span> <span class=\"nf\">facebook</span>\n    <span class=\"vi\">@user</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"o\">.</span><span class=\"n\">from_omniauth</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">[</span><span class=\"s2\">\"omniauth.auth\"</span><span class=\"o\">]</span><span class=\"p\">)</span>\n    <span class=\"n\">sign_in_and_redirect</span> <span class=\"vi\">@user</span><span class=\"p\">,</span> <span class=\"ss\">:event</span> <span class=\"o\">=&gt;</span> <span class=\"ss\">:authentication</span> <span class=\"c1\">#this will throw if @user is not activated</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>In the <code>from_omniauth</code> class method of user we need to identify user based on the auth parameters passed.\nLuckily facebook provides us with the email, so we can use that to identify a user.</p>\n\n<p>Four scenarios are possible:</p>\n\n<ul>\n<li><p><strong>User is signing up for the first time through facebook.</strong>\nIn this case we just use the email obtained from facebook as the default email and register the user</p></li>\n<li><p><strong>User already has an account and has chosen to login through facebook for the first time</strong>\nWe can identify this situation if user's existing email is the same as the one he has used in Facebook. In this case we create a new UserIdentity for an existing user.</p></li>\n<li><p><strong>User had logged in using facebook before, using the same email</strong>\nNothing needs to be created. We just log the user in.</p></li>\n<li><p><strong>User had logged in using facebook before, using a different email</strong>\nWe keep the existing email, but associate the user identity with the new email.</p></li>\n</ul>\n\n<p>Here is our implementation</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n\n  <span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">from_omniauth</span> <span class=\"n\">auth</span>\n\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"no\">Email</span>\n      <span class=\"o\">.</span><span class=\"n\">includes</span><span class=\"p\">(</span><span class=\"ss\">:user</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"ss\">email</span><span class=\"p\">:</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">first_or_initialize</span>\n\n    <span class=\"n\">ui</span> <span class=\"o\">=</span> <span class=\"no\">UserIdentity</span>\n      <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"ss\">provider</span><span class=\"p\">:</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"p\">,</span> <span class=\"ss\">uid</span><span class=\"p\">:</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">first_or_initialize</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">persisted?</span>\n      <span class=\"c1\"># Existing user, Existing social identity</span>\n      <span class=\"k\">if</span> <span class=\"o\">!</span> <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">persisted?</span>\n        <span class=\"c1\"># Email changed on third party site</span>\n        <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">user</span>\n        <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">save!</span>\n        <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">email</span>\n      <span class=\"k\">elsif</span> <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">==</span> <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">user</span>\n        <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">user</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">raise</span> <span class=\"no\">Exceptions</span><span class=\"o\">::</span><span class=\"no\">EmailConflict</span><span class=\"o\">.</span><span class=\"n\">new</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">elsif</span> <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">persisted?</span>\n      <span class=\"c1\"># Existing User, new identity</span>\n      <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">user</span>\n      <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">save!</span>\n      <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">user</span>\n    <span class=\"k\">else</span>\n      <span class=\"c1\"># New user new identity</span>\n      <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">save!</span>\n      <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span>\n        <span class=\"ss\">password</span><span class=\"p\">:</span> <span class=\"no\">Devise</span><span class=\"o\">.</span><span class=\"n\">friendly_token</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"o\">]</span><span class=\"p\">,</span>\n        <span class=\"n\">default_email</span><span class=\"p\">:</span> <span class=\"n\">email</span>\n      <span class=\"p\">)</span>\n      <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save!</span>\n      <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">user</span>\n      <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">email</span>\n      <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">save!</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">user</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n\n<p>The code above raises an <code>EmailConflict</code> exception if we end up in a scenario where an existing user is logging in and the email is associated with another account. Gracefully handling the error is left as an exercise for the reader. Also we assume that the social login provider will provide us with an email.\nWhile this is true for many providers like Github, not all providers provide with emails. A prominent example is twitter. Since this is not intended to be a comprehensive tutorial on omniauth, for the sake of brevity we don't\nelaborate on those scenarios. A good way to handle such a case would be to direct a user to a profile completion after login where he/she can enter the email and warn them if an account already exists for that email.</p>\n\n<p>So we conclude the post with a functional setup that allows a user to have multiple emails associated with a devise account. Feel free to bug me if you face any issues. Any comments and suggestions are also welcome.</p>\n\n\n",
            "tags": [
                "Ruby",
                "Rails"
            ]
        },
        {
            "id": "https://lorefnon.me/2014/09/07/devise-multiple-emails.html",
            "url": "https://lorefnon.me/2014/09/07/devise-multiple-emails.html",
            "title": "Allowing multiple emails for a user in Devise",
            "date_published": "2014-09-07T00:00:00.000Z",
            "content_html": "<p><a href=\"https://github.com/plataformatec/devise\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Devise</a> is an incredibly popular authorization gem for Rails. Unfortunately allowing a user to log in through multiple emails is not as straightforward as one might expect. This post outlines a way to do just that.</p>\n<p>The code for this blog is available <a href=\"https://github.com/lorefnon/devise_multi_email_demo.git\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">here</a>. We start off with a rudimentary devise installation (you may want to checkout <a href=\"https://github.com/lorefnon/devise_multi_email_demo/tree/3d5be26be7986aaf73c18497cffd67a9365e38cb\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Commit:3d5be26</a> as a starting point - if you are not familiar with devise I suggest you take a look at the official documentation. As you may have noticed I am writing this post against Rails 4.2 Beta which Devise master does not support as of this writing. Luckily <a href=\"https://github.com/lucasmazza\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">lucasmazza</a> has already submitted a pull request for 4.2 compatibility and we just need to use the branch <code>lm-rails-4-2</code>.</p>\n<h2 id=\"Creating-Email-model\"><a href=\"#Creating-Email-model\" class=\"headerlink\" title=\"Creating Email model\"></a>Creating Email model</h2><p>First step is creating an email model.</p>\n<pre><code>rails g model email email:string user_id:integer\n</code></pre>\n<p>Next we setup the relationships between user and email:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Email</span> &lt; ActiveRecord::Base</span>\n  belongs_to <span class=\"hljs-symbol\">:user</span>\n  validates <span class=\"hljs-symbol\">:email</span>, <span class=\"hljs-symbol\">email:</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-symbol\">uniqueness:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>The email format validation comes from <a href=\"https://github.com/balexand/email_validator\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">email_validator</a> gem.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-comment\"># Include default devise modules. Others available are:</span>\n  <span class=\"hljs-comment\"># :confirmable, :lockable, :timeoutable and :omniauthable</span>\n  devise <span class=\"hljs-symbol\">:database_authenticatable</span>, <span class=\"hljs-symbol\">:registerable</span>,\n         <span class=\"hljs-symbol\">:recoverable</span>, <span class=\"hljs-symbol\">:rememberable</span>, <span class=\"hljs-symbol\">:trackable</span>, <span class=\"hljs-symbol\">:validatable</span>\n\n  has_many <span class=\"hljs-symbol\">:emails</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Once we have done that, we can do away with the email field provided by devise. Instead of that, let us have a default email reference which may be used as a primary means of communication eg. for sending\nnewsletters, fetching gravatars etc. So here we go:</p>\n<pre><code>rails g migration add_default_email_to_users default_email_id:integer\n</code></pre>\n<p>In <code>db/migrate/20140907091858_add_default_email_to_users.rb</code></p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AddDefaultEmailToUsers</span> &lt; ActiveRecord::Migration</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">change</span></span>\n    remove_column <span class=\"hljs-symbol\">:users</span>, <span class=\"hljs-symbol\">:email</span>\n    add_column <span class=\"hljs-symbol\">:users</span>, <span class=\"hljs-symbol\">:default_email_id</span>, <span class=\"hljs-symbol\">:integer</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>In user model:</p>\n<pre><code class=\"hljs ruby\">belongs_to <span class=\"hljs-symbol\">:default_email</span>, <span class=\"hljs-symbol\">class_name:</span> <span class=\"hljs-string\">&quot;Email&quot;</span></code></pre>\n\n<h2 id=\"Setting-up-the-registration-flow\"><a href=\"#Setting-up-the-registration-flow\" class=\"headerlink\" title=\"Setting up the registration flow:\"></a>Setting up the registration flow:</h2><p>At this point if we try visiting a devise sign up page, we will\nget an obvious error because devise views expect an email field in\nmodel.</p>\n<image src=\"/images/devise_email_not_found.png\" />\n\n<p>We resort to a simple hack rather than put in a lot of effort in rewiring Devise. We add email accessors which (as far as devise is concerned) behave just like the email field devise had generated, but internally act as proxy to default email. Duck typing FTW.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n\n  devise <span class=\"hljs-symbol\">:database_authenticatable</span>, <span class=\"hljs-symbol\">:registerable</span>,\n         <span class=\"hljs-symbol\">:recoverable</span>, <span class=\"hljs-symbol\">:rememberable</span>, <span class=\"hljs-symbol\">:trackable</span>\n\n  has_many <span class=\"hljs-symbol\">:emails</span>, <span class=\"hljs-symbol\">dependent:</span> <span class=\"hljs-symbol\">:destroy</span>\n  after_commit <span class=\"hljs-symbol\">:save_default_email</span>, <span class=\"hljs-symbol\">on:</span> <span class=\"hljs-symbol\">:create</span>\n\n  belongs_to <span class=\"hljs-symbol\">:default_email</span>, <span class=\"hljs-symbol\">class_name:</span> <span class=\"hljs-string\">&quot;Email&quot;</span>\n  validates <span class=\"hljs-symbol\">:default_email</span>, <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>\n  default_scope &#123; includes <span class=\"hljs-symbol\">:default_email</span> &#125;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">email</span></span>\n    default_email.email <span class=\"hljs-keyword\">rescue</span> <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  def email= email\n    <span class=\"hljs-keyword\">self</span>.default_email = emails.where(<span class=\"hljs-symbol\">email:</span> email).first_or_initialize\n  <span class=\"hljs-keyword\">end</span>\n\n  private\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">save_default_email</span></span>\n    <span class=\"hljs-keyword\">if</span> default_email.user.blank?\n      default_email.user = <span class=\"hljs-keyword\">self</span>\n    <span class=\"hljs-keyword\">elsif</span> default_email.user != <span class=\"hljs-keyword\">self</span>\n      raise Exceptions::EmailConflict\n    <span class=\"hljs-keyword\">end</span>\n    default_email.save!\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Note that we have removed <code>:validatable</code> which is added by default\nby devise. Also the after commit hook is required because when we are saving the user\nfor the first time, user id is nil when email is instantiated and hence will have to assign it once we have saved the user. An email conflict will be raised if the email\nis already associated with another account. Handling that error gracefully is left as an exercise for the reader.</p>\n<h2 id=\"Setting-up-the-login-flow\"><a href=\"#Setting-up-the-login-flow\" class=\"headerlink\" title=\"Setting up the login flow:\"></a>Setting up the login flow:</h2><p>While registration should work smoothly at this point, if we try to login we will run into trouble:</p>\n<img src=\"/images/devise_login_flow_fail.png\"/>\n\n<p>The problem is obvious. Devise tries to search using email field which does not exist. So we need to\nconfigure devise to find using the emails table we have created.</p>\n<p>This can be done by overriding the class method <code>find_first_by_auth_conditions</code> :</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n  ...\n\n  def <span class=\"hljs-keyword\">self</span>.having_email email\n    User\n      .includes(<span class=\"hljs-symbol\">:emails</span>)\n      .joins(<span class=\"hljs-symbol\">emails:</span> &#123;\n        <span class=\"hljs-symbol\">email:</span>  email\n      &#125;)\n      .first\n  <span class=\"hljs-keyword\">end</span>\n\n  def <span class=\"hljs-keyword\">self</span>.find_first_by_auth_conditions warden_conditions\n    conditions = warden_conditions.dup\n    <span class=\"hljs-keyword\">if</span> email = conditions.delete(<span class=\"hljs-symbol\">:email</span>)\n      having_email email\n    <span class=\"hljs-keyword\">else</span>\n      <span class=\"hljs-keyword\">super</span>(warden_conditions)\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  private\n\n  ...\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Once we have done that, login flow should as intended.</p>\n<h2 id=\"Interface-for-managing-emails\"><a href=\"#Interface-for-managing-emails\" class=\"headerlink\" title=\"Interface for managing emails\"></a>Interface for managing emails</h2><p>At this point a user can login and signup but he can not manage the emails which are associated with his/her account. Let us take care of that.</p>\n<p>The default edit account view of devise looks something like this:</p>\n<img src=\"/images/devise_default_edit.png\"/>\n\n<p>Note that this form works perfectly well - thanks to our email accessor hack. But users don&#39;t have the ability to add new emails or delete existing emails.</p>\n<p>We will to augment this form to accept nested attributes for emails. For nested forms probably the most popular solution is <a href=\"https://github.com/ryanb/nested_form\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">nested_form</a> but it has been unmaintained for a while. So I resorted to <a href=\"https://github.com/nathanvda/cocoon\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">cocoon</a> which is more actively maintained. Both of them work in a similar fashion - through unobstructive javascript.</p>\n<p>First we have to configure our model to accept nested attributes for emails - this part is easy:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n  ...\n  accepts_nested_attributes_for <span class=\"hljs-symbol\">:emails</span>, <span class=\"hljs-symbol\">reject_if:</span> <span class=\"hljs-symbol\">:all_blank</span>, <span class=\"hljs-symbol\">allow_destroy:</span> <span class=\"hljs-literal\">true</span>\n  ...\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Nest we need to generate devise views using <code>rails g devise:views</code> and edit the <code>app/views/devise/registrations/edit.html.erb</code>.</p>\n<p>We edit the template to add nested form for emails:</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Edit &lt;%=</span><span class=\"ruby\"> resource_name.to_s.humanize </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\n\n<span class=\"xml\">&lt;%=</span><span class=\"ruby\"> form_for(resource, <span class=\"hljs-symbol\">as:</span> resource_name, <span class=\"hljs-symbol\">url:</span> registration_path(resource_name), <span class=\"hljs-symbol\">html:</span> &#123; <span class=\"hljs-symbol\">method:</span> <span class=\"hljs-symbol\">:put</span> &#125;) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|f|</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">  &lt;%=</span><span class=\"ruby\"> devise_error_messages! </span><span class=\"xml\">%&gt;</span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&lt;%=</span><span class=\"ruby\"> f.label <span class=\"hljs-symbol\">:email</span>, <span class=\"hljs-string\">&quot;Default Email&quot;</span> </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span>\n<span class=\"xml\">  &lt;%=</span><span class=\"ruby\"> f.email_field <span class=\"hljs-symbol\">:email</span>, <span class=\"hljs-symbol\">autofocus:</span> <span class=\"hljs-literal\">true</span> </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> f.fields_for <span class=\"hljs-symbol\">:emails</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|email_f|</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">      &lt;%=</span><span class=\"ruby\"> render <span class=\"hljs-string\">&#x27;email_fields&#x27;</span>, <span class=\"hljs-symbol\">f:</span> email_f </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    &lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;links&quot;</span>&gt;</span></span>\n<span class=\"xml\">      &lt;%=</span><span class=\"ruby\"> link_to_add_association <span class=\"hljs-string\">&#x27;Add Email&#x27;</span>, f, <span class=\"hljs-symbol\">:emails</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"xml\">  &lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">if</span> devise_mapping.confirmable? &amp;&amp; resource.pending_reconfirmation? </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Currently waiting confirmation for: &lt;%=</span><span class=\"ruby\"> resource.unconfirmed_email </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">  &lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&lt;%=</span><span class=\"ruby\"> f.label <span class=\"hljs-symbol\">:password</span> </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>(leave blank if you don&#x27;t want to change it)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> f.password_field <span class=\"hljs-symbol\">:password</span>, <span class=\"hljs-symbol\">autocomplete:</span> <span class=\"hljs-string\">&quot;off&quot;</span> </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&lt;%=</span><span class=\"ruby\"> f.label <span class=\"hljs-symbol\">:password_confirmation</span> </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> f.password_field <span class=\"hljs-symbol\">:password_confirmation</span>, <span class=\"hljs-symbol\">autocomplete:</span> <span class=\"hljs-string\">&quot;off&quot;</span> </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&lt;%=</span><span class=\"ruby\"> f.label <span class=\"hljs-symbol\">:current_password</span> </span><span class=\"xml\">%&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>(we need your current password to confirm your changes)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span>\n<span class=\"xml\">    &lt;%=</span><span class=\"ruby\"> f.password_field <span class=\"hljs-symbol\">:current_password</span>, <span class=\"hljs-symbol\">autocomplete:</span> <span class=\"hljs-string\">&quot;off&quot;</span> </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&lt;%=</span><span class=\"ruby\"> f.submit <span class=\"hljs-string\">&quot;Update&quot;</span> </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">&lt;%</span><span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span><span class=\"xml\">%&gt;</span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Cancel my account<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Unhappy? &lt;%=</span><span class=\"ruby\"> button_to <span class=\"hljs-string\">&quot;Cancel my account&quot;</span>, registration_path(resource_name), <span class=\"hljs-symbol\">data:</span> &#123; <span class=\"hljs-symbol\">confirm:</span> <span class=\"hljs-string\">&quot;Are you sure?&quot;</span> &#125;, <span class=\"hljs-symbol\">method:</span> <span class=\"hljs-symbol\">:delete</span> </span><span class=\"xml\">%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n\n<span class=\"xml\">&lt;%=</span><span class=\"ruby\"> link_to <span class=\"hljs-string\">&quot;Back&quot;</span>, <span class=\"hljs-symbol\">:back</span> </span><span class=\"xml\">%&gt;</span>\n</code></pre>\n\n<p>Cocoon mandates a separate partial for email fields, which in our case is very simple:</p>\n<pre><code class=\"hljs erb\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;nested-fields&quot;</span>&gt;</span></span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">      &lt;%=</span><span class=\"ruby\"> f.label <span class=\"hljs-symbol\">:email</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">      &lt;%=</span><span class=\"ruby\"> f.email_field <span class=\"hljs-symbol\">:email</span> </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">      &lt;%=</span><span class=\"ruby\"> link_to_remove_association <span class=\"hljs-string\">&quot;remove email&quot;</span>, f </span><span class=\"xml\">%&gt;</span>\n<span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>\n\n<p>At this point if we try saving the form, we will notice that email fields are not getting saved. The reason is that the strong parameters specified by devise does not include our email fields. Fortunately devise provides a way to configure that :</p>\n<p>In <code>ApplicationController</code> :</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ApplicationController</span> &lt; ActionController::Base</span>\n  <span class=\"hljs-comment\"># Prevent CSRF attacks by raising an exception.</span>\n  <span class=\"hljs-comment\"># For APIs, you may want to use :null_session instead.</span>\n\n  protect_from_forgery <span class=\"hljs-symbol\">with:</span> <span class=\"hljs-symbol\">:exception</span>\n  before_action <span class=\"hljs-symbol\">:configure_permitted_parameters</span>, <span class=\"hljs-symbol\">if:</span> <span class=\"hljs-symbol\">:devise_controller?</span>\n\n  protected\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">configure_permitted_parameters</span></span>\n    devise_parameter_sanitizer.<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-symbol\">:account_update</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|u|</span>\n      u.permit <span class=\"hljs-symbol\">:email</span>, <span class=\"hljs-symbol\">:password</span>, <span class=\"hljs-symbol\">:password_confirmation</span>, <span class=\"hljs-symbol\">:current_password</span>, <span class=\"hljs-symbol\">emails_attributes:</span> [<span class=\"hljs-symbol\">:email</span>, <span class=\"hljs-symbol\">:id</span>, <span class=\"hljs-symbol\">:_destroy</span>]\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Note that <code>:_destroy</code> symbol in the attribute list. It is required because to destroy nested models, rails uses a virtual attribute called _destroy. When _destroy is set, the nested model will be deleted.</p>\n<p>If we try adding, removing and editing emails now, everything should work smoothly.\n<img src=\"/images/devise_nested_form_edit.png\"/></p>\n<p>In a production setting we will most certainly need to send out confirmation mails before activating the emails. We skip the additional steps for the sake of brevity.</p>\n<h2 id=\"Omniauth-integration\"><a href=\"#Omniauth-integration\" class=\"headerlink\" title=\"Omniauth integration:\"></a>Omniauth integration:</h2><p>One of the things we all love about devise is that it integrates beautifully with\n<a href=\"https://github.com/intridea/omniauth\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">omniauth</a> making integration with a plethora of social services painless. However due to the fundamental changes we have made, omniauth integration requires jumping through a few extra hoops.</p>\n<p>We use Facebook login as an example below:</p>\n<p>Firstly, of course we need to create an application on <a href=\"https://developers.facebook.com/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">https://developers.facebook.com</a>. Once we have created an application, and have obtained the API key and secret, we configure devise omniauth parameters:</p>\n<p>In Gemfile</p>\n<pre><code class=\"hljs ruby\">gem <span class=\"hljs-string\">&#x27;omniauth&#x27;</span>\ngem <span class=\"hljs-string\">&#x27;omniauth-facebook&#x27;</span></code></pre>\n\n<p>In config/initializers/devise.rb</p>\n<pre><code class=\"hljs ruby\">Devise.setup <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|config|</span>\n  ...\n  config.omniauth <span class=\"hljs-symbol\">:twitter</span>, Rails.application.secrets.fb_app_id, Rails.application.secrets.fb_app_secret\n  ...\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>In config/secrets.yml</p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">development:</span>\n  <span class=\"hljs-attr\">fb_app_id:</span> <span class=\"hljs-string\">&lt;add</span> <span class=\"hljs-string\">api</span> <span class=\"hljs-string\">key</span> <span class=\"hljs-string\">here&gt;</span>\n  <span class=\"hljs-attr\">fb_app_secret:</span> <span class=\"hljs-string\">&lt;add</span> <span class=\"hljs-string\">api</span> <span class=\"hljs-string\">secret</span> <span class=\"hljs-string\">here&gt;</span></code></pre>\n\n<p>In app/models/user.rb</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n  ...\n  devise <span class=\"hljs-symbol\">:omniauthable</span>, <span class=\"hljs-symbol\">omniauth_providers:</span> [<span class=\"hljs-symbol\">:facebook</span>]\n  ...\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>In config/routes.rb</p>\n<pre><code class=\"hljs ruby\">devise_for <span class=\"hljs-symbol\">:users</span>, <span class=\"hljs-symbol\">controllers:</span> &#123; <span class=\"hljs-symbol\">omniauth_callbacks:</span> <span class=\"hljs-string\">&quot;users/omniauth_callbacks&quot;</span> &#125;</code></pre>\n\n<p>where <code>users/omniauth_callbacks</code> is a controller we define to which facebook will redirect to after authenticating our application.</p>\n<p>If you have used omniauth with devise before, there is nothing out of the ordinary so far.</p>\n<p>Just like we wish to allow the user to sign up through multiple emails, we also wish to allow a user to sign up through multiple social networks. (s)he may be registered in different social networks with different emails. A simple and elegant way to represent a user&#39;s presence in multiple third party sites is through a separate <code>UserIdentity</code> model.</p>\n<pre><code>rails g model UserIdentity user_id:integer email_id:integer uid:string provider:string\n</code></pre>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserIdentity</span> &lt; ActiveRecord::Base</span>\n  belongs_to <span class=\"hljs-symbol\">:user</span>\n  belongs_to <span class=\"hljs-symbol\">:email</span>\n  validates <span class=\"hljs-symbol\">:user</span>, <span class=\"hljs-symbol\">:email</span>, <span class=\"hljs-symbol\">:uid</span>, <span class=\"hljs-symbol\">:provider</span>, <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Our callback controller is intentially very simple. Depending on your use case you may want to check if the user is newly created and direct him/her to a profile completion page. For the sake of simplicity, we just redirect any user to the profile page.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Users::OmniauthCallbacksController</span> &lt; Devise::OmniauthCallbacksController</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">facebook</span></span>\n    <span class=\"hljs-variable\">@user</span> = User.from_omniauth(request.env[<span class=\"hljs-string\">&quot;omniauth.auth&quot;</span>])\n    sign_in_and_redirect <span class=\"hljs-variable\">@user</span>, <span class=\"hljs-symbol\">:event</span> =&gt; <span class=\"hljs-symbol\">:authentication</span> <span class=\"hljs-comment\">#this will throw if <span class=\"hljs-doctag\">@user</span> is not activated</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>In the <code>from_omniauth</code> class method of user we need to identify user based on the auth parameters passed.\nLuckily facebook provides us with the email, so we can use that to identify a user.</p>\n<p>Four scenarios are possible:</p>\n<ul>\n<li><p><strong>User is signing up for the first time through facebook.</strong>\nIn this case we just use the email obtained from facebook as the default email and register the user</p>\n</li>\n<li><p><strong>User already has an account and has chosen to login through facebook for the first time</strong>\nWe can identify this situation if user&#39;s existing email is the same as the one he has used in Facebook. In this case we create a new UserIdentity for an existing user.</p>\n</li>\n<li><p><strong>User had logged in using facebook before, using the same email</strong>\nNothing needs to be created. We just log the user in.</p>\n</li>\n<li><p><strong>User had logged in using facebook before, using a different email</strong>\nWe keep the existing email, but associate the user identity with the new email.</p>\n</li>\n</ul>\n<p>Here is our implementation</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &lt; ActiveRecord::Base</span>\n\n  ...\n\n  def <span class=\"hljs-keyword\">self</span>.from_omniauth auth\n\n    email = Email\n      .includes(<span class=\"hljs-symbol\">:user</span>)\n      .where(<span class=\"hljs-symbol\">email:</span> auth.info.email)\n      .first_or_initialize\n\n    ui = UserIdentity\n      .where(<span class=\"hljs-symbol\">provider:</span> auth.provider, <span class=\"hljs-symbol\">uid:</span> auth.uid)\n      .first_or_initialize\n\n    <span class=\"hljs-keyword\">if</span> ui.persisted?\n      <span class=\"hljs-comment\"># Existing user, Existing social identity</span>\n      <span class=\"hljs-keyword\">if</span> ! email.persisted?\n        <span class=\"hljs-comment\"># Email changed on third party site</span>\n        email.user = ui.user\n        email.save!\n        ui.email = email\n      <span class=\"hljs-keyword\">elsif</span> email.user == ui.user\n        ui.user\n      <span class=\"hljs-keyword\">else</span>\n        raise Exceptions::EmailConflict.new\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">elsif</span> email.persisted?\n      <span class=\"hljs-comment\"># Existing User, new identity</span>\n      ui.user = email.user\n      ui.save!\n      ui.user\n    <span class=\"hljs-keyword\">else</span>\n      <span class=\"hljs-comment\"># New user new identity</span>\n      email.save!\n      user = User.new(\n        <span class=\"hljs-symbol\">password:</span> Devise.friendly_token[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">20</span>],\n        <span class=\"hljs-symbol\">default_email:</span> email\n      )\n      user.save!\n      ui.user = user\n      ui.email = email\n      ui.save!\n    <span class=\"hljs-keyword\">end</span>\n\n    ui.user\n  <span class=\"hljs-keyword\">end</span>\n\n  ...\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>The code above raises an <code>EmailConflict</code> exception if we end up in a scenario where an existing user is logging in and the email is associated with another account. Gracefully handling the error is left as an exercise for the reader. Also we assume that the social login provider will provide us with an email.\nWhile this is true for many providers like Github, not all providers provide with emails. A prominent example is twitter. Since this is not intended to be a comprehensive tutorial on omniauth, for the sake of brevity we don&#39;t\nelaborate on those scenarios. A good way to handle such a case would be to direct a user to a profile completion after login where he/she can enter the email and warn them if an account already exists for that email.</p>\n<p>So we conclude the post with a functional setup that allows a user to have multiple emails associated with a devise account. Feel free to bug me if you face any issues. Any comments and suggestions are also welcome.</p>\n",
            "tags": [
                "Ruby",
                "Rails",
                "Devise",
                "Integration"
            ]
        },
        {
            "id": "https://lorefnon.me/2014/07/27/optimizing-sti-columns.html",
            "url": "https://lorefnon.me/2014/07/27/optimizing-sti-columns.html",
            "title": "Optimizing space taken by type column in Rails STI",
            "date_published": "2014-07-27T00:00:00.000Z",
            "content_html": "<p>The <a href=\"http://api.rubyonrails.org/classes/ActiveRecord/Base.html#label-Single+table+inheritance\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Single Table Inheritance</a>\nfacility in Rails is quite awesome in that it is simple, minimal and easy to understand.\nHowever that simplicity comes with a small price - the type column stores the full name of the relevant class as a string.\nThis becomes especially unweildy if you scope your models inside a module.</p>\n<p>Let us illustrate this with an example:</p>\n<p>Let us say, we have a database of institutions. For non profit and commercial institutions we have two subclasses of <code>Institution::Base</code> namely, <code>Institution::NonProfit</code>, <code>Institution::Commercial</code>.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\">#app/models/institution.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Institution</span></span>\n  def <span class=\"hljs-keyword\">self</span>.table_name_prefix\n    <span class=\"hljs-string\">&#x27;institution_&#x27;</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># app/models/institution/base.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Institution::Base</span> &lt; ActiveRecord::Base</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">#app/models/institution/non_profit.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Institution::NonProfit</span> &lt; Institution::Base</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">#app/models/institution/commercial.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Institution::Commercial</span> &lt; Institution::Base</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>We deliberately keep the schema simple:</p>\n<pre><code class=\"hljs ruby\">create_table <span class=\"hljs-string\">&quot;institution_bases&quot;</span>, <span class=\"hljs-symbol\">force:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|t|</span>\n    t.string   <span class=\"hljs-string\">&quot;name&quot;</span>\n    t.string   <span class=\"hljs-string\">&quot;type&quot;</span>\n    t.datetime <span class=\"hljs-string\">&quot;created_at&quot;</span>\n    t.datetime <span class=\"hljs-string\">&quot;updated_at&quot;</span>\n <span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>The subclasses simply reuse the table and Rails distinguishes between them using the type column. If we  try to store some sample entries, we would notice that the value stored in type field contains the fully namespaces class name: <code>Institution::NonProfit</code>, <code>Institution::Commercial</code> etc.</p>\n<p>Since we know that our application will not store models from other namespace in this table, the extra space taken by the module name is wasteful. In fact storing the name in its entirety is wasteful. So this post highlights a simple approach to minimise the space taken by type column without sacrificing the ease of use of STI in rails.</p>\n<p>It turns out we can override the methods Rails uses to convert the table name to class name and vice versa:</p>\n<p>The relevant methods are <code>find_sti_class</code> which is responsible for the translating the value stored in the type column to the respective ActiveRecord model and <code>sti_name</code> which is responsible for retriving the value stored in type column given an ActiveRecord subclass.</p>\n<p>So we override the default implementations to the following:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Institution::Base</span> &lt; ActiveRecord::Base</span>\n\n  ALLOWED_CLASSES = <span class=\"hljs-string\">%w[Institution::NonProfit Institution::Commercial]</span>\n\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> &lt;&lt; self</span>\n\n    def find_sti_class type_name\n      idx = type_name.to_i\n      <span class=\"hljs-keyword\">super</span> <span class=\"hljs-keyword\">if</span> idx == <span class=\"hljs-number\">0</span>\n      ALLOWED_CLASSES[idx-<span class=\"hljs-number\">1</span>].constantize\n    <span class=\"hljs-keyword\">rescue</span> NameError, TypeError\n      <span class=\"hljs-keyword\">super</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sti_name</span></span>\n      idx = ALLOWED_CLASSES.index(<span class=\"hljs-keyword\">self</span>.name)\n      <span class=\"hljs-keyword\">if</span> idx.<span class=\"hljs-literal\">nil</span>?\n        <span class=\"hljs-keyword\">super</span>\n      <span class=\"hljs-keyword\">else</span>\n        idx + <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Once we have done this the STI subsystem of ActiveRecord will the use the <code>ALLOWED_CLASSES</code> to infer the name Institution classes using the index stored in the database column.</p>\n<p>What is particularly nice is that if have any existing data, we don&#39;t end up getting\nany errors when trying to save or retrieve them since we delegate to default implementations. Although it would be a better option to write a migration to change the type column to integer.</p>\n<p>The eagle eyed among us might have noticed we are offsetting the index in the <code>ALLOWED_CLASSES</code> index by 1. This is a basic precaution because calling <code>to_i</code> on a string that is not a numeric string returns <code>0</code> instead of raising an error. So delegating to default implementation incase of zero value allows us to retain legacy compatibility.</p>\n<p>You might want to ask why the array ALLOWED_CLASS_NAMES is a string array rather than an actual array of classes. Having an array of classes leads to RecursiveDependency errors while autoloading when fetching the entries from databases.</p>\n<p>While this is nice and good, this functionality is generic and doesn&#39;t really belong to the <code>Institution::Base</code> class. What if we need another module tomorrow which is unreleated but needs the same functionality?</p>\n<p>So in the spirit of reusability and separation of concerns we create a <code>concern</code> for this:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">OptimallyInheritable</span></span>\n  extend ActiveSupport::Concern\n\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">ClassMethods</span></span>\n    def support_sti_for cls_list\n      <span class=\"hljs-variable\">@sti_cls_list</span> = []\n      <span class=\"hljs-variable\">@sti_cls_list</span> += cls_list\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sti_cls_list</span></span>\n      <span class=\"hljs-variable\">@sti_cls</span>_list\n    <span class=\"hljs-keyword\">end</span>\n\n    def find_sti_class type_name\n      idx = type_name.to_i\n      <span class=\"hljs-keyword\">super</span> <span class=\"hljs-keyword\">if</span> idx == <span class=\"hljs-number\">0</span>\n      sti_cls_list[type_name.to_i-<span class=\"hljs-number\">1</span>].constantize\n    <span class=\"hljs-keyword\">rescue</span> NameError, TypeError\n      <span class=\"hljs-keyword\">super</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sti_name</span></span>\n      idx = sti_cls_list.index(<span class=\"hljs-keyword\">self</span>.name)\n      <span class=\"hljs-keyword\">if</span> idx.<span class=\"hljs-literal\">nil</span>?\n        <span class=\"hljs-keyword\">super</span>\n      <span class=\"hljs-keyword\">else</span>\n        idx + <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>And our <code>Institution::Base</code> class just reduces to:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Institution::Base</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-keyword\">include</span> OptimallyInheritable\n  support_sti_for <span class=\"hljs-string\">%w[Institution::NonProfit Institution::Commercial]</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>All seems kosher, so we take our implementation for a test drive:</p>\n<pre><code>&gt; Institution::Base.all\nInstitution::Base Load (0.4ms)  SELECT `institution_bases`.* FROM `institution_bases`\n=&gt; #&lt;ActiveRecord::Relation [#&lt;Institution::Commercial id: 3, name: &quot;loremipsum&quot;, type: &quot;2&quot;, created_at: &quot;2014-07-17 12:27:26&quot;, updated_at: &quot;2014-07-17 12:27:26&quot;&gt;]&gt;\n</code></pre>\n<p>While laoding instances of base class works well, we run into issues when we try to load all commercial\ninstitutions:</p>\n<pre><code>2.1.2 :005 &gt; Institution::Commercial.all\nNoMethodError: undefined method `index&#39; for nil:NilClass\n               from /Users/lorefnon/Workspace/sample/app/models/concerns/optimally_inheritable.rb:24:in `sti_name&#39;\n               from /Users/lorefnon/.rvm/gems/ruby-2.1.2@sample/gems/activerecord-4.1.4/lib/active_record/inheritance.rb:170:in `block in type_condition&#39;\n               from /Users/lorefnon/.rvm/gems/ruby-2.1.2@sample/gems/activerecord-4.1.4/lib/active_record/inheritance.rb:170:in `map&#39;\n               from /Users/lorefnon/.rvm/gems/ruby-2.1.2@sample/gems/activerecord-4.1.4/lib/active_record/inheritance.rb:170:in `type_condition&#39;\n               from /Users/lorefnon/.rvm/gems/ruby-2.1.2@sample/gems/activerecord-4.1.4/lib/active_record/core.rb:170:in `relation&#39;\n</code></pre>\n<p>The problem is obvious : the variable <code>sti_class_list</code> is not available in subclasses.</p>\n<p>So we rectify our solution:</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sti_cls_list</span></span>\n  <span class=\"hljs-keyword\">if</span> superclass.respond_to? <span class=\"hljs-symbol\">:sti_cls_list</span>\n    superclass.sti_cls_list\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-variable\">@sti_cls</span>_list\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>This resolves the aforementioned issues.</p>\n<p>Now that we have reached the end of the post, it would be a good time to highlight the drawbacks of our approach:</p>\n<ol>\n<li>Firstly, The array passed to <code>support_sti_for</code> function will have to be kept in sync with the class names, if the name of any model class changes in future.</li>\n<li>Secondly, While it is safe to add new entries to supported classes, their order can not be arbitrarily changed without running a data correction script first.</li>\n</ol>\n<p>This concludes our post. The full source code is available at <a href=\"https://github.com/lorefnon/sti_optimization_demo.git\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Github</a>. As always, any criticism or feedback is welcome.</p>\n",
            "tags": [
                "Ruby",
                "Rails",
                "ActiveRecord"
            ]
        },
        {
            "id": "https://lorefnon.me/2014/07/13/presenting-sql-views-through-active-admin.html",
            "url": "https://lorefnon.me/2014/07/13/presenting-sql-views-through-active-admin.html",
            "title": "Presenting SQL views through ActiveAdmin",
            "date_published": "2014-07-13T00:00:00.000Z",
            "content_html": "<p><a href=\"http://en.wikipedia.org/wiki/View_(SQL)\"> SQL Views </a> are a handy feature that allow us to\nsave a query whose results are computed/collated dynamically whenever the view is requested.\nBecause the abstraction provided by a view is semantically close to a table we can leverage\nActiveRecord to interface with the view through a proxy model and use it to\npresent the result set through <a href=\"http://activeadmin.info/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">ActiveAdmin</a> interface.</p>\n<p>This can be very useful for reporting and visual inspection, especially by\nnon technical staff.</p>\n<p>The rest of the post elaborates on a simple approach for doing this through\ncode examples. Please note that henceforth we use the term view\nto refer to an SQL View rather than Rails view templates. Also the code is\nwritten for Rails 4 but should be usable with Rails 3 as well.</p>\n<p>For the sake of illustration we use an example database containing\ngeographical information of Indian cities. The full code is available <a href=\"https://github.com/lorefnon/active_admin_view_demo\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">here</a>.\nFor brevity we just mention the generator commands and\nmodel classes here:</p>\n<pre><code class=\"hljs sh\">rails g model City name:string district_id:<span class=\"hljs-built_in\">integer</span>\nrails g model District name:string state_id:<span class=\"hljs-built_in\">integer</span>\nrails g model State name:string</code></pre>\n\n<pre><code class=\"hljs ruby\"><span class=\"hljs-comment\"># app/models/state.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">State</span> &lt; ActiveRecord::Base</span>\n  has_many <span class=\"hljs-symbol\">:districts</span>\n  has_many <span class=\"hljs-symbol\">:cities</span>, <span class=\"hljs-symbol\">through:</span> <span class=\"hljs-symbol\">:districts</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># app/models/district.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">District</span> &lt; ActiveRecord::Base</span>\n  belongs_to <span class=\"hljs-symbol\">:state</span>\n  has_many <span class=\"hljs-symbol\">:cities</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># app/models/city.rb</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">City</span> &lt; ActiveRecord::Base</span>\n  belongs_to <span class=\"hljs-symbol\">:district</span>\n  has_one <span class=\"hljs-symbol\">:state</span>, <span class=\"hljs-symbol\">through:</span> <span class=\"hljs-symbol\">:district</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Note: Using the most recent Rails version, 4.1.4, will cause numerous dependency\nconflicts, hence we use Rails 4.0.0 with ActiveAdmin edge.Since we don&#39;t plan\nto use any cutting edge features in this example this should be an acceptable\ncompromise.</p>\n<p>We stick to default Devise based AdminUser for authentication. Once we generate\nactive admin resources for our models, we have something like this:</p>\n<img src=\"/images/active_admin_states.png\" />\n<img src=\"/images/active_admin_districts.png\" />\n<img src=\"/images/active_admin_cities.png\" />\n\n<p>The view that we intend to create combines the data in the three tables\njoins.</p>\n<pre><code>SELECT cities.id AS id, states.name AS state, districts.name AS district, cities.name AS city\nFROM states\nINNER JOIN districts ON districts.state_id = states.id\nINNER JOIN cities ON cities.district_id = districts.id\n</code></pre>\n<img src=\"/images/joins_states.png\" />\n\n<p>To create the view we generate a migration:</p>\n<pre><code>rails g migration create_state_district_city_view\n</code></pre>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CreateStateDistrictCityView</span> &lt; ActiveRecord::Migration</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">up</span></span>\n    <span class=\"hljs-keyword\">self</span>.connection.execute <span class=\"hljs-string\">%Q( CREATE OR REPLACE VIEW state_district_city_view AS</span>\n<span class=\"hljs-string\">      SELECT cities.id AS id, states.name AS state, districts.name AS district, cities.name AS city</span>\n<span class=\"hljs-string\">      FROM states</span>\n<span class=\"hljs-string\">      INNER JOIN districts ON districts.state_id = states.id</span>\n<span class=\"hljs-string\">      INNER JOIN cities ON cities.district_id = districts.id</span>\n<span class=\"hljs-string\">    )</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">down</span></span>\n    <span class=\"hljs-keyword\">self</span>.connection.execute <span class=\"hljs-string\">&quot;DROP VIEW IF EXISTS state_district_city_view;&quot;</span>\n  <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Now a view, as far as read access is concerned, behaves similar to a table, we\ncan just define a normal ActiveRecord model to access this view.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StateDistrictCityViewProxy</span> &lt; ActiveRecord::Base</span>\n    <span class=\"hljs-keyword\">self</span>.table_name = <span class=\"hljs-string\">&quot;state_district_city_view&quot;</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>We can take the proxy model for a test drive using IRB:</p>\n<pre><code class=\"hljs ruby\">&gt; StateDistrictCityViewProxy.limit(<span class=\"hljs-number\">10</span>).to_a\n  StateDistrictCityViewProxy Load (<span class=\"hljs-number\">0</span>.4ms)  SELECT <span class=\"hljs-string\">`state_district_city_view`</span>.* FROM <span class=\"hljs-string\">`state_district_city_view`</span> LIMIT <span class=\"hljs-number\">10</span>\n=&gt; [#&lt;StateDistrictCityViewProxy id: 1, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Agali&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 2, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Amadagur&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 3, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Amarapuram&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 4, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Anantapur&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 5, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Atmakur&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 6, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Bathalapalle&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 7, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Beluguppa&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 8, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Bommanahal&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 9, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Brahmasamudram&quot;&gt;, #&lt;StateDistrictCityViewProxy id: 10, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Bukkapatnam&quot;&gt;]</code></pre>\n\n<p>Now that we have a model, generating an ActiveAdmin resource is as simple as:</p>\n<pre><code> rails g active_admin:resource StateDistrictCityViewProxy\n</code></pre>\n<p>At this point upon visiting the index page in ActiveAdmin we might have expected\na fancy paginated table but instead we are greeted with a not-so-helpful error:</p>\n<img src=\"/images/err1.png\"/>\n\n<p>The problem is immediately obvious if we try to get the attributes of a model instance:</p>\n<pre><code>&gt; s1 = StateDistrictCityViewProxy.first\n  StateDistrictCityViewProxy Load (0.3ms)  SELECT `state_district_city_view`.* FROM `state_district_city_view` LIMIT 1\n=&gt; #&lt;StateDistrictCityViewProxy id: 1, state: &quot;Andhra Pradesh&quot;, district: &quot;Anantapur&quot;, city: &quot;Agali&quot;&gt;\n&gt; s1.attributes\n=&gt; &#123;&quot;id&quot;=&gt;1, &quot;state&quot;=&gt;&quot;Andhra Pradesh&quot;, &quot;district&quot;=&gt;&quot;Anantapur&quot;, &quot;city&quot;=&gt;&quot;Agali&quot;, nil=&gt;nil&#125;\n</code></pre>\n<p>So the question is where is the nil coming from? The problem is that an SQL view doesn&#39;t have a primary key. Rails doesn&#39;t automatically\nassume that our <code>id</code> field is a primary key.</p>\n<pre><code>&gt; StateDistrictCityViewProxy.primary_key\n=&gt; nil\n</code></pre>\n<p>We can not somehow add a primary key to an SQL view, that is utterly pointless. However we can force ActiveRecord to use the <code>id</code> attribute\nas primary key.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StateDistrictCityViewProxy</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-keyword\">self</span>.table_name = <span class=\"hljs-string\">&quot;state_district_city_view&quot;</span>\n  <span class=\"hljs-keyword\">self</span>.primary_key = <span class=\"hljs-string\">&quot;id&quot;</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>And voila. We have our fancy table:</p>\n<img src=\"/images/active_admin_view.png\"/>\n\n<h1 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats:\"></a>Caveats:</h1><p>While everything looks great at this point, our setup has a couple of issues that need to be resolved:</p>\n<h2 id=\"schema-rb\"><a href=\"#schema-rb\" class=\"headerlink\" title=\"schema.rb\"></a>schema.rb</h2><p>If you take a look at schema.rb the problem immediately becomes obvious. Nothing about our view is to be found.\nThe problem is that Rails is blissfully oblivious of our SQL views and the sql statements\nin our migrations have not introducted any changes in schema.rb. So when you regenerate the database from\nschema.yml the view will not be created. This has multiple solutions. A simple one\nis to get rid of schema.rb in favor of sql schema format.</p>\n<p>In config/application.rb:</p>\n<pre><code>config.active_record.schema_format = :sql\n</code></pre>\n<p>Next time we run <code>rake db:migrate</code> a <code>structure.sql</code> file will be generated that contains the SQL\nfor generating our views.</p>\n<p>An alternative option is the gem <a href=\"https://github.com/lomba/schema_plus\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">schema_plus</a> that augments ActiveRecord\nwith support for views among other advanced database features.</p>\n<h2 id=\"Edit-Delete-actions\"><a href=\"#Edit-Delete-actions\" class=\"headerlink\" title=\"Edit/Delete actions\"></a>Edit/Delete actions</h2><p>Our ActiveAdmin view table has been blessed with <code>Edit</code> and <code>Delete</code> actions for every row, which\noviously trigger an error. For example, here is what we end up with when clicking on <code>Delete</code> :</p>\n<img src=\"/images/err2.png\"/>\n\n<p>Let us declare the proxy model as readonly.</p>\n<pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StateDistrictCityViewProxy</span> &lt; ActiveRecord::Base</span>\n  <span class=\"hljs-keyword\">self</span>.table_name = <span class=\"hljs-string\">&quot;state_district_city_view&quot;</span>\n  <span class=\"hljs-keyword\">self</span>.primary_key = <span class=\"hljs-string\">&quot;id&quot;</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">readonly?</span></span>\n    <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Next we simply remove the irrelevant actions from the ActiveAdmin view:</p>\n<pre><code class=\"hljs ruby\">ActiveAdmin.register StateDistrictCityViewProxy <span class=\"hljs-keyword\">do</span>\n\n  actions <span class=\"hljs-symbol\">:index</span>, <span class=\"hljs-symbol\">:show</span>\n\n<span class=\"hljs-keyword\">end</span></code></pre>\n\n<p>Now that the quirks of our setup have been ironed out, feel free to go ahead and try it out.\nOf course SQL views are not the only solution for a problem like this and the aforementioned table could have been\nbuilt entirely through DSLs provided by ActiveAdmin. But nonetheless, SQL views are something that\nmost DBAs are already familiar with and is a hassle free setup. If you already have a legacy database\nwith views or need to use views for other auxiliary purposes, the aforementioned approach may make\nthings easy for you.</p>\n<p>Any suggestion or criticism is welcome.</p>\n",
            "tags": [
                "Ruby",
                "Rails",
                "ActiveAdmin"
            ]
        },
        {
            "id": "https://lorefnon.me/2014/02/02/configuring-emacs-for-rails.html",
            "url": "https://lorefnon.me/2014/02/02/configuring-emacs-for-rails.html",
            "title": "Configuring Emacs as a productive development environment for Rails development.",
            "date_published": "2014-02-02T00:00:00.000Z",
            "content_html": "<h2 id=\"Updates\"><a href=\"#Updates\" class=\"headerlink\" title=\"Updates\"></a>Updates</h2><ul>\n<li>The default keybindings have been updated based on the feedback from <a href=\"https://github.com/asok\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Asok</a>, the author of the awesmoe <code>projectile-rails</code> package.</li>\n</ul>\n<hr>\n<p>This post outlines some of the Emacs extensions (open source, of course) which can significantly ease the life of a Rails developer. While Rails is, by design, quite a productive framework, having the dev environment properly setup can multiply developer efficiency by an order of magnitude. Although almost all of this information is available online elsewhere, I nevertheless wanted to summarize my explorations in form of a basic guide to easily configure extensions I have found to be useful, during the course of my Rails projects. While the primary audience is a forgetful me from the future, I hope developers new to Rails or Emacs (or both) will find this helpful to get up and running with Emacs and Rails, without having to wade through reams of documentation right upfront. I have tried my best to link the appropriate authoritative resources, which may be helpful for people looking forward to customizing and extending the setup.</p>\n<p>While the setup below has been tested only in Linux Elementary, it should work for other Posix environments as well. Please ensure that you have got atleast <a href=\"http://www.gnu.org/software/emacs/#Obtaining\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Emacs 24</a> and can download packages through <a href=\"https://github.com/technomancy/package.el\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"><code>package.el</code></a>. If you are not familiar with package management in emacs <a href=\"https://github.com/bbatsov\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Bozhidar Batsov</a> has presented <a href=\"http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">a great introduction</a>. Adding the following snippet to your <code>~/.emacs</code> should provide access to <a href=\"http://marmalade-repo.org/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">marmalade</a> and <a href=\"http://melpa.milkbox.net/#/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">melpa</a> package archives:</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">require</span> &#x27;package)\n(<span class=\"hljs-name\">add-to-list</span> &#x27;package-archives\n    &#x27;(<span class=\"hljs-string\">&quot;marmalade&quot;</span> .\n      <span class=\"hljs-string\">&quot;http://marmalade-repo.org/packages/&quot;</span>))\n(<span class=\"hljs-name\">add-to-list</span> &#x27;package-archives\n    &#x27;(<span class=\"hljs-string\">&quot;melpa&quot;</span> . <span class=\"hljs-string\">&quot;http://melpa.milkbox.net/packages/&quot;</span>) <span class=\"hljs-literal\">t</span>)\n(<span class=\"hljs-name\">package-initialize</span>)</code></pre>\n\n<h1 id=\"Syntax-Checking\"><a href=\"#Syntax-Checking\" class=\"headerlink\" title=\"Syntax Checking\"></a>Syntax Checking</h1><p>While the <code>ruby-mode</code> bundled with Emacs works well with syntax highlighting, it does not automatically handle syntax checking. Luckily we have <a href=\"http://www.emacswiki.org/emacs/FlyMake\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">flymake</a>, which is a generic on the fly syntax checking system. We can install <a href=\"https://github.com/purcell/flymake-ruby\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">flymake-ruby</a> which facilitates syntax checking for ruby through our package manager. Just hit <code>M-x package-install</code> and type in <code>flymake-ruby</code>.</p>\n<p>Once flymake-ruby is installed, we just have to hook it up with the ruby-mode.</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">require</span> &#x27;flymake-ruby)\n(<span class=\"hljs-name\">add-hook</span> &#x27;ruby-mode-hook &#x27;flymake-ruby-load)</code></pre>\n\n<p>And voila, no syntax errors go unnoticed ever again:</p>\n<p><img src=\"/images/emacs-flymake.png\" alt=\"Emacs flymake screenshot\" loading=\"lazy\"></p>\n<h1 id=\"Sane-indentation\"><a href=\"#Sane-indentation\" class=\"headerlink\" title=\"Sane indentation\"></a>Sane indentation</h1><p>The default indentation system attempts to align the arguments of a function\nwith the opening bracket vertically.</p>\n<pre><code class=\"hljs ruby\">function_call (arg1,\n               arg2);</code></pre>\n\n<p>While this is subjective, but if you, like me, find this behaviour erratic - the following will make emacs indent code inside parenthesis similar to elsewhere.</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">setq</span> ruby-deep-indent-paren <span class=\"hljs-literal\">nil</span>)</code></pre>\n\n<h1 id=\"Ruby-shell-inside-emacs\"><a href=\"#Ruby-shell-inside-emacs\" class=\"headerlink\" title=\"Ruby shell inside emacs\"></a>Ruby shell inside emacs</h1><p><a href=\"https://github.com/nonsequitur/inf-ruby\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">inf-ruby</a> provides a REPL buffer connected to a Ruby subprocess. It is available through the package manager. Once installed you would probably want to bind it to a convenient shortcut. The following would bind it to <code>C-c r r</code>.</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">global-set-key</span> (<span class=\"hljs-name\">kbd</span> <span class=\"hljs-string\">&quot;C-c r r&quot;</span>) &#x27;inf-ruby)</code></pre>\n\n<h1 id=\"Integration-with-RVM\"><a href=\"#Integration-with-RVM\" class=\"headerlink\" title=\"Integration with RVM\"></a>Integration with RVM</h1><p>If you use RVM for managing ruby versions, you would want to use <a href=\"https://github.com/senny/rvm.el\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">rvm.el</a>. Once installed you will just have to call <code>rvm-activate-corresponding-ruby</code> and rvm.el will automatically pick up your ruby version and gemset from .rvmrc file.</p>\n<p>The following will bind the aforementioned command to <code>C-c r a</code></p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">global-set-key</span> (<span class=\"hljs-name\">kbd</span> <span class=\"hljs-string\">&quot;C-c r a&quot;</span>) &#x27;rvm-activate-corresponding-ruby)</code></pre>\n\n<p><img src=\"/images/emacs-rvm.png\" alt=\"rvm.el\" loading=\"lazy\"></p>\n<p>It seamlessly integrates with <code>inf-ruby</code> so if you invoke <code>inf-ruby</code> after the previous step, you will get the version of ruby and gemset you expect.</p>\n<h1 id=\"Project-management-with-projectile\"><a href=\"#Project-management-with-projectile\" class=\"headerlink\" title=\"Project management with projectile\"></a>Project management with projectile</h1><p>So far the steps had nothing to do with Rails and were equally useful for vanilla ruby projects. However for managing large Rails applications some basic project management facilities might come in handy.</p>\n<p>While there are a plethora of project management utilities for emacs, One that is particularly simple and easy to install is <a href=\"https://github.com/bbatsov/projectile\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">projectile</a>. It is available through the package manager. Once installed it can be configured as a global mode as follows:</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">projectile-global-mode</span>)</code></pre>\n\n<p>or it can be hooked into particular modes:</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">add-hook</span> &#x27;ruby-mode-hook &#x27;projectile-on)</code></pre>\n\n<p>I would also strongly recommend using the <a href=\"http://www.emacswiki.org/emacs/InteractivelyDoThings\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">ido-mode</a> which, among other things, provides various enhancements to make navigation between files and buffers easy. The default behaviour of <code>C-x C-f</code> and <code>C-x C-b</code> are changed to a more interactive version, which shows a list of matched options while typing right inside the minibuffer. <a href=\"https://github.com/lewang/flx\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">flx-ido</a> is an extension which further enhances the matching capabilities of ido to perform fuzzy matching (a-la sublime text) which can be a great productivity boost, particularly if you are a bit sloppy with keyboard. <code>ido</code> is built into emacs and <code>flx-ido</code> is available through package manager.</p>\n<p><code>flx-ido-mode</code> activates the ido mode augmenting with flexible matching.</p>\n<p>You may want to use following snippet to display ido completions vertically instead of horizontally, as is the default behaviour.</p>\n<pre><code class=\"hljs lisp\"><span class=\"hljs-comment\">;; Display ido results vertically, rather than horizontally</span>\n (<span class=\"hljs-name\">setq</span> ido-decorations (<span class=\"hljs-name\">quote</span> (<span class=\"hljs-string\">&quot;\\n-&gt; &quot;</span> <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-string\">&quot;\\n   &quot;</span> <span class=\"hljs-string\">&quot;\\n   ...&quot;</span> <span class=\"hljs-string\">&quot;[&quot;</span> <span class=\"hljs-string\">&quot;]&quot;</span> <span class=\"hljs-string\">&quot; [No match]&quot;</span> <span class=\"hljs-string\">&quot; [Matched]&quot;</span> <span class=\"hljs-string\">&quot; [Not readable]&quot;</span> <span class=\"hljs-string\">&quot; [Too big]&quot;</span> <span class=\"hljs-string\">&quot; [Confirm]&quot;</span>)))\n (<span class=\"hljs-name\">defun</span> ido-disable-line-truncation () (<span class=\"hljs-name\">set</span> (<span class=\"hljs-name\">make-local-variable</span> &#x27;truncate-lines) <span class=\"hljs-literal\">nil</span>))\n (<span class=\"hljs-name\">add-hook</span> &#x27;ido-minibuffer-setup-hook &#x27;ido-disable-line-truncation)\n (<span class=\"hljs-name\">defun</span> ido-define-keys () <span class=\"hljs-comment\">;; C-n/p is more intuitive in vertical layout</span>\n   (<span class=\"hljs-name\">define-key</span> ido-completion-map (<span class=\"hljs-name\">kbd</span> <span class=\"hljs-string\">&quot;C-n&quot;</span>) &#x27;ido-next-match)\n   (<span class=\"hljs-name\">define-key</span> ido-completion-map (<span class=\"hljs-name\">kbd</span> <span class=\"hljs-string\">&quot;C-p&quot;</span>) &#x27;ido-prev-match))\n (<span class=\"hljs-name\">add-hook</span> &#x27;ido-setup-hook &#x27;ido-define-keys)</code></pre>\n\n<p><img src=\"/images/emacs-ido-vertical.png\" alt=\"Emacs ido vertical completions\" loading=\"lazy\"></p>\n<p>Projectile integrates with ido and uses it as its indexing method. For projectile to recognize the project root, you just have to drop an empty .projectile file there. Once that is done, you can simply perform a fuzzy search for files using <code>C-c C-p f</code> and directories using <code>C-c C-p d</code></p>\n<p><img src=\"/images/emacs-projectile-file-search.png\" alt=\"Projectile find file\" loading=\"lazy\">\n<img src=\"/images/emcas-projectile-dir-search.png\" alt=\"Projectile find dir\" loading=\"lazy\"></p>\n<p><a href=\"https://github.com/asok/projectile-rails\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Projectile Rails</a> builds upon <code>projectile</code> to provide project management facilities specifically tailored for Rails applications. It is available through package manager and can be hooked up with projectile using :</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">add-hook</span> &#x27;projectile-mode-hook &#x27;projectile-rails-on)</code></pre>\n\n<p>Projectile Rails adds a large number of keybindings to ease navigation across files in a rails project, running rake tasks, invoking console etc.\nFollowing is the list of commands and associated bindings taken from the home page of projectile rails.</p>\n<table>\n<thead><tr>\n<th>Command</th>\n<th>Keybinding</th>\n<th>Description</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>projectile-rails-find-model</td>\n<td><kbd>C-c r m</kbd></td>\n<td>Find a model using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-current-model</td>\n<td><kbd>C-c r M</kbd></td>\n<td>Go to a model connected with the current resource.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-controller</td>\n<td><kbd>C-c r c</kbd></td>\n<td>Find a controller using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-current-controller</td>\n<td><kbd>C-c r C</kbd></td>\n<td>Go to a controller connected with the current resource.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-view</td>\n<td><kbd>C-c r v</kbd></td>\n<td>Find a template or partial using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-current-view</td>\n<td><kbd>C-c r V</kbd></td>\n<td>Go to a view connected with the current resource.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-helper</td>\n<td><kbd>C-c r h</kbd></td>\n<td>Find a helper using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-current-helper</td>\n<td><kbd>C-c r H</kbd></td>\n<td>Go to a helper connected with the current resource.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-lib</td>\n<td><kbd>C-c r l</kbd></td>\n<td>Find a lib using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-feature</td>\n<td><kbd>C-c r f</kbd></td>\n<td>Find a feature using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-spec</td>\n<td><kbd>C-c r p</kbd></td>\n<td>Find a spec using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-current-spec</td>\n<td><kbd>C-c r P</kbd></td>\n<td>Go to a spec connected with the current resource.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-migration</td>\n<td><kbd>C-c r n</kbd></td>\n<td>Find a migration using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-current-migration</td>\n<td><kbd>C-c r N</kbd></td>\n<td>Go to a migration connected with the current resource.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-javascript</td>\n<td><kbd>C-c r j</kbd></td>\n<td>Find a javascript using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-stylesheet</td>\n<td><kbd>C-c r s</kbd></td>\n<td>Find a stylesheet using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-log</td>\n<td><kbd>C-c r o</kbd></td>\n<td>Find a log file and enable <code>auto-revert-tail-mode</code> in its buffer.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-initializer</td>\n<td><kbd>C-c r i</kbd></td>\n<td>Find an initializer file using <code>projectile-completions-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-environment</td>\n<td><kbd>C-c r e</kbd></td>\n<td>Find an environment file using <code>projectile-completions-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-locale</td>\n<td><kbd>C-c r a</kbd></td>\n<td>Find a locale file using <code>projectile-completions-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-mailer</td>\n<td><kbd>C-c r @</kbd></td>\n<td>Find a mailer file using <code>projectile-completions-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-find-layout</td>\n<td><kbd>C-c r y</kbd></td>\n<td>Find a layout file using <code>projectile-completions-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-console</td>\n<td>\n<kbd>C-c r ! c</kbd>, <kbd>C-c r r</kbd>\n</td>\n<td>Run <code>rails console</code> command in <code>inf-ruby</code> buffer.</td>\n</tr>\n<tr>\n<td>projectile-rails-server</td>\n<td>\n<kbd>C-c r ! s</kbd>, <kbd>C-c r R</kbd>\n</td>\n<td>Run <code>rails server</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-rake</td>\n<td><kbd>C-c r ! r</kbd></td>\n<td>Select a rake task to run using <code>projectile-completion-system</code>.</td>\n</tr>\n<tr>\n<td>projectile-rails-generate</td>\n<td><kbd>C-c r ! g</kbd></td>\n<td>Run <code>rails generate</code> command.</td>\n</tr>\n<tr>\n<td>projectile-rails-extract-region</td>\n<td><kbd>C-c r x</kbd></td>\n<td>Extract the selected region to a partial.</td>\n</tr>\n<tr>\n<td>projectile-rails-goto-file-at-point</td>\n<td>\n<kbd>C-c r RET</kbd>, <kbd>C-c r g f</kbd>\n</td>\n<td>Go to a file at point. Depending on the context that might be a constant, template or partial, or a gem.</td>\n</tr>\n<tr>\n<td>projectile-rails-goto-gemfile</td>\n<td><kbd>C-c r g g</kbd></td>\n<td>Go to <code>Gemfile</code> file.</td>\n</tr>\n<tr>\n<td>projectile-rails-goto-routes</td>\n<td><kbd>C-c r g r</kbd></td>\n<td>Go to <code>config/routes.rb</code> file.</td>\n</tr>\n<tr>\n<td>projectile-rails-goto-schema</td>\n<td><kbd>C-c r g d</kbd></td>\n<td>Go to <code>db/schema.rb</code> file.</td>\n</tr>\n<tr>\n<td>projectile-rails-goto-spec-helper</td>\n<td><kbd>C-c r g l</kbd></td>\n<td>Go to <code>spec/spec_helper.rb</code> file.</td>\n</tr>\n</tbody>\n</table>\n\n<p>Note that <code>rails console</code> uses <code>inf-ruby</code>, so integration with rvm is smooth and effortless.</p>\n<p><img src=\"/images/projectile-rails-console.png\" alt=\"Projectile Rails console\" loading=\"lazy\"></p>\n<h1 id=\"Intelligent-Code-navigation-and-Completion-with-Robe\"><a href=\"#Intelligent-Code-navigation-and-Completion-with-Robe\" class=\"headerlink\" title=\"Intelligent Code navigation and Completion with Robe\"></a>Intelligent Code navigation and Completion with Robe</h1><p><a href=\"https://github.com/dgutov/robe\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">Robe</a> is a code assistance tool that uses a Ruby REPL subprocess with your application or gem code loaded, to provide information about loaded classes and modules, and where each method is defined.</p>\n<p>Robe is available via package manager. Once installed it can be hooked into ruby mode.</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">require</span> &#x27;robe)\n(<span class=\"hljs-name\">add-hook</span> &#x27;ruby-mode-hook &#x27;robe-mode)</code></pre>\n\n<p>If you are using rvm you  may want to instruct robe to auto-trigger <code>rvm-activate-corresponding-ruby</code>.</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">defadvice</span> inf-ruby-console-auto (<span class=\"hljs-name\">before</span> activate-rvm-for-robe activate)\n  (<span class=\"hljs-name\">rvm-activate-corresponding-ruby</span>))</code></pre>\n\n<p><code>robe-jump</code> bound by default to <code>M-.</code> can be used to jump to definitions of various classes and methods. While it is not ideal, in most of the scenarios, the expected entry is present in the first few suggestions.</p>\n<p>For intelligent completion robe can be integrated with <a href=\"http://company-mode.github.io/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">company mode</a>. Company mode is a modern and modular completion system for emacs which accepts a multitude of pluggable back-ends and front-ends to provide rich completions on the fly. Robe provides a backend to the completion in form of company-robe. This can be configured as follows :</p>\n<pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">global-company-mode</span> <span class=\"hljs-literal\">t</span>)\n(<span class=\"hljs-name\">push</span> &#x27;company-robe company-backends)</code></pre>\n\n<p>Now all you have to do is hit <code>robe-start</code> when you navigate into your project. After that at any point\nif you trigger <code>company-robe</code> you should be greeted with an intellisense like method definitions.</p>\n<p>Completion will start automatically after you type a few letters. Use M-n, M-p, &lt;tab&gt; and &lt;return&gt; to complete. Search through the completions with C-s, C-r and C-o. Even the documentations are available right from the editor (Press F1 at any menu entry).</p>\n<p><img src=\"/images/emacs-robe-completions.png\" alt=\"Emacs robe completions\" loading=\"lazy\"></p>\n<p>One of the caveats is that robe requires <code>pry</code> and <code>pry-doc</code> to be in Gemfile. This is a problem when working with third party projects and I don&#39;t have a workaround for that yet.</p>\n<p>Also Ruby being a dynamic language which strives to push the limits on flexibility, perfect completion is simply not possible. Many of known caveats are listed <a href=\"https://github.com/dgutov/robe#notes\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">here</a> and some are being actively being worked upon. But nevertheless, I have found the setup to be quite useful for day to day development and hope you do too.</p>\n<p>I hope that this quick detour into the world of emacs-extensions has motivated you to atleast try out Emacs. How far you go down the rabbit hole is of-course for you to decide. As always, any criticism, suggestions and comments are welcome.</p>\n",
            "tags": [
                "Rails",
                "Emacs"
            ]
        }
    ]
}