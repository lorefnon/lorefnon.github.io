{
    "version": "https://jsonfeed.org/version/1",
    "title": "Icicles of Thought â€¢ All posts by \"css\" tag",
    "description": "",
    "home_page_url": "https://lorefnon.me",
    "items": [
        {
            "id": "https://lorefnon.me/2016/04/04/embracing-bem-methodology-in-react-applications.html",
            "url": "https://lorefnon.me/2016/04/04/embracing-bem-methodology-in-react-applications.html",
            "title": "Embracing BEM methodology in React applications",
            "date_published": "2016-04-03T18:30:00.000Z",
            "content_html": "\n<a class=\"header-link\" href=\"#react-and-modular-css\"><h2 id=\"react-and-modular-css\">React and modular CSS</h2></a>\n\n<p><a href=\"https://github.com/facebook/react\">React</a> provides an elegant component oriented approach towards structuring our User interface. However it is not very prescriptive of how to modularize the CSS. Many React core team members have <a href=\"https://speakerdeck.com/vjeux/react-css-in-js\">opined</a> that it is better to ditch css entirely and embrace js based inline styles. However that decision does not go well with a lot of frontend teams and makes things difficult for newcomers.</p>\n\n<p>However there many popular approaches for modularizing CSS that have evolved from community experience independent of React. Once such approach is <a href=\"http://getbem.com/\">BEM</a> which has proven to be quite popular and effective in practice.</p>\n\n<p>This post outlines a few functional utilities to effectively and succinctly use BEM alongside React.</p>\n\n<a class=\"header-link\" href=\"#composing-class-names\"><h2 id=\"composing-class-names\">Composing class names</h2></a>\n\n<p>While ES6 template strings provide a decent solution for string interpolation, it becomes cumbersome when we assign/toggle many classnames based on props or state variables. <a href=\"https://github.com/JedWatson/classnames\">JedWatson/classnames</a> is a nifty functional utility that alleviates some of this pain. Some examples directly taken from the <a href=\"https://github.com/JedWatson/classnames/blob/master/README.md\">README</a> illustrate the use case very well:</p>\n<div class=\"highlight\"><pre><code class=\"javascript language-javascript\" data-lang=\"javascript\"><span class=\"nx\">classNames</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">);</span> <span class=\"c1\">// =&gt; 'foo bar'</span>\n<span class=\"nx\">classNames</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">&#125;);</span> <span class=\"c1\">// =&gt; 'foo bar'</span>\n<span class=\"nx\">classNames</span><span class=\"p\">(&#123;</span> <span class=\"s1\">'foo-bar'</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">&#125;);</span> <span class=\"c1\">// =&gt; 'foo-bar'</span>\n<span class=\"nx\">classNames</span><span class=\"p\">(&#123;</span> <span class=\"s1\">'foo-bar'</span><span class=\"o\">:</span> <span class=\"kc\">false</span> <span class=\"p\">&#125;);</span> <span class=\"c1\">// =&gt; ''</span>\n<span class=\"nx\">classNames</span><span class=\"p\">(&#123;</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">&#125;,</span> <span class=\"p\">&#123;</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">&#125;);</span> <span class=\"c1\">// =&gt; 'foo bar'</span>\n<span class=\"nx\">classNames</span><span class=\"p\">(&#123;</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">&#125;);</span> <span class=\"c1\">// =&gt; 'foo bar'</span>\n\n<span class=\"c1\">// lots of arguments of various types</span>\n<span class=\"nx\">classNames</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">duck</span><span class=\"o\">:</span> <span class=\"kc\">false</span> <span class=\"p\">&#125;,</span> <span class=\"s1\">'baz'</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span> <span class=\"nx\">quux</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">&#125;);</span> <span class=\"c1\">// =&gt; 'foo bar baz quux'</span>\n\n<span class=\"c1\">// other falsy values are just ignored</span>\n<span class=\"nx\">classNames</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span> <span class=\"nx\">baz</span><span class=\"o\">:</span> <span class=\"kc\">null</span> <span class=\"p\">&#125;,</span> <span class=\"s1\">''</span><span class=\"p\">);</span> <span class=\"c1\">// =&gt; 'bar 1'</span>\n</code></pre></div>\n<a class=\"header-link\" href=\"#eliminating-redundancy-in-class-names-using-css-precompilers\"><h2 id=\"eliminating-redundancy-in-class-names-using-css-precompilers\">Eliminating redundancy in class names using CSS precompilers</h2></a>\n\n<p>CSS precompilers like <a href=\"http://sass-lang.com/\">SASS</a> and <a href=\"http://lesscss.org/\">LESS</a> allow us to augment the parent context in included scope using ampersand (<code>&amp;</code>) prefix. This significantly helps towards keeping our stylesheets DRY:</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">.block &#123;\n    background: white;\n\n    &amp;__element-one &#123;\n        border-bottom: 1px solid red;\n\n        &amp;--modifier-one &#123;\n            color: red;\n        &#125;\n\n    &#125;\n&#125;\n</code></pre></div>\n<a class=\"header-link\" href=\"#eliminating-redundancy-in-class-names-in-react-components\"><h2 id=\"eliminating-redundancy-in-class-names-in-react-components\">Eliminating redundancy in class names in react components</h2></a>\n\n<p><a href=\"https://www.npmjs.com/package/bem-classname\"><code>bem-classname</code></a> is a nifty utility that allows us to eliminate the redundancy while assigning classnames to DOM elements.</p>\n\n<p>The canonical approach is to pass the block, element and modifier names to the function exposed by the utility:</p>\n<div class=\"highlight\"><pre><code class=\"javascript language-javascript\" data-lang=\"javascript\"><span class=\"nx\">bemClassName</span><span class=\"p\">(</span><span class=\"s1\">'block'</span><span class=\"p\">,</span> <span class=\"s1\">'element'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'awesome'</span><span class=\"p\">]);</span> <span class=\"c1\">// block__element block__element--awesome</span>\n</code></pre></div>\n<p>However the function can also be bound to a block context allowing us to strip away some of the boilerplate:</p>\n<div class=\"highlight\"><pre><code class=\"text language-text\" data-lang=\"text\">import React from 'react'\nimport bem from 'bem-classname'\n\nconst Home = () =&gt; (\n  &lt;div className=&#123;className()&#125;&gt;\n    &lt;h1 className=&#123;className('header')&#125;&gt; Lorefnon &lt;/h1&gt;\n    &lt;div className=&#123;className('description')&#125;&gt;\n      Full Stack Web Application Developer\n    &lt;/div&gt;\n  &lt;/div&gt;\n)\n\nexport default Home\n\n// Private:\n\nconst className = bem.bind(null, 'Home')\n</code></pre></div>\n<p>The above stateless component generates the following markup:</p>\n<div class=\"highlight\"><pre><code class=\"html language-html\" data-lang=\"html\">  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"Home\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"Home__header\"</span><span class=\"nt\">&gt;</span> Lorefnon <span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"Home__description\"</span><span class=\"nt\">&gt;</span>\n      Full Stack Web Application Developer\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n<p>Not that BEM does not restrict us to one block/element per node. So a single node can represent multiple blocks. In such cases it is helpful to combine the aforementioned two utilities.</p>\n\n<a class=\"header-link\" href=\"#compressing-classnames-in-production\"><h2 id=\"compressing-classnames-in-production\">Compressing classnames in production</h2></a>\n\n<p>While BEM is very useful from a developer perspective as it eliminates the tedium of dealing with CSS specificity to a significant extent - however it has been crticised for the elaborate classnames which contribute towards increased size of HTML &amp; CSS files.</p>\n\n<p>If your use case really demands this level of optimization, then there are utilities like <a href=\"https://www.npmjs.com/package/grunt-class-id-minifier\">grunt-class-id-minifier</a> which can compress these class names as a part of the build process.</p>\n\n<p>The plugin generates a mapping file which we can consume in our components as a normal javascript module.</p>\n<div class=\"highlight\"><pre><code class=\"javascript language-javascript\" data-lang=\"javascript\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">&#123;</span>\n    <span class=\"k\">return</span> <span class=\"p\">&#123;</span>\n        <span class=\"s2\">\"Home__header\"</span><span class=\"o\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Home__description\"</span><span class=\"o\">:</span> <span class=\"s2\">\"b\"</span>\n    <span class=\"p\">&#125;;</span>\n<span class=\"p\">&#125;);</span>\n</code></pre></div>\n<div class=\"highlight\"><pre><code class=\"javascript language-javascript\" data-lang=\"javascript\"><span class=\"kr\">import</span> <span class=\"nx\">mapper</span> <span class=\"nx\">from</span> <span class=\"s1\">'./map.js'</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">_className</span> <span class=\"o\">=</span> <span class=\"nx\">bem</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"s1\">'Home'</span><span class=\"p\">)</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&#123;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">_className</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"nx\">mapper</span><span class=\"p\">[</span><span class=\"nx\">c</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">c</span>\n<span class=\"p\">&#125;</span>\n</code></pre></div>\n",
            "tags": [
                "Javascript",
                "CSS"
            ]
        }
    ]
}