<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Icicles of Thought â€¢ Posts by &#34;functional programming&#34; tag</title>
        <link>https://lorefnon.me</link>
        <description></description>
        <language>en</language>
        <pubDate>Mon, 21 Sep 2015 00:00:00 +0000</pubDate>
        <lastBuildDate>Mon, 21 Sep 2015 00:00:00 +0000</lastBuildDate>
        <category>Javascript</category>
        <category>KnockoutJS</category>
        <category>Ruby</category>
        <category>EventMachine</category>
        <category>Websockets</category>
        <category>SQLite</category>
        <category>Jade</category>
        <category>Node.js</category>
        <category>Rails</category>
        <category>Emacs</category>
        <category>Gulp</category>
        <category>ActiveAdmin</category>
        <category>ActiveRecord</category>
        <category>Devise</category>
        <category>Integration</category>
        <category>ZSH</category>
        <category>Productivity Hacks</category>
        <category>OCR</category>
        <category>Design Patterns</category>
        <category>InfluxDB</category>
        <category>Grafana</category>
        <category>React</category>
        <category>Functional Programming</category>
        <category>ES6</category>
        <category>Helm</category>
        <category>SPF</category>
        <category>CSS</category>
        <category>Redux</category>
        <category>Redux-loop</category>
        <category>Frontend</category>
        <category>Vagrant</category>
        <category>Clojure</category>
        <category>Hashicorp</category>
        <category>Typescript</category>
        <category>ReasonML</category>
        <category>Next.js</category>
        <category>Koa</category>
        <category>Apollo</category>
        <category>GraphQL</category>
        <category>MongoDB</category>
        <category>Automerge</category>
        <category>CRDT</category>
        <category>SVG</category>
        <category>VSCode</category>
        <category>Comlink</category>
        <category>Web-workers</category>
        <category>io-ts</category>
        <category>MobX</category>
        <category>MobX-State-Tree</category>
        <category>Routing</category>
        <category>HAR</category>
        <category>Jq</category>
        <category>Lit-html</category>
        <category>Stimulus</category>
        <category>Kotlin</category>
        <category>Vert.X</category>
        <category>Vert.X-Web</category>
        <category>Backend-development</category>
        <category>API-development</category>
        <category>Java</category>
        <category>JOOQ</category>
        <category>Ruby on Rails</category>
        <category>Liquibase</category>
        <category>tbls</category>
        <category>jOOQ</category>
        <category>Vue</category>
        <category>TypeScript</category>
        <category>Gradle</category>
        <category>Spring</category>
        <category>Spring-Boot</category>
        <category>gRPC</category>
        <category>Redis</category>
        <category>Database</category>
        <category>Exposed</category>
        <category>vim</category>
        <item>
            <guid isPermalink="true">https://lorefnon.me/2015/09/21/react-and-livescript-in-harmony.html</guid>
            <title>React and Livescript in harmony</title>
            <link>https://lorefnon.me/2015/09/21/react-and-livescript-in-harmony.html</link>
            <category>Javascript</category>
            <category>React</category>
            <category>Functional Programming</category>
            <pubDate>Mon, 21 Sep 2015 00:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Overview&#34;&gt;&lt;a href=&#34;#Overview&#34; class=&#34;headerlink&#34; title=&#34;Overview&#34;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;http://livescript.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Livescript&lt;/a&gt; is a programming language that compiles to readable javascript (similar to coffeescript) and provides language level facilities to &lt;a href=&#34;http://livescript.net/#inspiration&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;encourage&lt;/a&gt; functional programming. &lt;a href=&#34;https://facebook.github.io/react/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;React.js&lt;/a&gt; is a user interface library from &lt;a href=&#34;https://facebook.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;facebook&lt;/a&gt; that uses &lt;a href=&#34;http://calendar.perfplanet.com/2013/diff/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;intelligent heuristics&lt;/a&gt; for efficient DOM updates, simplifying the process of building data driven applications. This post outlines how the two can play well together, and tries to demostrate how livescript allows us write much more compact and succinct code. Basic familiarity with both of them is assumed.&lt;/p&gt;
&lt;p&gt;To begin with let us see what a basic component looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;application-container&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;br&gt;

&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;ContactList = React.create-&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
  render: -&amp;gt;
    React.create-element &lt;span class=&#34;hljs-string&#34;&gt;\ul,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
      React.create-element &lt;span class=&#34;hljs-string&#34;&gt;\li,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, contact.name

el = React.create-element ContactList, contacts: [
  * name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
  * name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
]

React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images/Screen Shot 2015-09-21 at 12.42.18 pm.png&#34;&gt;

&lt;p&gt;This is very similar to what we would have written if we were using vanilla javascript. The only primary advantages are indentation based nesting, elimination of a lot of superfluous syntax - braces and parenthesis and implicit returns. However we can do much better than this.&lt;/p&gt;
&lt;p&gt;Because Livescript was forked from Coffeescript, it inherits Coffeescript&amp;#39;s class syntax which we can use to extend &lt;code&gt;React.Component&lt;/code&gt;. However the benefits of doing so are pretty-much marginal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ContactList&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;React&lt;/span&gt;.&lt;span class=&#34;hljs-title&#34;&gt;Component&lt;/span&gt;&lt;/span&gt;

  render: -&amp;gt;
    React.create-element &lt;span class=&#34;hljs-string&#34;&gt;\ul,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
      React.create-element &lt;span class=&#34;hljs-string&#34;&gt;\li,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, contact.name&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that we may notice is that the above code does not use &lt;a href=&#34;https://facebook.github.io/react/docs/jsx-in-depth.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;JSX&lt;/a&gt;. While yes, it is &lt;a href=&#34;https://github.com/facebook/react/issues/47#issuecomment-18877423&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;possible&lt;/a&gt; to use JSX with livescript using backticks to escape xml constructs and then passing the generated js to babel, it is a hack we better forgo. As we will see soon, livescript native constructs allow for much more succinct expressions than the xml boilerplate that comes JSX.&lt;/p&gt;
&lt;p&gt;Livescript&amp;#39;s feature that almost everything is a expression is particularly helpful when we have conditional logic in our dom generation code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;element = React~create-element

ContactList = React.create-&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;do&lt;/span&gt;&lt;/span&gt;

  render: -&amp;gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\ul,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
      element &lt;span class=&#34;hljs-string&#34;&gt;\li,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;,
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.email
          element &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;contact.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, contact.name
        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;
          contact.name

el = element ContactList, contacts: [
  * name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
  * name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
    email: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;albus@hogwarts.magic&amp;#x27;&lt;/span&gt;
]

React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images/Screen Shot 2015-09-21 at 12.42.05 pm.png&#34;&gt;

&lt;p&gt;When the render function becomes complex, it is often more readable to use livescript&amp;#39;s pipe operator to chain the operations. This is particularly handy in conjugation with utility libraries geared towards functional programming - the example below uses &lt;a href=&#34;http://ramdajs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Ramda&lt;/a&gt;. Other alternatives include &lt;a href=&#34;http://underscorejs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;underscore&lt;/a&gt;, &lt;a href=&#34;https://lodash.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;lodash&lt;/a&gt;, &lt;a href=&#34;http://www.preludels.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;prelude.ls&lt;/a&gt; etc.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;element = React~create-element

ContactList = React.create-&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;do&lt;/span&gt;&lt;/span&gt;

  render-avatar: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.avatar
    &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\img,&lt;/span&gt; src: contact.avatar, height: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;N/A&amp;#x27;&lt;/span&gt;

  render-label: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.email
    &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;contact.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, contact.name
    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, contact.name

  render-contact-row: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; key: contact.id, [
      element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @render-avatar contact
      element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @render-label contact
    ]

  render-head: -&amp;gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\thead,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, [
      element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, [
        element &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Avatar&amp;#x27;&lt;/span&gt;
        element &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Name&amp;#x27;&lt;/span&gt;
      ]
    ]

  render: -&amp;gt;
    @props.contacts
    |&amp;gt; R.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; @~render-contact-row
    |&amp;gt; &lt;span class=&#34;hljs-function&#34;&gt;~&amp;gt;&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\tbody,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
    |&amp;gt; &lt;span class=&#34;hljs-function&#34;&gt;~&amp;gt;&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\table,&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;-&lt;span class=&#34;hljs-title&#34;&gt;name&lt;/span&gt;: \&lt;span class=&#34;hljs-title&#34;&gt;contacts&lt;/span&gt; , [ @&lt;span class=&#34;hljs-title&#34;&gt;render-head&lt;/span&gt;!, &lt;span class=&#34;hljs-title&#34;&gt;it&lt;/span&gt; ]&lt;/span&gt;

el = element ContactList, contacts: [
  * id: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
    avatar: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://cdn.playbuzz.com/cdn/8de88741-d729-4319-aa46-e8a544a20439/f7cade9d-8daf-42b3-8839-3e0e1f3db283.jpeg&amp;#x27;&lt;/span&gt;
  * id: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
    email: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;albus@hogwarts.magic&amp;#x27;&lt;/span&gt;
]


React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images/Screen Shot 2015-09-21 at 2.15.15 pm.png&#34;&gt;

&lt;p&gt;It may be tempting to further shorten the functions taking advantage of livescript&amp;#39;s default argument &lt;code&gt;it&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;render-avatar: -&amp;gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.avatar
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\img,&lt;/span&gt; src: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.avatar, height: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;N/A&amp;#x27;&lt;/span&gt;

render-label: -&amp;gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.email
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.name
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.name

render-contact-row: -&amp;gt;
  element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; key: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.id, [
    element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @render-avatar &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @render-label &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
  ]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I strongly recommend against doing that, because having the arguments specified in the function signature upfront enhances readability.&lt;/p&gt;
&lt;p&gt;Also note that the top down construction flow composition can also be realized in javascript using Ramda&amp;#39;s &lt;code&gt;pipe&lt;/code&gt; but livescript just makes it simpler by providing a language level operator.&lt;/p&gt;
&lt;p&gt;For simpler components (which are just responsible for presenting something passed as props, and do not need lifecycle methods etc.) it may be useful to define a micro-component builder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;micro-component&lt;/span&gt; = &lt;span class=&#34;hljs-params&#34;&gt;(render)&lt;/span&gt;-&amp;gt;&lt;/span&gt; React.create-factory React.create-&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title&#34;&gt;render&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have that, it makes it a lot more easier for us to follow React&amp;#39;s recommendation of having lightweight modular components which can be easily composed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;ContactAvatar = micro-component -&amp;gt;
  &amp;#123; contact &amp;#125; = @props
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.avatar
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\img,&lt;/span&gt; src: contact.avatar, height: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;N/A&amp;#x27;&lt;/span&gt;

ContactLabel = micro-component -&amp;gt;
  &amp;#123; contact &amp;#125; = @props
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.email
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;contact.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, contact.name
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, contact.name

ContactListRow = micro-component -&amp;gt;
  element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; key: @props.contact.id, [
    element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, ContactAvatar @props
    element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, ContactLabel @props
  ]

ContactList = micro-component -&amp;gt;
  element &lt;span class=&#34;hljs-string&#34;&gt;\table,&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;-&lt;span class=&#34;hljs-title&#34;&gt;name&lt;/span&gt;: \&lt;span class=&#34;hljs-title&#34;&gt;contacts&lt;/span&gt;, [&lt;/span&gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\thead,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, [
      element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, [
        element &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Avatar&amp;#x27;&lt;/span&gt;
        element &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Name&amp;#x27;&lt;/span&gt;
      ]
    ]
    element &lt;span class=&#34;hljs-string&#34;&gt;\tbody,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; -&amp;gt; ContactListRow &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;
      contact: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
      key: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.id
  ]

el = ContactList contacts: [
  * id: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
    avatar: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://cdn.playbuzz.com/cdn/8de88741-d729-4319-aa46-e8a544a20439/f7cade9d-8daf-42b3-8839-3e0e1f3db283.jpeg&amp;#x27;&lt;/span&gt;
  * id: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
    email: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;albus@hogwarts.magic&amp;#x27;&lt;/span&gt;
]
React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Libraries like &lt;a href=&#34;https://github.com/mlmorg/react-hyperscript&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;&lt;code&gt;react-hyperscript&lt;/code&gt;&lt;/a&gt; may be used to further reduce the dom construction boilerplate :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;
&lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;! &amp;#123; react-hyperscript: h, react: React &amp;#125;

ContactAvatar = micro-component -&amp;gt;
  &amp;#123; contact &amp;#125; = @props
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.avatar
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; h &lt;span class=&#34;hljs-string&#34;&gt;\img,&lt;/span&gt; src: contact.avatar, height: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; h &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;N/A&amp;#x27;&lt;/span&gt;

ContactLabel = micro-component -&amp;gt;
  &amp;#123; contact &amp;#125; = @props
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.email
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; h &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;contact.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, contact.name
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; h &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; contact.name

ContactListRow = micro-component -&amp;gt;
  h &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; key: @props.contact.id, [
    h &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; ContactAvatar @props
    h &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; ContactLabel @props
  ]

ContactList = micro-component -&amp;gt;
  h &lt;span class=&#34;hljs-string&#34;&gt;\table.contacts,&lt;/span&gt; [
    h &lt;span class=&#34;hljs-string&#34;&gt;\thead,&lt;/span&gt; [
      h &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; [
        h &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Avatar&amp;#x27;&lt;/span&gt;
        h &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Name&amp;#x27;&lt;/span&gt;
      ]
    ]
    h &lt;span class=&#34;hljs-string&#34;&gt;\tbody,&lt;/span&gt; @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; -&amp;gt; ContactListRow &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;
      contact: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
      key: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.id
  ]

el = ContactList contacts: [
  * id: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
    avatar: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://cdn.playbuzz.com/cdn/8de88741-d729-4319-aa46-e8a544a20439/f7cade9d-8daf-42b3-8839-3e0e1f3db283.jpeg&amp;#x27;&lt;/span&gt;
  * id: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
    email: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;albus@hogwarts.magic&amp;#x27;&lt;/span&gt;
]
React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apart from getting rid of null for attribute hashes, hyperscript is particularly useful for shorter syntax for class names and ids. Also it insulates our codebase against changes in the DOM builder API, which have happened in past.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
