<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lorefnon.me</id>
    <title>Icicles of Thought â€¢ Posts by &#34;knockoutjs&#34; tag</title>
    <link href="https://lorefnon.me" />
    <updated>2015-08-24T00:00:00.000Z</updated>
    <category term="Javascript" />
    <category term="KnockoutJS" />
    <category term="Ruby" />
    <category term="EventMachine" />
    <category term="Websockets" />
    <category term="SQLite" />
    <category term="Jade" />
    <category term="Node.js" />
    <category term="Rails" />
    <category term="Emacs" />
    <category term="Gulp" />
    <category term="ActiveAdmin" />
    <category term="ActiveRecord" />
    <category term="Devise" />
    <category term="Integration" />
    <category term="ZSH" />
    <category term="Productivity Hacks" />
    <category term="OCR" />
    <category term="Design Patterns" />
    <category term="InfluxDB" />
    <category term="Grafana" />
    <category term="React" />
    <category term="Functional Programming" />
    <category term="ES6" />
    <category term="Helm" />
    <category term="SPF" />
    <category term="CSS" />
    <category term="Redux" />
    <category term="Redux-loop" />
    <category term="Frontend" />
    <category term="Vagrant" />
    <category term="Clojure" />
    <category term="Hashicorp" />
    <category term="Typescript" />
    <category term="ReasonML" />
    <category term="Next.js" />
    <category term="Koa" />
    <category term="Apollo" />
    <category term="GraphQL" />
    <category term="MongoDB" />
    <category term="Automerge" />
    <category term="CRDT" />
    <category term="SVG" />
    <category term="VSCode" />
    <category term="Comlink" />
    <category term="Web-workers" />
    <category term="io-ts" />
    <category term="MobX" />
    <category term="MobX-State-Tree" />
    <category term="Routing" />
    <category term="HAR" />
    <category term="Jq" />
    <category term="Lit-html" />
    <category term="Stimulus" />
    <category term="Kotlin" />
    <category term="Vert.X" />
    <category term="Vert.X-Web" />
    <category term="Backend-development" />
    <category term="API-development" />
    <category term="Java" />
    <category term="JOOQ" />
    <category term="Ruby on Rails" />
    <category term="Liquibase" />
    <category term="tbls" />
    <category term="jOOQ" />
    <category term="Vue" />
    <category term="TypeScript" />
    <category term="Gradle" />
    <category term="Spring" />
    <category term="Spring-Boot" />
    <category term="gRPC" />
    <category term="Redis" />
    <category term="Database" />
    <category term="Exposed" />
    <entry>
        <id>https://lorefnon.me/2015/08/24/smarter-knockout-applications-with-es-next.html</id>
        <title>Smarter knockout applications with ES6/7</title>
        <link rel="alternate" href="https://lorefnon.me/2015/08/24/smarter-knockout-applications-with-es-next.html"/>
        <content type="html">&lt;h1 id=&#34;Overview&#34;&gt;&lt;a href=&#34;#Overview&#34; class=&#34;headerlink&#34; title=&#34;Overview&#34;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;This post is an outline of ES6/7 features that we can leverage today in our &lt;a href=&#34;http://knockoutjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Knockout&lt;/a&gt; based applications to make them more maintainable.&lt;/p&gt;
&lt;p&gt;Thanks to powerful and reliable transpilers like &lt;a href=&#34;http://babeljs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Babel&lt;/a&gt; we don&amp;#39;t have to wait for mass adoption across browser vendors, to try out features from next generation javascript. While this post is essentially an overview written in a specific context, ie. Knockout applications, I encourage readers to refer to excellent online resources like &lt;a href=&#34;https://leanpub.com/javascriptallongesix&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Javascript Allonge&lt;/a&gt; for a broader coverage.&lt;/p&gt;
&lt;h2 id=&#34;View-Models-as-ES-6-classes&#34;&gt;&lt;a href=&#34;#View-Models-as-ES-6-classes&#34; class=&#34;headerlink&#34; title=&#34;View Models as ES 6 classes:&#34;&gt;&lt;/a&gt;View Models as ES 6 classes:&lt;/h2&gt;&lt;p&gt;View models are typically defined as javascript constructor functions. ES6 classes offer a bit of syntax sugar over prototypal inheritance and the outcome might appeal to people coming other object oriented languages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SomeViewModel&lt;/span&gt; &lt;/span&gt;&amp;#123;
  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName = ko.observable();
  &amp;#125;
&amp;#125;

ko.components.register(&amp;#123;
  &lt;span class=&#34;hljs-attr&#34;&gt;viewModel&lt;/span&gt;: SomeViewModel,
  &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;lt;div data-bind=&amp;quot;text: firstName&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#x27;&lt;/span&gt;
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Arrow-functions-in-computed-properties&#34;&gt;&lt;a href=&#34;#Arrow-functions-in-computed-properties&#34; class=&#34;headerlink&#34; title=&#34;Arrow functions in computed properties:&#34;&gt;&lt;/a&gt;Arrow functions in computed properties:&lt;/h2&gt;&lt;p&gt;In computed properties it is more often than not desirable that the context of function be the same as that of the outer function. Patterns like &lt;code&gt;var self = this&lt;/code&gt; have been adopted widely for situations like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SomeViewModel&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;
  &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName = ko.observable();
  &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName = ko.observable();
  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;;
  &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.fullName = ko.computed(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; self.firstName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; + self.lastName();
  &amp;#125;);
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrow functions simplify this use case by providing special syntax for functions which, as MDN &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;explains&lt;/a&gt; it, capture the this value of the enclosing context&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SomeViewModel&lt;/span&gt; &lt;/span&gt;&amp;#123;
  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName = ko.observable();
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName = ko.observable();
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.fullName = ko.computed(&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;
      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; + &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName();
    &amp;#125;);
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or for smaller functions we can reduce the verbosity even further:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SomeViewModel&lt;/span&gt; &lt;/span&gt;&amp;#123;
  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName = ko.observable();
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName = ko.observable();
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.fullName = ko.computed(&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; + &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName());
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Imports-for-code-organization&#34;&gt;&lt;a href=&#34;#Imports-for-code-organization&#34; class=&#34;headerlink&#34; title=&#34;Imports for code organization:&#34;&gt;&lt;/a&gt;Imports for code organization:&lt;/h2&gt;&lt;p&gt;JS imports are the new standard approach to deal with modularization in JS code, and I can only anticipate &lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;more&lt;/a&gt; and &lt;a href=&#34;http://aurelia.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;more&lt;/a&gt; libraries moving to them from older patterns like &lt;a href=&#34;https://github.com/amdjs/amdjs-api/wiki/AMD&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;AMD&lt;/a&gt; or &lt;a href=&#34;http://wiki.commonjs.org/wiki/CommonJS&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;CommonJS&lt;/a&gt;. Babel can transpile imports to require invocations that follow AMD/CommonJS syntax so you can move to newer syntax progressively and continue using your existing loaders/bundlers. My personal recommendation for bundler is &lt;a href=&#34;http://webpack.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;webpack&lt;/a&gt; which offers interesting features like &lt;a href=&#34;http://webpack.github.io/docs/code-splitting.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Code splitting&lt;/a&gt; out of the box.&lt;/p&gt;
&lt;h2 id=&#34;Template-strings&#34;&gt;&lt;a href=&#34;#Template-strings&#34; class=&#34;headerlink&#34; title=&#34;Template strings&#34;&gt;&lt;/a&gt;Template strings&lt;/h2&gt;&lt;p&gt;Template strings make it easy to define small multi-line templates along side view models.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;ko.components.register(&amp;#123;
  viewModel: SomeViewModel,
  template:
    `&amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt; Hello friend, nice to meet you &amp;lt;/h1&amp;gt;
      &amp;lt;div&amp;gt;
        Dear &amp;lt;span data-bind=&amp;quot;text: firstName()&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; It is nice to meet you.
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;`
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although for larger templates I recommend using something like &lt;a href=&#34;https://github.com/webpack/raw-loader&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;webpack-raw-loader&lt;/a&gt; so you can write:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;ko.components.register(&amp;#123;
  &lt;span class=&#34;hljs-attr&#34;&gt;viewModel&lt;/span&gt;: SomeViewModel,
  &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./some_view_model.html&amp;#x27;&lt;/span&gt;)
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However larger templates more often than not indicate need for fine-grained modularization, so the above recommendation should be taken with a pinch of salt.&lt;/p&gt;
&lt;h2 id=&#34;ES7-Decorators-for-Component-registration&#34;&gt;&lt;a href=&#34;#ES7-Decorators-for-Component-registration&#34; class=&#34;headerlink&#34; title=&#34;ES7 Decorators for Component registration:&#34;&gt;&lt;/a&gt;ES7 Decorators for Component registration:&lt;/h2&gt;&lt;p&gt;If you have been keeping up with advancements with Angular 2.0, you may have noticed the use of annotations for component registration. Here is an example from their &lt;a href=&#34;https://angular.io/docs/js/latest/quickstart.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;quick start tutorial&lt;/a&gt; showing how annotations go hand in hand with the new class syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;// Annotation section
@Component(&amp;#123;
  selector: &amp;#x27;my-app&amp;#x27;
&amp;#125;)
@View(&amp;#123;
  template: &amp;#x27;&amp;lt;h1&amp;gt;Hello &amp;#123;&amp;#123; name &amp;#125;&amp;#125;&amp;lt;/h1&amp;gt;&amp;#x27;
&amp;#125;)
// Component controller
class MyAppComponent &amp;#123;
  name: string;
  constructor() &amp;#123;
    this.name = &amp;#x27;Alice&amp;#x27;;
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While I refer to &lt;a href=&#34;https://github.com/wycats/javascript-decorators&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;this excellent writeup&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wycats&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Yehuda Katz&lt;/a&gt; on javascript decorators for an indepth overview, the following snippet is a quick overview as to how we can leverage javascript decorators to handle component registration in knockout:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;function Component(params) &amp;#123;
  return function(viewModel) &amp;#123;
    ko.components.register(params.name, &amp;#123;
      viewModel: viewModel,
      template: params.template
    &amp;#125;)
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once our &lt;code&gt;Component&lt;/code&gt; decorator has been defined we can simply use it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;@Component(&amp;#123;
  name: &amp;#x27;my-app-component&amp;#x27;,
  template:
    `&amp;lt;div&amp;gt;
      ...
    &amp;lt;/div&amp;gt;`
&amp;#125;)
class MyAppViewModel &amp;#123;
  constructor() &amp;#123;
    ...
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may be tempted to use the &lt;code&gt;target.name&lt;/code&gt; to enforce some module naming conventions, but before you tread that way please be aware of lack of IE support for &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Function#name&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This concludes this overview for now, though there is a lot to be explored in next generation javascript beyond this basic introduction. As always, I welcome any suggestions or requests for improvement in the comments section below.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="KnockoutJS" />
        <updated>2015-08-24T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2012/08/12/effectively-debugging-knockoutjs-applications.html</id>
        <title>Effectively debugging KnockoutJS applications.</title>
        <link rel="alternate" href="https://lorefnon.me/2012/08/12/effectively-debugging-knockoutjs-applications.html"/>
        <content type="html">&lt;p&gt;This post aims to provide some explanation about the lifecycle of dynamic data-bindings in KnockoutJS to  ease debugging of KO applications .&lt;/p&gt;
&lt;p&gt;A developer can remain perfectly oblivious of all that is going on under the hood and let the magic of declarative bindings do all the heavy-lifting of data-synchronization and it all works fine untill something unexpected happens. What now ? While most of the bugs in code can be directly resolved by inspecting the data-bind attributes manually, but if the complexity of application grows beyond a level an understanding of what goes on under the sheets becomes necessary.&lt;/p&gt;
&lt;p&gt;While UI does appear to be getting magically updated when the models change, in reality the code underneath is all plain javascript. So what happens when something doesnâ€™t turn out to be as expected ? Where do we start debugging from ?&lt;/p&gt;
&lt;p&gt;The first and most obvious point of commencement is the observable. While we can (and sometimes might need to) begin from the observable function and dig down, debugging process is much simplified if we have a bit of familiarity with the way KO works internally. At this point I would like to underline that KO code is written very well and in general is easy to understand.&lt;/p&gt;
&lt;p&gt;This knowledge is also helpful for development of custom bindings.&lt;/p&gt;
&lt;p&gt;KO relies on bindingHandlers to manage bindings. So corresponding to every built in binding (eg. visible, text, html, value etc.)  we have a bindingHandler which has the same name. The text  binding is handled by a function &lt;strong&gt;ko.bindingHandlers.text&lt;/strong&gt;, the value binding by &lt;strong&gt;ko.bindingHandlers.value&lt;/strong&gt; and likewise.&lt;/p&gt;
&lt;p&gt;Let us checkout a simple example :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jquery-1.7.1.min.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;knockout-latest.debug.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;index.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
      Please Enter your name :
      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;data-bind&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;value:name&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
      Hello &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;data-bind&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text: name&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;$(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; vmodel = &amp;#123;
        &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: ko.observable(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Lorefnon&amp;quot;&lt;/span&gt;)
    &amp;#125;
    ko.applyBindings(vmodel);
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two binders involved : text-binder and value-binder. Let us inspect the &lt;strong&gt;ko.bindingHandlers.text&lt;/strong&gt;in javascript.   It has a single member : update function. Yes, you guessed it right â€“ this is the function that is called when the span is to be updated. Let us checkout what it does :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;ko.bindingHandlers[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;text&amp;#x27;&lt;/span&gt;] = &amp;#123;
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;update&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;element, valueAccessor&lt;/span&gt;) &lt;/span&gt;&amp;#123;
        ko.utils.setTextContent(element, valueAccessor());
    &amp;#125;
&amp;#125;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is straightforward and self explanatory. You can just add a breakpoint to the update function and it will be triggered every time that particular DOM node is updated. As expected the actual DOM manipulation takes place in the &lt;strong&gt;ko.utils.setTextContent&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;setTextContent: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;element, textContent&lt;/span&gt;) &lt;/span&gt;&amp;#123;
     &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; value = ko.utils.unwrapObservable(textContent);
     &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ((value === &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) || (value === &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;)) value = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;
     &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;innerText&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; element ? element.innerText = value : element.textContent = value;
     &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ieVersion &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;) &amp;#123;
         &lt;span class=&#34;hljs-comment&#34;&gt;// Believe it or not, this actually fixes an IE9 rendering bug&lt;/span&gt;
         &lt;span class=&#34;hljs-comment&#34;&gt;// (See https://github.com/SteveSanderson/knockout/issues/209)&lt;/span&gt;
         element.style.display = element.style.display;
     &amp;#125;
&amp;#125;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What about the other side of the code : What do you do to intercept a change in a form element ? Let us checkout the &lt;strong&gt;ko.bindingHandlers.value&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;/images/ko.png&#34; /&gt;

&lt;p&gt;As you probably have already guessed, the init function creates the bindings to intercept any change in the form element. The actual handler that is called each time when the input element changes its value is the valueUpdateHandler function defined inside init :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; valueUpdateHandler = &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;
     &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; modelValue = valueAccessor();
     &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; elementValue = ko.selectExtensions.readValue(element);
     ko.jsonExpressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;value&amp;#x27;&lt;/span&gt;, elementValue, &lt;span class=&#34;hljs-comment&#34;&gt;/* checkIfDifferent: */&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;);
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;elementValue holds the changed value which is in the next line synced back.&lt;/p&gt;
&lt;p&gt;So here is an overview of how bindings work : when you call &lt;strong&gt;ko.applyBindings&lt;/strong&gt; the library traverses the DOM hunting for data-bind attributes. When it finds a data-bind attribute â€“ it first of all figures out which bindingHandler is to be called from the part of data-bind attribute value that preceded the colon. The corresponding handlerâ€™s update method set to be called each time the value of corresponding view model attribute changes and it is the responsibility of the update method to alter the DOM node as directed by the data-bind specification.&lt;/p&gt;
&lt;p&gt;For those nodes which are editable by user (ie. the form elements) the corresponding bindingHandlers also have an init method which sets up the bindings for reverse synchronization.&lt;/p&gt;
&lt;p&gt;This summarizes the way data-bindings work under the hood. I hope that this post helps to improve your understanding of KO library.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="KnockoutJS" />
        <updated>2012-08-12T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2012/08/11/debunking-10-common-knockoutjs-myths.html</id>
        <title>Debunking 10 common KnockoutJS myths</title>
        <link rel="alternate" href="https://lorefnon.me/2012/08/11/debunking-10-common-knockoutjs-myths.html"/>
        <content type="html">&lt;p&gt;It seems that among the developer community, there exist multiple misconceptions regarding KnockoutJS. This is particularly true for developers who are not familiar with the MVVM pattern or declarative style followed by Knockout. This posts aims to clarify some of these misconceptions.&lt;/p&gt;
&lt;p&gt;I was particularly motivated to write this post after &lt;a href=&#34;http://stackoverflow.com/questions/5112899/knockout-js-vs-backbone-js-vs/6340870#6340870&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;this discussion&lt;/a&gt; at Stackoverflow.&lt;/p&gt;
&lt;h1 id=&#34;KnockoutJS-is-tied-to-specific-server-side-back-ends&#34;&gt;&lt;a href=&#34;#KnockoutJS-is-tied-to-specific-server-side-back-ends&#34; class=&#34;headerlink&#34; title=&#34;KnockoutJS is tied to specific server side back-ends.&#34;&gt;&lt;/a&gt;KnockoutJS is tied to specific server side back-ends.&lt;/h1&gt;&lt;p&gt;This mainly stems from the similarities of the declarative binding style used in KO with the WPF declarative bindings. Since I do not work with Microsoft technologies, I can not really assert if the WPF declarative binding style was indeed an inspiration behind KO, however I would like to highlight that KO is strictly a client side library and an ASP.net backend (or any specific server side backend for that matter) is not mandatory. In fact KO will work happily with no server-side code at all. I strongly recommend people to checkout the basic examples presented in the site using jsfiddle and convince yourself that this is indeed the case.&lt;/p&gt;
&lt;p&gt;On a sidenote, there do exist libraries that aim to provide seamless integration layers between KO and ASP.net MVC eg. KnockoutMVC which claims to facilitate creation of complex client side applications without writing a single line of javascript. I strongly advocate against using such esoteric frameworks.&lt;/p&gt;
&lt;h1 id=&#34;KnockoutJS-has-hard-wired-dependency-on-jQuery-and-jQuery-templating-plugin&#34;&gt;&lt;a href=&#34;#KnockoutJS-has-hard-wired-dependency-on-jQuery-and-jQuery-templating-plugin&#34; class=&#34;headerlink&#34; title=&#34;KnockoutJS has hard-wired dependency on jQuery and jQuery-templating plugin.&#34;&gt;&lt;/a&gt;KnockoutJS has hard-wired dependency on jQuery and jQuery-templating plugin.&lt;/h1&gt;&lt;p&gt;Again this is absolutely incorrect. The core functionality provided by KO is framework agonistic. And as far as templating is concerned integrating of third party templating engines is not very difficult. Since KO is open source you can probably find support for your favourite templating engine already available. For example the ko.mustache extension by Marcin Wtorkowski adds support for mustache templating engine.&lt;/p&gt;
&lt;h1 id=&#34;Because-of-the-level-of-abstraction-offered-by-declarative-bindings-KnockoutJS-is-difficult-to-debug&#34;&gt;&lt;a href=&#34;#Because-of-the-level-of-abstraction-offered-by-declarative-bindings-KnockoutJS-is-difficult-to-debug&#34; class=&#34;headerlink&#34; title=&#34;Because of the level of abstraction offered by declarative bindings, KnockoutJS is difficult to debug.&#34;&gt;&lt;/a&gt;Because of the level of abstraction offered by declarative bindings, KnockoutJS is difficult to debug.&lt;/h1&gt;&lt;p&gt;While it is true that KO hides away the boiler plate code for data synchronization and the users are concerned with declaring the bindings in attributes, when things go wrong (either at your end or if you happen to discover a bug in the library) you will have to dig into the layers of abstraction. Fortunately in case of KO, the abstractions are not very convoluted and a basic understanding of the binding management lifecycle makes debugging pretty easy. KO source code is well written and not very difficult to understand, although that certainly is a subjective opinion.&lt;/p&gt;
&lt;p&gt;I plan to highlight some guidelines for debugging KO applications in a future post.&lt;/p&gt;
&lt;h1 id=&#34;It-is-difficult-to-properly-test-a-KnockoutJS-application&#34;&gt;&lt;a href=&#34;#It-is-difficult-to-properly-test-a-KnockoutJS-application&#34; class=&#34;headerlink&#34; title=&#34;It is difficult to properly test a KnockoutJS application.&#34;&gt;&lt;/a&gt;It is difficult to properly test a KnockoutJS application.&lt;/h1&gt;&lt;p&gt;There is simply no reason for this to be true considering that KO is plain simple javascript. In particular KO is well tested and has a comprehensive test suite, which alleviates the developer from writing test cases for boilerplate code for managing data synchronizations. The domain logic is still javascript and KO does not abstract away any client-server interaction so testing the core of your application mostly involves testing your own javascript code only.&lt;/p&gt;
&lt;p&gt;Also, with a basic understanding of KO handlers, the bindingHandlers can be mocked, providing a greater control to the developer.&lt;/p&gt;
&lt;h1 id=&#34;KnockoutJS-applications-do-not-degrade-gracefully-in-absence-of-javascript&#34;&gt;&lt;a href=&#34;#KnockoutJS-applications-do-not-degrade-gracefully-in-absence-of-javascript&#34; class=&#34;headerlink&#34; title=&#34;KnockoutJS applications do not degrade gracefully in absence of javascript.&#34;&gt;&lt;/a&gt;KnockoutJS applications do not degrade gracefully in absence of javascript.&lt;/h1&gt;&lt;p&gt;Graceful degradation in absense of javascript depends on the way your application has been architectured. Although KO being a pure javascript library, does not offer any support for graceful degradation in absence of javascript, nevertheless unlike many of the competing technologies it does not hinder graceful degradation.&lt;/p&gt;
&lt;p&gt;To create a KO application that degrades gracefully, just ensure that the initial state of the page that is rendered by the server suffices to convey the information that a user should see in absence of javascript. Fallback mechanisms (eg simple forms and links) should be available that provide the complete (or partial) application functionality in absence of javascript. Then when you create your view models you can instantiate them from the data already available from the DOM and future data can be loaded via ajax without refreshing the page.&lt;/p&gt;
&lt;p&gt;A good example for this functionality can be a grid. The basic HTML page served by the server can contain a simple HTML table with support for traditional links for pagination. Then you can create your view models from the data present in the table ( or ajax if a bit of redundant data load does not matter for you) and utilize KO for interactive bindings.&lt;/p&gt;
&lt;p&gt;Since KO does not use special inline markup or custom html tags, but rather simple data-bind attributes which are anyways not visible in absence of javascript, it does not hinder graceful degradation.&lt;/p&gt;
&lt;h1 id=&#34;Although-simple-attribute-binding-works-well-designing-complex-interactive-UI-results-in-cluttered-code&#34;&gt;&lt;a href=&#34;#Although-simple-attribute-binding-works-well-designing-complex-interactive-UI-results-in-cluttered-code&#34; class=&#34;headerlink&#34; title=&#34;Although simple attribute-binding works well, designing complex interactive UI results in cluttered code.&#34;&gt;&lt;/a&gt;Although simple attribute-binding works well, designing complex interactive UI results in cluttered code.&lt;/h1&gt;&lt;p&gt;Again code organization is something that KO does not enforce upon you. A very nice way to make to code modular and easy to understand is to use custom bindings. Custom bindings are not something to be used as a last resort . Creating them is easy and utilizing them you can write very succinct code that is easily understandable and manageable. Infact properly using custom bindings can significantly improve performance as compared to several data-bind attributes for same property across several adjacent DOM nodes.&lt;/p&gt;
&lt;p&gt;A few people strongly believe that doing something slightly abnormal (somewhat different from the advertised use-cases) the developer has to go to great lengths in case of KnockoutJS. This is certainly not the case. KnockoutJS does an elegant job at data binding. Not only can the actual value stored in text nodes be mapped to JavaScript objects, practically any attribute and even individual styles can be mapped to JavaScript data structures. Combine with that the fact that mapping can be directed to dynamic objects which actually derive their data from other data structures and the excellent integration of KnockoutJS with jQuery templating system, EVERY single type of UI binding can be made in knockoutJS with lesser number of lines than backbone provided you craft your viewmodels and templates creatively.
7. Doing anything serious using KnockoutJS requires verbose inline scripts.&lt;/p&gt;
&lt;p&gt;This is also incorrect. Please read the above paragraph on properly using dynamic objects and custom bindings.&lt;/p&gt;
&lt;p&gt;Yes code like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;The item is &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;data-bind&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text: price() &amp;gt; 50 ? &amp;#x27;expensive&amp;#x27; : &amp;#x27;affordable&amp;#x27;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; today.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is certainly ugly. But you can simply define a custom attribute that depends on price using ko.computable and have that in the view-model. As a developer you already are smart enough to avoid embedding javascript application logic inside html. KO does not come in your way.&lt;/p&gt;
&lt;h1 id=&#34;KnockoutJS-does-not-offer-a-multitude-of-widgets&#34;&gt;&lt;a href=&#34;#KnockoutJS-does-not-offer-a-multitude-of-widgets&#34; class=&#34;headerlink&#34; title=&#34;KnockoutJS does not offer a multitude of widgets.&#34;&gt;&lt;/a&gt;KnockoutJS does not offer a multitude of widgets.&lt;/h1&gt;&lt;p&gt;This is absolutely correct. But KO noway advertises the same. It is essentially a data-binding library that does one thing and does it well. It is not a complete application SDK or UI framework.&lt;/p&gt;
&lt;h1 id=&#34;Integrating-KnockoutJS-with-a-restful-backend-is-difficult&#34;&gt;&lt;a href=&#34;#Integrating-KnockoutJS-with-a-restful-backend-is-difficult&#34; class=&#34;headerlink&#34; title=&#34;Integrating KnockoutJS with a restful backend is difficult.&#34;&gt;&lt;/a&gt;Integrating KnockoutJS with a restful backend is difficult.&lt;/h1&gt;&lt;p&gt;As I previously pointed out, KO does not abstract out client server interaction. In fact the management of your Model layer is left almost entirely to you. Having said that, if your restful backend makes data available as json, the backbone mapping plugin makes it trivial to sync server data with view models.&lt;/p&gt;
&lt;p&gt;If the structure of the data fetched from sever differs significantly from the way view models are organized, then you anyway have to write code for transforming the code.&lt;/p&gt;
&lt;p&gt;The knockout-rest plugin by Francesco Pontillo provides a very easy and intuitive way to integrate view-models with a restful backend.&lt;/p&gt;
&lt;h1 id=&#34;Using-libraries-like-KnockoutJS-have-serious-negative-impact-on-SEO&#34;&gt;&lt;a href=&#34;#Using-libraries-like-KnockoutJS-have-serious-negative-impact-on-SEO&#34; class=&#34;headerlink&#34; title=&#34;Using libraries like KnockoutJS have serious negative impact on SEO.&#34;&gt;&lt;/a&gt;Using libraries like KnockoutJS have serious negative impact on SEO.&lt;/h1&gt;&lt;p&gt;If you follow the guidelines presented above on graceful degradation then there is no reason why this should happen.&lt;/p&gt;
&lt;p&gt;Even if you are not concerned about graceful degradation, and your application is heavily dependent on Ajax based content fetching,  These  guidelines from Google, can make your website crawlable.&lt;/p&gt;
&lt;p&gt;I sincerely hope that this post was successful in removing many of the common misconceptions regarding KnockoutJS and I also hope that you will be able to appreciate the power of this fantastic library. Please leave your suggestions and opinions in the comments section below. Also if you have been working on a project that enhances or extends the capabilities of KnockoutJS please feel free to drop in a link.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="KnockoutJS" />
        <updated>2012-08-11T00:00:00.000Z</updated>
    </entry>
</feed>
