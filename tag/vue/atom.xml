<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lorefnon.me</id>
    <title>Icicles of Thought â€¢ Posts by &#34;vue&#34; tag</title>
    <link href="https://lorefnon.me" />
    <updated>2021-08-07T00:00:00.000Z</updated>
    <category term="Javascript" />
    <category term="KnockoutJS" />
    <category term="Ruby" />
    <category term="EventMachine" />
    <category term="Websockets" />
    <category term="SQLite" />
    <category term="Jade" />
    <category term="Node.js" />
    <category term="Rails" />
    <category term="Emacs" />
    <category term="Gulp" />
    <category term="ActiveAdmin" />
    <category term="ActiveRecord" />
    <category term="Devise" />
    <category term="Integration" />
    <category term="ZSH" />
    <category term="Productivity Hacks" />
    <category term="OCR" />
    <category term="Design Patterns" />
    <category term="InfluxDB" />
    <category term="Grafana" />
    <category term="React" />
    <category term="Functional Programming" />
    <category term="ES6" />
    <category term="Helm" />
    <category term="SPF" />
    <category term="CSS" />
    <category term="Redux" />
    <category term="Redux-loop" />
    <category term="Frontend" />
    <category term="Vagrant" />
    <category term="Clojure" />
    <category term="Hashicorp" />
    <category term="Typescript" />
    <category term="ReasonML" />
    <category term="Next.js" />
    <category term="Koa" />
    <category term="Apollo" />
    <category term="GraphQL" />
    <category term="MongoDB" />
    <category term="Automerge" />
    <category term="CRDT" />
    <category term="SVG" />
    <category term="VSCode" />
    <category term="Comlink" />
    <category term="Web-workers" />
    <category term="io-ts" />
    <category term="MobX" />
    <category term="MobX-State-Tree" />
    <category term="Routing" />
    <category term="HAR" />
    <category term="Jq" />
    <category term="Lit-html" />
    <category term="Stimulus" />
    <category term="Kotlin" />
    <category term="Vert.X" />
    <category term="Vert.X-Web" />
    <category term="Backend-development" />
    <category term="API-development" />
    <category term="Java" />
    <category term="JOOQ" />
    <category term="Ruby on Rails" />
    <category term="Liquibase" />
    <category term="tbls" />
    <category term="jOOQ" />
    <category term="Vue" />
    <category term="TypeScript" />
    <category term="Gradle" />
    <category term="Spring" />
    <category term="Spring-Boot" />
    <category term="gRPC" />
    <category term="Redis" />
    <category term="Database" />
    <category term="Exposed" />
    <category term="vim" />
    <category term="kotlin" />
    <category term="spring" />
    <category term="spring-security" />
    <category term="komapper" />
    <category term="spring-boot" />
    <category term="typescript" />
    <category term="zod" />
    <category term="ts-match" />
    <category term="ts-sql-query" />
    <entry>
        <id>https://lorefnon.me/2021/08/08/Vue-composition-api-and-type-safe-graphql-access/</id>
        <title>Vue composition API and type-safe GraphQL access</title>
        <link rel="alternate" href="https://lorefnon.me/2021/08/08/Vue-composition-api-and-type-safe-graphql-access/"/>
        <content type="html">&lt;h1 id=&#34;About-setup-script&#34;&gt;&lt;a href=&#34;#About-setup-script&#34; class=&#34;headerlink&#34; title=&#34;About setup script&#34;&gt;&lt;/a&gt;About setup script&lt;/h1&gt;&lt;p&gt;The &lt;a href=&#34;https://v3.vuejs.org/guide/composition-api-introduction.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;vue composition API&lt;/a&gt; is pretty cool, esp. with the recent addition of &lt;a href=&#34;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;setup script support&lt;/a&gt; in &lt;a href=&#34;https://blog.vuejs.org/posts/vue-3.2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Vue 3.2&lt;/a&gt; which drastically reduces unnecessary boilerplate when most of the logic is present in the setup function of the component.&lt;/p&gt;
&lt;p&gt;From the announcement post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; is a &lt;strong&gt;compile-time syntactic sugar&lt;/strong&gt; that greatly improves the ergonomics when using Composition API inside SFCs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;setup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; ref &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;vue&amp;#x27;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; color = &lt;span class=&#34;hljs-title function_&#34;&gt;ref&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; @&lt;span class=&#34;hljs-attr&#34;&gt;click&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;color = color === &amp;#x27;red&amp;#x27; ? &amp;#x27;green&amp;#x27; : &amp;#x27;red&amp;#x27;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    Color is: &amp;#123;&amp;#123; color &amp;#125;&amp;#125;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;GraphQL-through-Composition-API&#34;&gt;&lt;a href=&#34;#GraphQL-through-Composition-API&#34; class=&#34;headerlink&#34; title=&#34;GraphQL through Composition API&#34;&gt;&lt;/a&gt;GraphQL through Composition API&lt;/h1&gt;&lt;p&gt;With &lt;a href=&#34;https://v4.apollo.vuejs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;vue-apollo-composable&lt;/a&gt; we can use a composable API to access our GraphQL API which can take advantage of above support.&lt;/p&gt;
&lt;p&gt;Lastly, using &lt;a href=&#34;https://www.graphql-code-generator.com/docs/presets/gql-tag-operations&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;gql-tag-operations-preset&lt;/a&gt; we can ensure that we get type-safety while accessing resources over GraphQL.&lt;/p&gt;
&lt;p&gt;This combination works seamlessly and unlike previous codegen based approaches doesn&amp;#39;t require us to manually import types or functions generated from graphql files.&lt;/p&gt;
&lt;p&gt;The rest of this post is primarily an overview of the involved configuration.&lt;/p&gt;
&lt;h1 id=&#34;Dependencies&#34;&gt;&lt;a href=&#34;#Dependencies&#34; class=&#34;headerlink&#34; title=&#34;Dependencies&#34;&gt;&lt;/a&gt;Dependencies&lt;/h1&gt;&lt;p&gt;Currently, my preferred way to get started with Vue project is to scaffold it through vite (&lt;code&gt;yarn create vite&lt;/code&gt;) which internally uses the really fast &lt;a href=&#34;https://github.com/evanw/esbuild&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;esbuild&lt;/a&gt; native transpiler.&lt;/p&gt;
&lt;p&gt;Other build tools may require minor adjustment around import aliasing.&lt;/p&gt;
&lt;p&gt;Here is what our package.json looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;vite&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;vue-tsc --noEmit &amp;amp;&amp;amp; vite build&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;serve&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;vite preview&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;codegen:graphql&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;yarn run graphql-codegen -c graphql-codegen.yaml&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@apollo/client&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^3.4.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@graphql-typed-document-node/core&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^3.1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@vue/apollo-composable&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^4.0.0-alpha.14&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;graphql&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^15.5.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;graphql-tag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^2.12.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;vue&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^3.0.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;vue-router&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@app/gql&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;link:./src/gql&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@graphql-codegen/cli&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^2.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@graphql-codegen/gql-tag-operations-preset&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^1.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@graphql-codegen/typescript-graphql-request&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^4.0.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@vitejs/plugin-vue&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^1.4.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@vue/compiler-sfc&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^3.1.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;typescript&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^4.3.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;vite&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^2.5.0-beta.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;vue-tsc&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^0.2.2&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;Configuration-for-graphql-code-generator&#34;&gt;&lt;a href=&#34;#Configuration-for-graphql-code-generator&#34; class=&#34;headerlink&#34; title=&#34;Configuration for graphql-code-generator&#34;&gt;&lt;/a&gt;Configuration for graphql-code-generator&lt;/h1&gt;&lt;p&gt;We have a &lt;code&gt;codegen:graphql&lt;/code&gt; script configured above, which we can use to generate types for our GraphQL accessors.&lt;/p&gt;
&lt;p&gt;Here is what our &lt;code&gt;graphql-codegen.yaml&lt;/code&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;schema:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./schema/schema.graphqls&lt;/span&gt;
&lt;span class=&#34;hljs-attr&#34;&gt;documents:&lt;/span&gt;
  &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;src/**/*.ts&amp;#x27;&lt;/span&gt;
  &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;src/**/*.vue&amp;#x27;&lt;/span&gt;
  &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;!src/gql/**/*&amp;#x27;&lt;/span&gt;
&lt;span class=&#34;hljs-attr&#34;&gt;generates:&lt;/span&gt;
  &lt;span class=&#34;hljs-string&#34;&gt;./src/schema/generated/graphql.d.ts:&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;plugins:&lt;/span&gt;
      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;typescript&lt;/span&gt;
      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;typescript-operations&lt;/span&gt;
      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;typescript-graphql-request&lt;/span&gt;
  &lt;span class=&#34;hljs-string&#34;&gt;./src/gql/:&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;preset:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;gql-tag-operations-preset&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the docs for &lt;a href=&#34;https://www.graphql-code-generator.com/docs/presets/gql-tag-operations&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;gql-tag-operations-preset&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This preset generates typings for your inline gql function usages, without having to manually specify import statements for the documents. All you need to do is import your gql function and run codegen in watch mode.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since &lt;code&gt;yarn run&lt;/code&gt; forwards our arguments to the underlying scripts, to run the aforementioned watch mode, we can simply run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;yarn run codegen:graphql --watch&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will keep scanning our code for usage of graphql queries&amp;#x2F;mutations and generate corresponding types.&lt;/p&gt;
&lt;p&gt;We will look at some examples below.&lt;/p&gt;
&lt;h2 id=&#34;Import-aliasing&#34;&gt;&lt;a href=&#34;#Import-aliasing&#34; class=&#34;headerlink&#34; title=&#34;Import aliasing:&#34;&gt;&lt;/a&gt;Import aliasing:&lt;/h2&gt;&lt;p&gt;The last piece of setup we need to do is configuration for imports.&lt;/p&gt;
&lt;p&gt;This may get simplified in future, but as of this writing this needs to be done in both tsconfig.json (in case you are using typescript,  make typescript compiler &amp;amp; editor tooling happy) and vite config (to make vite happy).&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;{&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;{&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;esnext&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;esnext&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;strict&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;jsx&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;preserve&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;sourceMap&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;resolveJsonModule&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;esModuleInterop&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;esnext&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dom&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;paths&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;{&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;@app/gql&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./src/gql&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;}&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;include&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;src/**/*.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;src/**/*.d.ts&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;src/**/*.tsx&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;src/**/*.vue&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;}&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;vite.config.ts&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; { defineConfig } &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;vite&amp;#x27;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; vue &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;@vitejs/plugin-vue&amp;#x27;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; { resolve } &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// https://vitejs.dev/config/&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;defineConfig&lt;/span&gt;({
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;plugins&lt;/span&gt;: [
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-title function_&#34;&gt;vue&lt;/span&gt;()
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  ],
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;resolve&lt;/span&gt;: {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;alias&lt;/span&gt;: {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;@app/gql&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-title function_&#34;&gt;resolve&lt;/span&gt;(__dirname, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./src/gql&amp;quot;&lt;/span&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;})
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this enables us to do is to import a helper function from &lt;code&gt;@app/gql&lt;/code&gt; which we will use to make graphql queries (or perform mutations).&lt;/p&gt;
&lt;p&gt;And the watcher will keep adding overloads to this helper for each of our usage.&lt;/p&gt;
&lt;h1 id=&#34;Usage-in-application&#34;&gt;&lt;a href=&#34;#Usage-in-application&#34; class=&#34;headerlink&#34; title=&#34;Usage in application&#34;&gt;&lt;/a&gt;Usage in application&lt;/h1&gt;&lt;p&gt;Here is what a usage of this helper looks like in our component:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;lang&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;pug&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
div(v-if=&amp;quot;loading&amp;quot;)
  | Loading ...
div(v-else)
  div(v-if=&amp;quot;result?.currentUser&amp;quot;)
    | Hello &amp;#123;&amp;#123; result.currentUser.name &amp;#125;&amp;#125;
  div(v-else)
    | Not logged in
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;lang&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ts&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;setup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; gql &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;@app/gql&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; useQuery &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;@vue/apollo-composable&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &amp;#123; result, loading &amp;#125; = &lt;span class=&#34;hljs-title function_&#34;&gt;useQuery&lt;/span&gt;(&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-title function_&#34;&gt;gql&lt;/span&gt;(&lt;span class=&#34;hljs-comment&#34;&gt;/* GraphQL */&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        query CurrentUserQuery &amp;#123;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;            currentUser &amp;#123;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;                name&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    `&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that other than &lt;code&gt;gql&lt;/code&gt; we didn&amp;#39;t need to import anything else. And we may get a type error initially, it will quickly disappear once our watcher generates the necessary overloads, and our &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;loading&lt;/code&gt; variables will be correctly typed as vue refs.&lt;/p&gt;
&lt;p&gt;The result&amp;#39;s value type will be derived from our query and if we update the query, the type will auto-update too.&lt;/p&gt;
&lt;p&gt;And because these are reactive refs, we can directly use them in templates without needing any watchers or cleanup code.&lt;/p&gt;
&lt;p&gt;Lastly, if you are curious, here is what the overloads generated look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; graphql &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./graphql&amp;#x27;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; documents = &amp;#123;
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;query CurrentUserQuery &amp;#123;...&amp;#125;&amp;quot;&lt;/span&gt;: graphql.&lt;span class=&#34;hljs-property&#34;&gt;CurrentUserQueryDocument&lt;/span&gt;,
&amp;#125;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;gql&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;source: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;query CurrentUserQuery &amp;#123;...&amp;#125;&amp;quot;&lt;/span&gt;&lt;/span&gt;): (&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; documents)[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;query CurrentUserQuery &amp;#123;...&amp;#125;&amp;quot;&lt;/span&gt;];

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;gql&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;source: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;gql&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;source: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;
  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (documents &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;)[source] ?? &amp;#123;&amp;#125;;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not quite pretty :), but usually you never have to peek into this file at all.&lt;/p&gt;
</content>
        <category term="Apollo" />
        <category term="GraphQL" />
        <category term="Vue" />
        <category term="TypeScript" />
        <updated>2021-08-07T00:00:00.000Z</updated>
    </entry>
</feed>
