{
    "version": "https://jsonfeed.org/version/1",
    "title": "Icicles of Thought â€¢ All posts by \"chi\" tag",
    "description": "",
    "home_page_url": "https://lorefnon.me",
    "items": [
        {
            "id": "https://lorefnon.me/2022/10/01/using-buf-connect-with-chi/",
            "url": "https://lorefnon.me/2022/10/01/using-buf-connect-with-chi/",
            "title": "Using chi router and connect-go together",
            "date_published": "2022-10-01T00:00:00.000Z",
            "content_html": "<p><a href=\"https://github.com/bufbuild/connect-go\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">connect-go</a> is a protobuf RPC implementation, touted as a better gRPC. I have been using it for few weeks and have found it to be quite enjoyable.</p>\n<p>This post is a quick recipe on how to use it alongside chi router. The <a href=\"https://github.com/bufbuild/connect-go#a-small-example\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">official docs</a> already illustrate using connect with net&#x2F;http2 directly. But if you are incrementally adopting connect in a project, or need a few REST style endpoints for backward compatibility, or for file uploads or serving server generated templates, it is easy to use connect alongside the <a href=\"https://go-chi.io/\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\">chi router</a>. </p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">mux := chi.NewRouter()\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Middlewares</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">mux.Use(middleware.Logger)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// HTTP Endpoints</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">mux.Post(<span class=\"hljs-string\">&quot;/upload&quot;</span>, handleFileUpload)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Connect API Endpoints</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Associate the Handlers generated from the protobuf file</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">path, handler := pbconnect.SampleServiceHandler(\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    <span class=\"hljs-comment\">// Pass service implementation here:</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">    &amp;SampleServiceImpl{},\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">mux.Handle(path+<span class=\"hljs-string\">&quot;*&quot;</span>, handler) <span class=\"hljs-comment\">// &lt;----- Note The &quot;*&quot; wildcard suffix here</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">// Use h2c so we can serve HTTP/2 without TLS.</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">handler := h2c.NewHandler(mux, &amp;http2.Server{})\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">err := http.ListenAndServe(<span class=\"hljs-string\">&quot;localhost:8080&quot;</span>, handler)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;Failed to init http server&quot;</span>)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n",
            "tags": [
                "go",
                "chi",
                "connect"
            ]
        }
    ]
}