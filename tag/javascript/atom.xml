<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lorefnon.me</id>
    <title>Icicles of Thought • Posts by &#34;javascript&#34; tag</title>
    <link href="https://lorefnon.me" />
    <updated>2018-06-09T00:00:00.000Z</updated>
    <category term="Javascript" />
    <category term="KnockoutJS" />
    <category term="Ruby" />
    <category term="EventMachine" />
    <category term="Websockets" />
    <category term="SQLite" />
    <category term="Jade" />
    <category term="Node.js" />
    <category term="Rails" />
    <category term="Emacs" />
    <category term="Gulp" />
    <category term="ActiveAdmin" />
    <category term="ActiveRecord" />
    <category term="Devise" />
    <category term="Integration" />
    <category term="ZSH" />
    <category term="Productivity Hacks" />
    <category term="OCR" />
    <category term="Design Patterns" />
    <category term="InfluxDB" />
    <category term="Grafana" />
    <category term="React" />
    <category term="Functional Programming" />
    <category term="ES6" />
    <category term="Helm" />
    <category term="SPF" />
    <category term="CSS" />
    <category term="Redux" />
    <category term="Redux-loop" />
    <category term="Frontend" />
    <category term="Vagrant" />
    <category term="Clojure" />
    <category term="Hashicorp" />
    <category term="Typescript" />
    <category term="ReasonML" />
    <category term="Next.js" />
    <category term="Koa" />
    <category term="Apollo" />
    <category term="GraphQL" />
    <category term="MongoDB" />
    <category term="Automerge" />
    <category term="CRDT" />
    <category term="SVG" />
    <category term="VSCode" />
    <category term="Comlink" />
    <category term="Web-workers" />
    <category term="io-ts" />
    <category term="MobX" />
    <category term="MobX-State-Tree" />
    <category term="Routing" />
    <category term="HAR" />
    <category term="Jq" />
    <category term="Lit-html" />
    <category term="Stimulus" />
    <category term="Kotlin" />
    <category term="Vert.X" />
    <category term="Vert.X-Web" />
    <category term="Backend-development" />
    <category term="API-development" />
    <category term="Java" />
    <category term="JOOQ" />
    <category term="Ruby on Rails" />
    <category term="Liquibase" />
    <category term="tbls" />
    <category term="jOOQ" />
    <category term="Vue" />
    <category term="TypeScript" />
    <category term="Gradle" />
    <category term="Spring" />
    <category term="Spring-Boot" />
    <category term="gRPC" />
    <category term="Redis" />
    <category term="CLI" />
    <category term="REST" />
    <category term="Database" />
    <category term="Exposed" />
    <entry>
        <id>https://lorefnon.me/2018/06/09/javascript-async-await-with-arbitrary-thenables/</id>
        <title>Javascript Async/Await with arbitrary Thenables</title>
        <link rel="alternate" href="https://lorefnon.me/2018/06/09/javascript-async-await-with-arbitrary-thenables/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/crayon.min.css&#34; &gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/crayon-flatui-light.css&#34; &gt;



	&lt;p&gt;Usage of C# inspired &lt;code&gt;async/await&lt;/code&gt; syntax (Now a &lt;a href=&#34;https://github.com/tc39/proposals/blob/master/finished-proposals.md&#34; target=&#34;_blank&#34;&gt;stage 4 proposal&lt;/a&gt;) is now fairly mainstream in javascript, and native support is available in major browsers and Node.&lt;/p&gt;
&lt;p&gt;Most of the times we &lt;code&gt;await&lt;/code&gt; on promises (typically returned from async functions), however, it is relatively less well known that &lt;code&gt;await&lt;/code&gt; works on arbitrary thenables. By thenables we mean any object with a &lt;code&gt;then&lt;/code&gt; function member.&lt;/p&gt;
&lt;p&gt;This post covers this usage, and explores some scenarios where it can be interesting.&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more-252&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Using thenables to represent lazy computations&lt;/h2&gt;
&lt;p&gt;Promises are used to represent output of an operation which has been initiated but may not have yet completed. So by the time we have a promise, the operation it represents has already begun and using await keyword we can (effectively) wait for it to complete.&lt;/p&gt;
&lt;p&gt;Thenables can be useful to represent a computation that is yet to begin. For example:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051aef694301312&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-9&#34;&gt;9&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-10&#34;&gt;10&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051aef694301312-11&#34;&gt;11&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-2&#34;&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-3&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-4&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;Started Then&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-5&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-r&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-6&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;Finishing Task&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-7&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-8&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-cn&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-9&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-10&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051aef694301312-11&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0049 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;It would be obvious here, that calling &lt;code&gt;fn&lt;/code&gt; does not actually initiate an asynchronous operation, but simply returns an object – a thenable.&lt;/p&gt;
&lt;p&gt;However, given that &lt;code&gt;await&lt;/code&gt; syntax implicitly calls &lt;code&gt;then&lt;/code&gt;, we can simply &lt;code&gt;await&lt;/code&gt; on the returned thenable exactly in the same way we could have awaited on a promise, but unlike the latter, in this case, calling await will actually initiate the execution of our asynchronous operation.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051afd651445880&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-9&#34;&gt;9&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051afd651445880-10&#34;&gt;10&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-2&#34;&gt;&lt;span class=&#34;crayon-v&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;repl&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;await&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-3&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;/* Function above */&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-4&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;await &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-5&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;Started &lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;Then&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-6&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;Finishing &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;Task&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-7&#34;&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-8&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-i&#34;&gt;_&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-9&#34;&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051afd651445880-10&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0010 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Libraries like &lt;a href=&#34;http://mongoosejs.com/&#34; target=&#34;_blank&#34;&gt;Mongoose&lt;/a&gt; (A popular ODM for mongodb) utilize this behavior and implement the thenable protocol in their &lt;a href=&#34;https://github.com/Automattic/mongoose/blob/master/lib/query.js#L3143&#34; target=&#34;_blank&#34;&gt;Query class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This enables us to &lt;code&gt;await&lt;/code&gt; on fluent query builder chains.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b01870047597&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b01870047597-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b01870047597-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b01870047597-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b01870047597-4&#34;&gt;4&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b01870047597-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b01870047597-2&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;await &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;lorefnon&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b01870047597-3&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;await &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;lorefnon&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;gt&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-cn&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b01870047597-4&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0008 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;Even though being a thenable enables Query to “quack” like a promise in this case, an important distinction is that calling then multiple times will trigger multiple calls to the database (unlike a promise which is guaranteed to resolve or reject exactly once).&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b04749275254&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b04749275254-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b04749275254-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b04749275254-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b04749275254-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b04749275254-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b04749275254-6&#34;&gt;6&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b04749275254-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b04749275254-2&#34;&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;thenable&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;lorefnon&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b04749275254-3&#34;&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;await &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;thenable&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// triggers database query&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b04749275254-4&#34;&gt;&lt;span class=&#34;crayon-c&#34;&gt;// After some lines&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b04749275254-5&#34;&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;await &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;thenable&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// triggers another database query&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b04749275254-6&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0009 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;If this behavior is undesirable, then we can &lt;a href=&#34;https://github.com/lodash/lodash/blob/4.17.10/lodash.js#L10539&#34; target=&#34;_blank&#34;&gt;memoize&lt;/a&gt; our then function.&lt;/p&gt;
&lt;p&gt;Also, note that our &lt;code&gt;fn&lt;/code&gt; function above could not be an async function.&lt;/p&gt;
&lt;p&gt;An async function is guaranteed to return a promise, and returning a thenable in async function, will cause its then to be invoked.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b07702009001&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-9&#34;&gt;9&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-10&#34;&gt;10&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-11&#34;&gt;11&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-12&#34;&gt;12&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-13&#34;&gt;13&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-14&#34;&gt;14&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-15&#34;&gt;15&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-16&#34;&gt;16&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-17&#34;&gt;17&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b07702009001-18&#34;&gt;18&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-2&#34;&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;asycn&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-3&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-4&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;Starting Task&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-5&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// ....&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-6&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-7&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-8&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-9&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;promise&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// Without await&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-10&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;Starting &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;Task&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-11&#34;&gt;&lt;span class=&#34;crayon-c&#34;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-12&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-13&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;promise&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-14&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-15&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;pending&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-16&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-17&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b07702009001-18&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0016 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Stubbing/Spying&lt;/h2&gt;
&lt;p&gt;Since we know that await implicitly calls promises, we can safely spy on then of a promise in test cases. Or stub async methods to return spied thenables.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b0a860841833&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0a860841833-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0a860841833-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0a860841833-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0a860841833-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0a860841833-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0a860841833-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0a860841833-7&#34;&gt;7&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0a860841833-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0a860841833-2&#34;&gt;&lt;span class=&#34;crayon-v&#34;&gt;sinon&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;stub&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;apiClient&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;makeRequest&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;returns&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0a860841833-3&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;sinon&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;spy&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0a860841833-4&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;Dummy Response&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0a860841833-5&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0a860841833-6&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0a860841833-7&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0010 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Since sinon’s stub/spy functions track invocations, we can later find if makeRequest was invoked as well as whether our (pseudo) promises returned were actually awaited upon.&lt;/p&gt;
&lt;h2&gt;Dynamic imports and Thenable modules&lt;/h2&gt;
&lt;p&gt;ES6 modules can export a then method which will be called when these modules are dynamically imported:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b0d585804715&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0d585804715-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0d585804715-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0d585804715-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0d585804715-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0d585804715-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0d585804715-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0d585804715-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b0d585804715-8&#34;&gt;8&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0d585804715-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0d585804715-2&#34;&gt;&lt;span class=&#34;crayon-c&#34;&gt;// importee.mjs&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0d585804715-3&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0d585804715-4&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0d585804715-5&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;Running Task&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0d585804715-6&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0d585804715-7&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b0d585804715-8&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0008 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b10211716304&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b10211716304-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b10211716304-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b10211716304-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b10211716304-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b10211716304-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b10211716304-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b10211716304-7&#34;&gt;7&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b10211716304-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b10211716304-2&#34;&gt;&lt;span class=&#34;crayon-c&#34;&gt;// importer.mjs&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b10211716304-3&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b10211716304-4&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;async&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b10211716304-5&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;resolved =&amp;gt;&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;await &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;./importee&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b10211716304-6&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b10211716304-7&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0007 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b12392719844&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b12392719844-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b12392719844-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b12392719844-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b12392719844-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b12392719844-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b12392719844-6&#34;&gt;6&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b12392719844-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b12392719844-2&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;modules &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;importer&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;mjs&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b12392719844-3&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-cn&#34;&gt;25619&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;ExperimentalWarning&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;The &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;ESM &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;module &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;loader &lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b12392719844-4&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;Running &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;Task&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b12392719844-5&#34;&gt;&lt;span class=&#34;crayon-v&#34;&gt;resolved&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b12392719844-6&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0009 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Note that static imports are not asynchronous and don’t cause thenables to be executed:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b15466922518&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-9&#34;&gt;9&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b15466922518-10&#34;&gt;10&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-2&#34;&gt;&lt;span class=&#34;crayon-c&#34;&gt;// importee.mjs&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-3&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-4&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#34;foo&#34;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-5&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-6&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-7&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;Running Task&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-8&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-9&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b15466922518-10&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0010 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b18426522605&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b18426522605-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b18426522605-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b18426522605-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b18426522605-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b18426522605-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b18426522605-6&#34;&gt;6&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b18426522605-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b18426522605-2&#34;&gt;&lt;span class=&#34;crayon-c&#34;&gt;// importer.mjs&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b18426522605-3&#34;&gt;&lt;span class=&#34;crayon-e&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-i&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#34;./importee&#34;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b18426522605-4&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b18426522605-5&#34;&gt;&lt;span class=&#34;crayon-v&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;foo =&amp;gt;&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b18426522605-6&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0006 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b1a362248770&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1a362248770-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1a362248770-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1a362248770-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1a362248770-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1a362248770-5&#34;&gt;5&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1a362248770-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1a362248770-2&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;modules &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;importer&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;mjs&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1a362248770-3&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-cn&#34;&gt;25619&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;ExperimentalWarning&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;The &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;ESM &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;module &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;loader &lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1a362248770-4&#34;&gt;&lt;span class=&#34;crayon-v&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-i&#34;&gt;foo&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1a362248770-5&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0008 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Chaining of thenables&lt;/h2&gt;
&lt;p&gt;Similar to promises, thenables can be chained:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b1d808928575&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b1d808928575-9&#34;&gt;9&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-2&#34;&gt;&lt;span class=&#34;crayon-v&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;experimental&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;repl&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;await&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-3&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;thenable&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-4&#34;&gt;&lt;span class=&#34;crayon-v&#34;&gt;undefined&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-5&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;await &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;thenable&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-6&#34;&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-7&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-i&#34;&gt;_&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-8&#34;&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b1d808928575-9&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0016 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Usage with Proxies&lt;/h2&gt;
&lt;p&gt;Dynamic interception of then invocations through proxies works exactly the way we’d expect:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44c051b20469144398&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-9&#34;&gt;9&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-10&#34;&gt;10&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-11&#34;&gt;11&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44c051b20469144398-12&#34;&gt;12&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-1&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-2&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;thenable&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-r&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-3&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-4&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;===&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;then&#39;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-5&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-6&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-7&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-8&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-9&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-10&#34;&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;await &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;thenable&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-11&#34;&gt;&lt;span class=&#34;crayon-t&#34;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44c051b20469144398-12&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0016 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Closure&lt;/h2&gt;
&lt;p&gt;While implicit resolution of thenables opens up some interesting opportunities, it can also lead to unexpected/surprising behavior if we are not aware of it.&lt;/p&gt;


    </content>
        <category term="Javascript" />
        <category term="Frontend" />
        <updated>2018-06-09T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2018/02/04/redux-loop-a-better-solution-for-managing-asynchronous-operations-in-redux/</id>
        <title>Redux-loop: A better solution for managing asynchronous operations in redux</title>
        <link rel="alternate" href="https://lorefnon.me/2018/02/04/redux-loop-a-better-solution-for-managing-asynchronous-operations-in-redux/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/crayon.min.css&#34; &gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/crayon-flatui-light.css&#34; &gt;



	&lt;p&gt;The lack of support for asynchronous operations in redux core has spawned a whole ecosystems for managing &lt;em&gt;&lt;strong&gt;side-effects&lt;/strong&gt;&lt;/em&gt;&amp;nbsp;&lt;sup&gt;&lt;a id=&#34;side-effects-footer-link-back&#34; href=&#34;#side-effects-footer-link&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt; in Redux.&lt;/p&gt;
&lt;p&gt;This post argues that the &lt;a href=&#34;https://github.com/redux-loop/redux-loop&#34;&gt;redux-loop&lt;/a&gt;&amp;nbsp;library (1.5 k ★ as of this writing) is a much better solution for this job than other more popular alternatives like &lt;a href=&#34;https://github.com/redux-saga/redux-saga&#34;&gt;redux-sagas&lt;/a&gt; (11.8 k&amp;nbsp;★) and &lt;a href=&#34;https://github.com/gaearon/redux-thunk&#34;&gt;redux-thunk&lt;/a&gt; (7.8 k&amp;nbsp;★).&lt;/p&gt;
&lt;p&gt;As has always been prevalent in frontend ecosystem, popularity&amp;nbsp; does not necessarily translate to better suitability.&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more-113&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;What is redux-loop ?&lt;/h1&gt;
&lt;p&gt;Redux loop essentially exposes a &lt;a href=&#34;https://github.com/reactjs/redux/blob/master/docs/Glossary.md#store-enhancer&#34;&gt;store enhancer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Normally our reducers would take in the current state and action and return an updated state.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44e6bd90c383944409&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-9&#34;&gt;9&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-10&#34;&gt;10&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd90c383944409-11&#34;&gt;11&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-1&#34;&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;reducer&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-2&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-3&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;ADD_TODO&#39;&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-4&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// Derive new state from current state&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-5&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;[&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-6&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-7&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;isDone&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-8&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-9&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// ... Other Cases&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-10&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd90c383944409-11&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0018 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Redux encourages reducers to be pure functions and strongly discourages side-effects from &lt;strong&gt;being run from within reducers&lt;/strong&gt; to &lt;a href=&#34;https://hashnode.com/post/how-do-you-explain-the-term-predictable-state-container-in-simple-words-ciizdac5300wege53dogz8aqk&#34;&gt;ensure predictability&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When redux-loop’s enhancer is installed, our reducer could also return a &lt;em&gt;&lt;strong&gt;loop&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While it is a somewhat confusing name, a loop, in this context, is a combination of two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An updated state (which is what you would have normally returned), and&lt;/li&gt;
&lt;li&gt;A command (A plain object which describes an asynchronous operation to be executed).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A command describes what asynchronous operation is to be run &lt;strong&gt;after&lt;/strong&gt; this dispatch cycle. For example:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44e6bd921466673431&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-9&#34;&gt;9&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num crayon-top&#34; data-line=&#34;crayon-5fba44e6bd921466673431-10&#34;&gt;10&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-11&#34;&gt;11&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-12&#34;&gt;12&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-13&#34;&gt;13&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-14&#34;&gt;14&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-15&#34;&gt;15&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-16&#34;&gt;16&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-17&#34;&gt;17&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-18&#34;&gt;18&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-19&#34;&gt;19&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-20&#34;&gt;20&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-21&#34;&gt;21&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-22&#34;&gt;22&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-23&#34;&gt;23&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-24&#34;&gt;24&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-25&#34;&gt;25&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-26&#34;&gt;26&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-27&#34;&gt;27&lt;/div&gt;&lt;div class=&#34;crayon-num crayon-marked-num crayon-bottom&#34; data-line=&#34;crayon-5fba44e6bd921466673431-28&#34;&gt;28&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-29&#34;&gt;29&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-30&#34;&gt;30&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd921466673431-31&#34;&gt;31&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-1&#34;&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;reducer&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-2&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-3&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#39;TODO/CREATE&#39;&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-4&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-5&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// 1. Derive new state from updated State&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-6&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;nextState&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;[&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-7&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-8&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;isDone&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-t&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-9&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line crayon-top&#34; id=&#34;crayon-5fba44e6bd921466673431-10&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-11&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// 2. Describe what is to be done next through a command:&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-12&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-m&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;nextOperation&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-13&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;createTask&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// An async function which takes the arguments below and returns a promise&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-14&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-15&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// Arguments to saveTask&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-16&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;successActionCreator&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// Action which will be dispatched when the operation is successful&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-17&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#34;TODO/CREATE/SUCCESS&#34;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-18&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-i&#34;&gt;task&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-19&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-20&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;failActionCreator&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// Action which will be dispatched when the operation is complete&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-21&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-s&#34;&gt;&#34;TODO/CREATE/FAILURE&#34;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-22&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;crayon-o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-i&#34;&gt;error&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-23&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-24&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-25&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-26&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// 3. Combine both in a loop:&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line&#34; id=&#34;crayon-5fba44e6bd921466673431-27&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-st&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-e&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;nextState&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;crayon-h&#34;&gt; &lt;/span&gt;&lt;span class=&#34;crayon-v&#34;&gt;nextOperation&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line crayon-marked-line crayon-bottom&#34; id=&#34;crayon-5fba44e6bd921466673431-28&#34;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-29&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-c&#34;&gt;// ... Other Cases&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-30&#34;&gt;&lt;span class=&#34;crayon-h&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd921466673431-31&#34;&gt;&lt;span class=&#34;crayon-sy&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;crayon-sy&#34;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0038 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;While it may not be obvious looking at the example above, our &lt;strong&gt;reducer is still a pure function&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Command that we return as a part of the loop in just an object describing an operation. Even though the API is called &lt;code&gt;Cmd.run&lt;/code&gt;, it does not actually run the asynchronous operation from within the reducer. Redux-loop executes the operation (described by the cmd) once the dispatch cycle is over.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;!-- Crayon Syntax Highlighter v_2.7.2_beta --&gt;

		&lt;div id=&#34;crayon-5fba44e6bd929710407303&#34; class=&#34;crayon-syntax crayon-theme-flatui-light crayon-font-inconsolata crayon-os-pc print-yes notranslate&#34; data-settings=&#34; minimize scroll-mouseover&#34; style=&#34; margin-top: 12px; margin-bottom: 12px; font-size: 15px !important; line-height: 20px !important;&#34;&gt;
		
			&lt;div class=&#34;crayon-plain-wrap&#34;&gt;&lt;/div&gt;
			&lt;div class=&#34;crayon-main&#34; style=&#34;&#34;&gt;
				&lt;table class=&#34;crayon-table&#34;&gt;
					&lt;tbody&gt;&lt;tr class=&#34;crayon-row&#34;&gt;
				&lt;td class=&#34;crayon-nums&#34; data-settings=&#34;hide&#34;&gt;
					&lt;div class=&#34;crayon-nums-content&#34; style=&#34;font-size: 15px !important; line-height: 20px !important;&#34;&gt;&lt;div class=&#34;crayon-num crayon-marked-num crayon-top crayon-bottom&#34; data-line=&#34;crayon-5fba44e6bd929710407303-1&#34;&gt;1&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-2&#34;&gt;2&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-3&#34;&gt;3&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-4&#34;&gt;4&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-5&#34;&gt;5&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-6&#34;&gt;6&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-7&#34;&gt;7&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-8&#34;&gt;8&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-9&#34;&gt;9&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-10&#34;&gt;10&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-11&#34;&gt;11&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-12&#34;&gt;12&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-13&#34;&gt;13&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-14&#34;&gt;14&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-15&#34;&gt;15&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-16&#34;&gt;16&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-17&#34;&gt;17&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-18&#34;&gt;18&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-19&#34;&gt;19&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-20&#34;&gt;20&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-21&#34;&gt;21&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-22&#34;&gt;22&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-23&#34;&gt;23&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-24&#34;&gt;24&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-25&#34;&gt;25&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-26&#34;&gt;26&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-27&#34;&gt;27&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-28&#34;&gt;28&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-29&#34;&gt;29&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-30&#34;&gt;30&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-31&#34;&gt;31&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-32&#34;&gt;32&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-33&#34;&gt;33&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-34&#34;&gt;34&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-35&#34;&gt;35&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-36&#34;&gt;36&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-37&#34;&gt;37&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-38&#34;&gt;38&lt;/div&gt;&lt;div class=&#34;crayon-num&#34; data-line=&#34;crayon-5fba44e6bd929710407303-39&#34;&gt;39&lt;/div&gt;&lt;/div&gt;
				&lt;/td&gt;
						&lt;td class=&#34;crayon-code&#34;&gt;&lt;div class=&#34;crayon-pre&#34; style=&#34;font-size: 15px !important; line-height: 20px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;&#34;&gt;&lt;div class=&#34;crayon-line crayon-marked-line crayon-top crayon-bottom&#34; id=&#34;crayon-5fba44e6bd929710407303-1&#34;&gt;s&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DOM&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Component&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Store&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redux-loop&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-2&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-3&#34;&gt;User -----------------------&amp;gt; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-4&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-5&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Click on &#34;Add Todo&#34;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-6&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+-----------&amp;gt;||&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-7&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| onClick&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;||&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-8&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; +------------------------&amp;gt; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-9&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | disatch({&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-10&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp; type: &#34;TODO/CREATE&#34;,&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-11&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp; ...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reducer&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-12&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | })&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-13&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+--------------&amp;gt; +&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-14&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-15&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-16&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-17&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;||&amp;lt;--------------+--------------&amp;gt; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-18&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Apply&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; render&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ||&amp;nbsp;&amp;nbsp; nextState&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; next&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createTask&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-19&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;diff&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ||&amp;lt;------------------------+|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Operation&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(async operation)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-20&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ||&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; +-----------&amp;gt; +&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-21&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| &amp;lt;-----------+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;promise&amp;nbsp;&amp;nbsp;| |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-22&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; | &amp;lt;---------+ |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-23&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;dispatch({&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-24&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;type: &#34;TODO/CREATE/SUCCESS&#34;, | &amp;lt;-----------+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-25&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;fulfill&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-26&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;})&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-27&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;||&amp;lt;-------------------------------+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-28&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;||&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-29&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;||&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reducer&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-30&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+|------------&amp;gt; +&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-31&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-32&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-33&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| &amp;lt;-----------+ +&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-34&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; nextState&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-35&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; render&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-36&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Apply&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;||&amp;lt;------------------------+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-37&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;diff&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ||&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-38&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;| &amp;lt;-----------+&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;div class=&#34;crayon-line&#34; id=&#34;crayon-5fba44e6bd929710407303-39&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; |&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
					&lt;/tr&gt;
				&lt;/tbody&gt;&lt;/table&gt;
			&lt;/div&gt;
		&lt;/div&gt;
&lt;!-- [Format Time: 0.0044 seconds] --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Interested readers are encouraged to explore the redux-loop documentation for advanced aspects. The rest of the post below compares redux-loop with prevalent alternatives.&lt;/p&gt;
&lt;h1&gt;A comparision with the alternatives&lt;/h1&gt;
&lt;p&gt;If you are writing a redux application today, it is likely that to manage asynchronous operations you are using either redux-thunks or redux-sagas, which are the most popular solutions in this space.&lt;/p&gt;
&lt;p&gt;I believe redux-loop is a better alternative to both of them.&lt;/p&gt;
&lt;p&gt;Redux-thunk encourages handling your asynchronous operations in action creators. The action creators can return thunks which can dispatch other actions when the operation has completed or when it fails.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Redux Thunk&amp;nbsp;&lt;a href=&#34;https://github.com/reactjs/redux/blob/master/docs/advanced/Middleware.md&#34;&gt;middleware&lt;/a&gt;&amp;nbsp;allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods&amp;nbsp;&lt;code&gt;dispatch&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;getState&lt;/code&gt;&amp;nbsp;as parameters.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;redux-sagas allows us to define long running generators in the application which can intercept arbitrary actions and perform asynchronous actions based on them.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The mental model is that a saga is like a separate thread in your application that’s solely responsible for side effects.&amp;nbsp;&lt;code&gt;redux-saga&lt;/code&gt;&amp;nbsp;is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal redux actions, it has access to the full redux application state and it can dispatch redux actions as well.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;Coherent mental model&lt;/h2&gt;
&lt;p&gt;With redux-loop, when you are exploring your application codebase (or trying to debug a behavior) and trying to deduce what will happen due to an action dispatch, the starting point of investigation is always the reducer irrespective of whether the action corresponds to a synchronous operation or asynchronous.&lt;/p&gt;
&lt;p&gt;As the authors have explained this in the README:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;With&amp;nbsp;&lt;code&gt;redux-loop&lt;/code&gt;, the &lt;strong&gt;reducer doesn’t just decide what happens&amp;nbsp;&lt;em&gt;now&lt;/em&gt;&amp;nbsp;due to a particular action, it decides what happens&amp;nbsp;&lt;em&gt;next&lt;/em&gt;.&lt;/strong&gt; All of the behavior of your application can be traced through one place, and that behavior can be easily broken apart and composed back together.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;This is not the case with either thunks or sagas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In case of thunks, to investigate the impact of an action, along with all reducers which handle the action, we also need to go to each action creator which may have dispatched this action and investigate the thunks which they return.&lt;/p&gt;
&lt;p&gt;In case of sagas, along with all reducers, we need to investigate each saga which may have intercepted the action.&lt;/p&gt;
&lt;p&gt;In this regard it feels like a natural extension of the Redux API as opposed to a solution bolted on top of redux pretending that asynchronous operations are fundamentally different from synchronous operations.&lt;/p&gt;
&lt;h2&gt;Dispatch is decoupled from handling of operation&lt;/h2&gt;
&lt;p&gt;With redux-thunks, &lt;strong&gt;we don’t have a way to intercept actions when we don’t have control over the dispatch site.&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Being able to intercept actions without modifying the dispatch site is handy in multiple scenarios. Let us say we want to show a loader when&amp;nbsp;any asynchronous operation is in progress.&lt;/p&gt;
&lt;p&gt;We can implement this using redux-loop without all the action creators being aware of this. A single reducer can intercept all actions suffixed with &lt;code&gt;_PENDING&lt;/code&gt;&amp;nbsp;and &lt;code&gt;_COMPLETE&lt;/code&gt;&amp;nbsp;and use them to update the progress bar state in redux.&lt;/p&gt;
&lt;p&gt;Redux-sagas is capable of such interception, but debugging sagas can be quite difficult owning to the fact that sagas can spawn other sagas during their lifetime, so investigation of the impact of an action requires knowledge of what all sagas were running at the point of dispatch.&lt;/p&gt;
&lt;h2&gt;Time variant local state outside redux&lt;/h2&gt;
&lt;p&gt;This is essentially an extension of the above argument. Because sagas are long running, they make it very easy (and even encourage) to have local implicit state within the sagas which is not in the redux store and can not be investigated through redux-dev-tools. Based on this implicit time variant state encapsulated within local scopes of long running generators, sagas can do different things when same action is dispatched and in large complex applications this can be difficult to reason about.&lt;/p&gt;
&lt;p&gt;I believe it is much better to encode all these transient states of various asynchronous operation, which are in progress, within the redux store so that the store remains the primary source of truth in the application. It is much easier to reason about the behavior of application when the outcome of an action is directly deducible from store state and action.&lt;/p&gt;
&lt;p&gt;Can the same approach be adopted while using sagas ? Sure. But for a vast majority of use cases, redux-saga’s flexibility – especially the ability to arbitrarily fork and join sagas – is an undesirable footgun which can make post-mortem debugging a whole lot more complex.&lt;/p&gt;
&lt;p&gt;While it is likely that tooling efforts like &lt;a href=&#34;https://github.com/redux-saga/redux-saga-devtools&#34;&gt;redux-saga-devtools&amp;nbsp;&lt;/a&gt;will help alleviate many of the debugging headaches associated with sagas, but I still prefer to treat the redux store as the singular state machine driving the application.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;side-effects-footer-link&#34; href=&#34;#side-effects-footer-link-back&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&amp;nbsp;I explicitly avoid the usage of the term &lt;strong&gt;side-effect&amp;nbsp;&lt;/strong&gt;because it seems to imply that these operations are something of lesser importance where as, in reality, for most applications, these side effects are the reasons these applications exist.&lt;/p&gt;
&lt;p&gt;In frontend application asynchrony is so prevalent that management of asynchronous flow of control is often the single most important thing in the application.&lt;/p&gt;


    </content>
        <category term="Javascript" />
        <category term="Redux" />
        <category term="Redux-loop" />
        <category term="Frontend" />
        <updated>2018-02-04T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2016/04/04/embracing-bem-methodology-in-react-applications.html</id>
        <title>Embracing BEM methodology in React applications</title>
        <link rel="alternate" href="https://lorefnon.me/2016/04/04/embracing-bem-methodology-in-react-applications.html"/>
        <content type="html">
&lt;a class=&#34;header-link&#34; href=&#34;#react-and-modular-css&#34;&gt;&lt;h2 id=&#34;react-and-modular-css&#34;&gt;React and modular CSS&lt;/h2&gt;&lt;/a&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React&lt;/a&gt; provides an elegant component oriented approach towards structuring our User interface. However it is not very prescriptive of how to modularize the CSS. Many React core team members have &lt;a href=&#34;https://speakerdeck.com/vjeux/react-css-in-js&#34;&gt;opined&lt;/a&gt; that it is better to ditch css entirely and embrace js based inline styles. However that decision does not go well with a lot of frontend teams and makes things difficult for newcomers.&lt;/p&gt;

&lt;p&gt;However there many popular approaches for modularizing CSS that have evolved from community experience independent of React. Once such approach is &lt;a href=&#34;http://getbem.com/&#34;&gt;BEM&lt;/a&gt; which has proven to be quite popular and effective in practice.&lt;/p&gt;

&lt;p&gt;This post outlines a few functional utilities to effectively and succinctly use BEM alongside React.&lt;/p&gt;

&lt;a class=&#34;header-link&#34; href=&#34;#composing-class-names&#34;&gt;&lt;h2 id=&#34;composing-class-names&#34;&gt;Composing class names&lt;/h2&gt;&lt;/a&gt;

&lt;p&gt;While ES6 template strings provide a decent solution for string interpolation, it becomes cumbersome when we assign/toggle many classnames based on props or state variables. &lt;a href=&#34;https://github.com/JedWatson/classnames&#34;&gt;JedWatson/classnames&lt;/a&gt; is a nifty functional utility that alleviates some of this pain. Some examples directly taken from the &lt;a href=&#34;https://github.com/JedWatson/classnames/blob/master/README.md&#34;&gt;README&lt;/a&gt; illustrate the use case very well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;javascript language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;classNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; &#39;foo bar&#39;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;classNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; &#39;foo bar&#39;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;classNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;#123;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;foo-bar&#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; &#39;foo-bar&#39;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;classNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;#123;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;foo-bar&#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; &#39;&#39;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;classNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;#123;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; &#39;foo bar&#39;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;classNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&amp;#123;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; &#39;foo bar&#39;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// lots of arguments of various types&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;classNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;duck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;baz&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;quux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; &#39;foo bar baz quux&#39;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// other falsy values are just ignored&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;classNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#125;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; &#39;bar 1&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;a class=&#34;header-link&#34; href=&#34;#eliminating-redundancy-in-class-names-using-css-precompilers&#34;&gt;&lt;h2 id=&#34;eliminating-redundancy-in-class-names-using-css-precompilers&#34;&gt;Eliminating redundancy in class names using CSS precompilers&lt;/h2&gt;&lt;/a&gt;

&lt;p&gt;CSS precompilers like &lt;a href=&#34;http://sass-lang.com/&#34;&gt;SASS&lt;/a&gt; and &lt;a href=&#34;http://lesscss.org/&#34;&gt;LESS&lt;/a&gt; allow us to augment the parent context in included scope using ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) prefix. This significantly helps towards keeping our stylesheets DRY:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;text language-text&#34; data-lang=&#34;text&#34;&gt;.block &amp;#123;
    background: white;

    &amp;amp;__element-one &amp;#123;
        border-bottom: 1px solid red;

        &amp;amp;--modifier-one &amp;#123;
            color: red;
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;a class=&#34;header-link&#34; href=&#34;#eliminating-redundancy-in-class-names-in-react-components&#34;&gt;&lt;h2 id=&#34;eliminating-redundancy-in-class-names-in-react-components&#34;&gt;Eliminating redundancy in class names in react components&lt;/h2&gt;&lt;/a&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/bem-classname&#34;&gt;&lt;code&gt;bem-classname&lt;/code&gt;&lt;/a&gt; is a nifty utility that allows us to eliminate the redundancy while assigning classnames to DOM elements.&lt;/p&gt;

&lt;p&gt;The canonical approach is to pass the block, element and modifier names to the function exposed by the utility:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;javascript language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;bemClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;block&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;element&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;awesome&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// block__element block__element--awesome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However the function can also be bound to a block context allowing us to strip away some of the boilerplate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;text language-text&#34; data-lang=&#34;text&#34;&gt;import React from &#39;react&#39;
import bem from &#39;bem-classname&#39;

const Home = () =&amp;gt; (
  &amp;lt;div className=&amp;#123;className()&amp;#125;&amp;gt;
    &amp;lt;h1 className=&amp;#123;className(&#39;header&#39;)&amp;#125;&amp;gt; Lorefnon &amp;lt;/h1&amp;gt;
    &amp;lt;div className=&amp;#123;className(&#39;description&#39;)&amp;#125;&amp;gt;
      Full Stack Web Application Developer
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
)

export default Home

// Private:

const className = bem.bind(null, &#39;Home&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above stateless component generates the following markup:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;html language-html&#34; data-lang=&#34;html&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;Home&#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;Home__header&#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt; Lorefnon &lt;span class=&#34;nt&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;Home__description&#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
      Full Stack Web Application Developer
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not that BEM does not restrict us to one block/element per node. So a single node can represent multiple blocks. In such cases it is helpful to combine the aforementioned two utilities.&lt;/p&gt;

&lt;a class=&#34;header-link&#34; href=&#34;#compressing-classnames-in-production&#34;&gt;&lt;h2 id=&#34;compressing-classnames-in-production&#34;&gt;Compressing classnames in production&lt;/h2&gt;&lt;/a&gt;

&lt;p&gt;While BEM is very useful from a developer perspective as it eliminates the tedium of dealing with CSS specificity to a significant extent - however it has been crticised for the elaborate classnames which contribute towards increased size of HTML &amp;amp; CSS files.&lt;/p&gt;

&lt;p&gt;If your use case really demands this level of optimization, then there are utilities like &lt;a href=&#34;https://www.npmjs.com/package/grunt-class-id-minifier&#34;&gt;grunt-class-id-minifier&lt;/a&gt; which can compress these class names as a part of the build process.&lt;/p&gt;

&lt;p&gt;The plugin generates a mapping file which we can consume in our components as a normal javascript module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;javascript language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&#34;Home__header&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&#34;Home__description&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;b&#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;#125;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;#125;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;javascript language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;./map.js&#39;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;Home&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
        <category term="Javascript" />
        <category term="CSS" />
        <updated>2016-04-04T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2015/11/26/boost-your-content-focussed-site-with-structured-page-fragments.html</id>
        <title>Boost your content focussed site with Structured Page Fragments</title>
        <link rel="alternate" href="https://lorefnon.me/2015/11/26/boost-your-content-focussed-site-with-structured-page-fragments.html"/>
        <content type="html">&lt;h2 id=&#34;The-context&#34;&gt;&lt;a href=&#34;#The-context&#34; class=&#34;headerlink&#34; title=&#34;The context&#34;&gt;&lt;/a&gt;The context&lt;/h2&gt;&lt;p&gt;SPF.js a lightweight javascript library to incorporate dynamic page updates that dramatically reduces perceived page latency. Quoting from the Repo Homepage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using progressive enhancement and HTML5, SPF integrates with your site to enable a faster, more fluid user experience by updating just the sections of the page that change during navigation, not the whole page. SPF provides a response format for sending document fragments, a robust system for script and style management, an in-memory cache, on-the-fly processing, and more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While for complex dynamic sites which have a significant amount of client side logic, I still recommend adopting a client side javascript framework, but for content focussed sites, a nifty utility like SPF.js can be very useful.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;Why-not-good-old-js-erb-templates&#34;&gt;&lt;a href=&#34;#Why-not-good-old-js-erb-templates&#34; class=&#34;headerlink&#34; title=&#34;Why not good old js.erb templates ?&#34;&gt;&lt;/a&gt;Why not good old js.erb templates ?&lt;/h2&gt;&lt;p&gt;While Rails allows us to render server generated javascript templates, using them to generate dynamic page updates is a bit cumbersome for most scenarios. Especially you have to handle page url updates manually, scroll back the pages manually etc. None of them are very complex concerns, but having a library deal with such cross cutting concerns is much more elegant IMHO.&lt;/p&gt;
&lt;h2 id=&#34;What-about-turbolinks&#34;&gt;&lt;a href=&#34;#What-about-turbolinks&#34; class=&#34;headerlink&#34; title=&#34;What about turbolinks ?&#34;&gt;&lt;/a&gt;What about turbolinks ?&lt;/h2&gt;&lt;p&gt;While yes, turbolinks does enjoy being a part of the default Rails stack, but frankly, it has always seemed like a half baked product. While turbolinks does improve the experience over full page reloads, behind the scenes it still loads the full page content.&lt;/p&gt;
&lt;p&gt;SPF.js allows you to just fetch the parts of the page that really need updating. The GIF below, also taken from the official site, explains this much better:&lt;/p&gt;
&lt;table style=&#34;margin: auto&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; Full page re-rerendering &lt;/th&gt;
      &lt;th&gt; Partial section replacement with SPF.js &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;img src=&#34;/images/animation-static-340x178.gif&#34;&gt;&lt;/td&gt;
      &lt;td&gt; &lt;img src=&#34;/images/animation-dynamic-340x178.gif&#34;&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;But-doesn-39-t-the-latest-version-of-turbolinks-include-support-for-partial-page-replacement&#34;&gt;&lt;a href=&#34;#But-doesn-39-t-the-latest-version-of-turbolinks-include-support-for-partial-page-replacement&#34; class=&#34;headerlink&#34; title=&#34;But doesn&amp;#39;t the latest version of turbolinks include support for partial page replacement ?&#34;&gt;&lt;/a&gt;But doesn&amp;#39;t the latest version of turbolinks include support for partial page replacement ?&lt;/h2&gt;&lt;p&gt;Yes, but there is a &lt;a href=&#34;https://github.com/rails/turbolinks/issues/628&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;lack of clarity&lt;/a&gt; over when (and if) that feature will be officially released.&lt;/p&gt;
&lt;p&gt;In a nutshell, the version of turbolinks that is scheduled to ship with Rails 5, significantly diverges from what has hitherto been considered as the &lt;a href=&#34;https://github.com/rails/turbolinks/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;official turbolinks repo&lt;/a&gt;, and will probably not contain, among other features, support for partial page replacements. While the future is not set in stone, and as DHH has &lt;a href=&#34;https://github.com/rails/turbolinks/issues/628#issuecomment-157376926&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;put it&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But, hey, it&amp;#39;s just code. If the current state of this repo serves your
needs, you don&amp;#39;t need any official blessing from anyone to use it. You can
use it as-is, you can fork, you can do whatever you want. MIT baby!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While I appreciate the freedom associated with open source licenses, I would rather bet on a well supported library that caters to the exact same use case and which is already being used in production in a wildly popular site - Youtube.&lt;/p&gt;
&lt;h2 id=&#34;Integrating-SPF-js-with-Rails&#34;&gt;&lt;a href=&#34;#Integrating-SPF-js-with-Rails&#34; class=&#34;headerlink&#34; title=&#34;Integrating SPF.js with Rails&#34;&gt;&lt;/a&gt;Integrating SPF.js with Rails&lt;/h2&gt;&lt;p&gt;The rest of the post outlines the steps required to integrate SPF.js with a rails application. The code for this tutorial is available in &lt;a href=&#34;https://github.com/lorefnon/rails-spfjs-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We will create a dummy blog application. But hey, since this is just a demo application, we can get away with a little &lt;a href=&#34;https://github.com/sevenwire/forgery&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Forgery&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PostsController&lt;/span&gt; &amp;lt; ApplicationController&lt;/span&gt;

  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;index&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt; = params[&lt;span class=&#34;hljs-symbol&#34;&gt;:page&lt;/span&gt;].to_i
    &lt;span class=&#34;hljs-variable&#34;&gt;@num_pages&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;
    &lt;span class=&#34;hljs-variable&#34;&gt;@posts&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;.times.map &amp;#123; fake_post_summary &amp;#125;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;show&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-variable&#34;&gt;@post&lt;/span&gt; = fake_post
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

  private

  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;fake_post&lt;/span&gt;&lt;/span&gt;
    OpenStruct.new fake_post_summary.to_h.merge!(
      &lt;span class=&#34;hljs-symbol&#34;&gt;id:&lt;/span&gt; params[&lt;span class=&#34;hljs-symbol&#34;&gt;:id&lt;/span&gt;],
      &lt;span class=&#34;hljs-symbol&#34;&gt;body:&lt;/span&gt; LoremIpsum.random(&lt;span class=&#34;hljs-symbol&#34;&gt;paragraphs:&lt;/span&gt; rand(&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;))
    )
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;fake_post_summary&lt;/span&gt;&lt;/span&gt;
    OpenStruct.new(
      &lt;span class=&#34;hljs-symbol&#34;&gt;id:&lt;/span&gt; rand(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;),
      &lt;span class=&#34;hljs-symbol&#34;&gt;title:&lt;/span&gt; LoremIpsum.lorem_ipsum(&lt;span class=&#34;hljs-symbol&#34;&gt;words:&lt;/span&gt; rand(&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)),
      &lt;span class=&#34;hljs-symbol&#34;&gt;summary:&lt;/span&gt; LoremIpsum.random(&lt;span class=&#34;hljs-symbol&#34;&gt;paragraphs:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;),
      &lt;span class=&#34;hljs-symbol&#34;&gt;author:&lt;/span&gt; OpenStruct.new(
        &lt;span class=&#34;hljs-symbol&#34;&gt;user_name:&lt;/span&gt; Forgery(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;internet&amp;#x27;&lt;/span&gt;).user_name,
        &lt;span class=&#34;hljs-symbol&#34;&gt;email:&lt;/span&gt; Forgery(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;internet&amp;#x27;&lt;/span&gt;).email_address
      )
    )
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now that we have our dummy posts in place, we just need to show them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- posts/index.html.erb --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;blog-container&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;blog-title title&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; Lorefnon&amp;#x27;s Awesome blog &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;page-title title&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; Posts &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;posts-container&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; render &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;posts/posts&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;br/&gt;

&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- posts/_posts.html.erb --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;posts-list&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@posts&lt;/span&gt;.each &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;|post|&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; render &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;posts/summary&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;post:&lt;/span&gt; post &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;navigation-links&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; render &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;posts/navigation_links&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;br/&gt;

&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- posts/_summary.html.erb --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;data-post-id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; post.id &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;%&amp;gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;title post-title&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; link_to post.title, post_path(&lt;span class=&#34;hljs-symbol&#34;&gt;id:&lt;/span&gt; post.id) &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; post.summary &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;br/&gt;

&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- posts/_navigation_links.html.erb --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt; &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;   &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; link_to &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Previous Page&amp;#x27;&lt;/span&gt;, posts_path(&lt;span class=&#34;hljs-symbol&#34;&gt;page:&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt;-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-variable&#34;&gt;@num_pages&lt;/span&gt; -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;   &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; link_to &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Next Page&amp;#x27;&lt;/span&gt;, posts_path(&lt;span class=&#34;hljs-symbol&#34;&gt;page:&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;br/&gt;

&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- posts/show.html.erb --&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;blog-container&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;post-title title&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; link_to &lt;span class=&#34;hljs-variable&#34;&gt;@post&lt;/span&gt;.title, post_path(&lt;span class=&#34;hljs-symbol&#34;&gt;id:&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@post&lt;/span&gt;.id) &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;post-body&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@post&lt;/span&gt;.body &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above templates have nothing particularly characteristic. If you would have written them yourself, I guess you would have implemented something very similar. I have presented above to particularly highlight that the way you structure your views does not need to be drastically altered to use SPF.js. Hence it is easy to take your existing sites and start using SPF.js.&lt;/p&gt;
&lt;p&gt;Our dummy blog looks something like this now:&lt;/p&gt;
&lt;img src=&#34;/images/2015-11-26/blog_index.png&#34;&gt;

&lt;h2 id=&#34;Including-SPF&#34;&gt;&lt;a href=&#34;#Including-SPF&#34; class=&#34;headerlink&#34; title=&#34;Including SPF&#34;&gt;&lt;/a&gt;Including SPF&lt;/h2&gt;&lt;p&gt;Next step for us is to include SPF.js in the page. For that we will just add the cdn link to our layout. Other methods of including are available &lt;a href=&#34;https://github.com/youtube/spfjs#download&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After this inclusion our template might look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;hljs-meta-keyword&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Rails Spfjs Demo&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; javascript_include_tag &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;//ajax.googleapis.com/ajax/libs/spf/2.3.0/spf.js&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; stylesheet_link_tag    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;application&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-symbol&#34;&gt;media:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;all&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; javascript_include_tag &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;application&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; csrf_meta_tags &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;yield&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    spf.init();&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Making-navigation-links-SPF-aware&#34;&gt;&lt;a href=&#34;#Making-navigation-links-SPF-aware&#34; class=&#34;headerlink&#34; title=&#34;Making navigation links SPF aware&#34;&gt;&lt;/a&gt;Making navigation links SPF aware&lt;/h2&gt;&lt;p&gt;However just initializing SPF.js does not magically ajaxify all navigation links. In fact by so far SPF.js does not alter the navigation in any way. We need to explicitly enable SPFjs for links for which our server knows how to server partial content. For SPF to process a link, it should have the class &amp;#39;spf-link&amp;#39;. Let us start with our navigation links:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt; &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;   &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; link_to &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Previous Page&amp;#x27;&lt;/span&gt;, posts_path(&lt;span class=&#34;hljs-symbol&#34;&gt;page:&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt;-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;: &amp;#x27;&lt;span class=&#34;hljs-title&#34;&gt;spf&lt;/span&gt;-&lt;span class=&#34;hljs-title&#34;&gt;link&lt;/span&gt;&amp;#x27; &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-variable&#34;&gt;@num_pages&lt;/span&gt; -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;   &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; link_to &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Next Page&amp;#x27;&lt;/span&gt;, posts_path(&lt;span class=&#34;hljs-symbol&#34;&gt;page:&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt;+&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;: &amp;#x27;&lt;span class=&#34;hljs-title&#34;&gt;spf&lt;/span&gt;-&lt;span class=&#34;hljs-title&#34;&gt;link&lt;/span&gt;&amp;#x27; &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One great feature of SPF.js is that it handles graceful degradation. So, since we haven&amp;#39;t done anything on the server side to generate partial contents, SPF will try to make an ajax request to server (with the special query parameter spf=navigate) and once that response format does not match what SPF expects, it will allow a full page reload.&lt;/p&gt;
&lt;h2 id=&#34;Server-side-handling-for-SPF&#34;&gt;&lt;a href=&#34;#Server-side-handling-for-SPF&#34; class=&#34;headerlink&#34; title=&#34;Server side handling for SPF&#34;&gt;&lt;/a&gt;Server side handling for SPF&lt;/h2&gt;&lt;p&gt;Let us move on to server side handling:&lt;/p&gt;
&lt;p&gt;As we have previously mentioned that SPF sends an ajax request using spf=navigate query parameter. We can detect that in our controller and send out a special response that only includes the parts of the page we need to update:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PostsController&lt;/span&gt; &amp;lt; ApplicationController&lt;/span&gt;

  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;index&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt; = params[&lt;span class=&#34;hljs-symbol&#34;&gt;:page&lt;/span&gt;].to_i
    &lt;span class=&#34;hljs-variable&#34;&gt;@num_pages&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;
    &lt;span class=&#34;hljs-variable&#34;&gt;@posts&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;.times.map &amp;#123; fake_post_summary &amp;#125;

    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; params[&lt;span class=&#34;hljs-symbol&#34;&gt;:spf&lt;/span&gt;] == &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;navigate&amp;#x27;&lt;/span&gt;
      render &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;posts/index.json&amp;#x27;&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we will have to designate the parts that can be dynamically replace using an id. In our modified &lt;code&gt;posts/_summary.html.erb&lt;/code&gt; below, &lt;code&gt;spf-posts-container&lt;/code&gt; serves that purpose:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;data-post-id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; post.id &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;%&amp;gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;title post-title&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; link_to post.title, post_path(&lt;span class=&#34;hljs-symbol&#34;&gt;id:&lt;/span&gt; post.id) &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; &amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; post.summary &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;While SPF does not require DOM node IDs to begin with &lt;code&gt;spf-&lt;/code&gt; prefix I think this is a good convention and makes the intent explict.&lt;/p&gt;
&lt;p&gt;Finally here is our json template that contains the partial page update, in the format that SPF.js &lt;a href=&#34;https://youtube.github.io/spfjs/documentation/responses/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;can process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;index.json.erb:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs erb&#34;&gt;&lt;span class=&#34;xml&#34;&gt;&amp;#123;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &amp;quot;body&amp;quot;: &amp;#123;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;    &amp;quot;spf-posts-container&amp;quot;: &amp;quot;&amp;lt;%=&lt;/span&gt;&lt;span class=&#34;ruby&#34;&gt; j render &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;posts/posts&amp;#x27;&lt;/span&gt; &lt;/span&gt;&lt;span class=&#34;xml&#34;&gt;%&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;  &amp;#125;&lt;/span&gt;
&lt;span class=&#34;xml&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While we are using a simple &lt;code&gt;json.erb&lt;/code&gt; template, it should be noted that any generic approach that can generate json response in rails, works well. So if you are already using &lt;code&gt;rabl&lt;/code&gt; or &lt;code&gt;jbuilder&lt;/code&gt; in your APIs, you can continue using that.&lt;/p&gt;
&lt;p&gt;Now when a navigation link is clicked, the json response is fetched via ajax and the page is dynamically updated - resulting in a much smoother user experience. Also note that browser url has been automatically updated and the page scrolls to the top. SPF tries to emulate the experience the experience of page change as much as possible to prevent uncanny surprises.&lt;/p&gt;
&lt;img src=&#34;/images/2015-11-26/spf_response.png&#34;&gt;

&lt;h2 id=&#34;Optional-Leveraging-rails-magic-for-leaner-controllers&#34;&gt;&lt;a href=&#34;#Optional-Leveraging-rails-magic-for-leaner-controllers&#34; class=&#34;headerlink&#34; title=&#34;(Optional) Leveraging rails magic for leaner controllers&#34;&gt;&lt;/a&gt;(Optional) Leveraging rails magic for leaner controllers&lt;/h2&gt;&lt;p&gt;While the above works, it is unweildy to handle the navigation link in each controller. We can alternatively make the &lt;code&gt;default_render&lt;/code&gt; method that is used by rails to be SPF aware. The &lt;a href=&#34;https://github.com/rails/rails/blob/7f18ea14c893cb5c9f04d4fda9661126758332b5/actionpack/lib/action_controller/metal/implicit_render.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;default implementation&lt;/a&gt; looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;default_render&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(*args)&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; template_exists?(action_name.to_s, _prefixes, &lt;span class=&#34;hljs-symbol&#34;&gt;variants:&lt;/span&gt; request.variant)
    render(*args)
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; block_given?
      &lt;span class=&#34;hljs-keyword&#34;&gt;yield&lt;/span&gt;(*args)
    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;
      logger.info &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;No template found for &lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;.name&amp;#125;&lt;/span&gt;\#&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;action_name&amp;#125;&lt;/span&gt;, rendering head :no_content&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; logger
      &lt;span class=&#34;hljs-keyword&#34;&gt;super&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can override this in our ApplicationController&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ApplicationController&lt;/span&gt; &amp;lt; ActionController::Base&lt;/span&gt;

  &lt;span class=&#34;hljs-comment&#34;&gt;# Prevent CSRF attacks by raising an exception.&lt;/span&gt;
  &lt;span class=&#34;hljs-comment&#34;&gt;# For APIs, you may want to use :null_session instead.&lt;/span&gt;
  protect_from_forgery &lt;span class=&#34;hljs-symbol&#34;&gt;with:&lt;/span&gt; &lt;span class=&#34;hljs-symbol&#34;&gt;:exception&lt;/span&gt;

  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;default_render&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(*args)&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; params[&lt;span class=&#34;hljs-symbol&#34;&gt;:spf&lt;/span&gt;] == &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;navigate&amp;#x27;&lt;/span&gt;
      render &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;controller_name&amp;#125;&lt;/span&gt;/spf_&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;action_name&amp;#125;&lt;/span&gt;.json&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;
      &lt;span class=&#34;hljs-keyword&#34;&gt;super&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all we have to do is prefix the names of our SPF specific templates with &lt;code&gt;spf_&lt;/code&gt; and we are done. Our &lt;code&gt;spf_index.json.erb&lt;/code&gt; remains unchanged.&lt;/p&gt;
&lt;p&gt;We can clean up the action and remove SPF specific code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;PostsController&lt;/span&gt; &amp;lt; ApplicationController&lt;/span&gt;

  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;index&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-variable&#34;&gt;@page&lt;/span&gt; = params[&lt;span class=&#34;hljs-symbol&#34;&gt;:page&lt;/span&gt;].to_i
    &lt;span class=&#34;hljs-variable&#34;&gt;@num_pages&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;
    &lt;span class=&#34;hljs-variable&#34;&gt;@posts&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;.times.map &amp;#123; fake_post_summary &amp;#125;
  &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;

...&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Navigation-hooks&#34;&gt;&lt;a href=&#34;#Navigation-hooks&#34; class=&#34;headerlink&#34; title=&#34;Navigation hooks&#34;&gt;&lt;/a&gt;Navigation hooks&lt;/h2&gt;&lt;p&gt;While so far everything works pretty well, we may want to hook into navigation events for greater flexibility. This may be useful for sending events to analytics service or for highlighting specific parts of page. The latter is useful because in some cases when the part replaced is very small, user might not immediate notice a quick change in the page content.&lt;/p&gt;
&lt;p&gt;For instance &lt;code&gt;spfdone&lt;/code&gt; event is invoked after the asynchronous update has been applied to the page. We can attach handlers to this event just like any other event, and hook custom logic:&lt;/p&gt;
&lt;img src=&#34;/images/2015-11-26/spfdone.png&#34;&gt;

&lt;p&gt;Let us highlight the listing of our posts using CSS 3 animations when loaded asynchronously:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;$(&lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;).on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;spfdone&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;

  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (event.originalEvent.detail.response.body[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;spf-posts-container&amp;#x27;&lt;/span&gt;]) &amp;#123;
    $(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;#spf-posts-container&amp;#x27;&lt;/span&gt;).addClass(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;flash&amp;#x27;&lt;/span&gt;)

    &lt;span class=&#34;hljs-built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;
      $(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;#spf-posts-container&amp;#x27;&lt;/span&gt;).removeClass(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;flash&amp;#x27;&lt;/span&gt;)
    &amp;#125;, &lt;span class=&#34;hljs-number&#34;&gt;3000&lt;/span&gt;)

  &amp;#125;

&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;br/&gt;

&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.flash&lt;/span&gt; &amp;#123;
  -moz-&lt;span class=&#34;hljs-attribute&#34;&gt;animation&lt;/span&gt;: flash &lt;span class=&#34;hljs-number&#34;&gt;1s&lt;/span&gt; ease-out;
  -moz-&lt;span class=&#34;hljs-attribute&#34;&gt;animation-iteration-count&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;

  -webkit-&lt;span class=&#34;hljs-attribute&#34;&gt;animation&lt;/span&gt;: flash &lt;span class=&#34;hljs-number&#34;&gt;1s&lt;/span&gt; ease-out;
  -webkit-&lt;span class=&#34;hljs-attribute&#34;&gt;animation-iteration-count&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;

  -ms-&lt;span class=&#34;hljs-attribute&#34;&gt;animation&lt;/span&gt;: flash &lt;span class=&#34;hljs-number&#34;&gt;1s&lt;/span&gt; ease-out;
  -ms-&lt;span class=&#34;hljs-attribute&#34;&gt;animation-iteration-count&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;
&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;@-webkit-keyframes&lt;/span&gt; flash &amp;#123;
    &lt;span class=&#34;hljs-number&#34;&gt;0%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: none; &amp;#125;
    &lt;span class=&#34;hljs-number&#34;&gt;50%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;#fbf8b2&lt;/span&gt;; &amp;#125;
    &lt;span class=&#34;hljs-number&#34;&gt;100%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: none; &amp;#125;
&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;@-moz-keyframes&lt;/span&gt; flash &amp;#123;
    &lt;span class=&#34;hljs-number&#34;&gt;0%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: none; &amp;#125;
    &lt;span class=&#34;hljs-number&#34;&gt;50%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;#fbf8b2&lt;/span&gt;; &amp;#125;
    &lt;span class=&#34;hljs-number&#34;&gt;100%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: none; &amp;#125;
&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;@-ms-keyframes&lt;/span&gt; flash &amp;#123;
    &lt;span class=&#34;hljs-number&#34;&gt;0%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: none; &amp;#125;
    &lt;span class=&#34;hljs-number&#34;&gt;50%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;#fbf8b2&lt;/span&gt;; &amp;#125;
    &lt;span class=&#34;hljs-number&#34;&gt;100%&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: none; &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should see a subtle flash when page content has been replaced.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;This concludes our small post on SPF integration with Rails. SPF allows for a lot more customization options beyond what our small covers. In particular SPF allows us to inject new scripts and styles dynamically, sophisticated &lt;a href=&#34;https://youtube.github.io/spfjs/documentation/caching/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;cache management&lt;/a&gt; and &lt;a href=&#34;https://youtube.github.io/spfjs/documentation/versioning/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;resource versioning&lt;/a&gt; support, which are all very useful features.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://youtube.github.io/spfjs/documentation&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;official documentation&lt;/a&gt; is a great place to start exploring more.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="Rails" />
        <category term="SPF" />
        <updated>2015-11-26T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2015/11/22/an-answer-to-react-is-the-new-java.html</id>
        <title>An answer to &#34;React is the new Java&#34;</title>
        <link rel="alternate" href="https://lorefnon.me/2015/11/22/an-answer-to-react-is-the-new-java.html"/>
        <content type="html">&lt;p&gt;This post is essentially my attempt to answer some of the concerns presented in this &lt;a href=&#34;https://news.ycombinator.com/item?id=10609159&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;opinion&lt;/a&gt; posted in HN. The author has likened the success of React with the success of Java, exemplifying how time again, what (s)he identifies as worse technology, has been pushed to a higher popularity rather than more competent alternatives available.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have been learning new technologies pretty much continuously. It&amp;#39;s not impossible, especially if you follow sites like Hacker News, to keep a finger on the direction of the industry, and then try to stay on top of the next new hot technology of the year.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;But I hear you on the &amp;quot;worse&amp;quot; technology sometimes winning. You mentioned Java; it was worse than just about all other major contenders, and is only finally losing popularity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;On a current technology fad: React seems to be designed to ignore 40 years of accumulated software best practices. [1] Separation of concerns? Who needs that any more? And the rationale for it is that it allows teams of 100 developers work together on an app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Separation-of-Concerns&#34;&gt;&lt;a href=&#34;#Separation-of-Concerns&#34; class=&#34;headerlink&#34; title=&#34;Separation of Concerns ?&#34;&gt;&lt;/a&gt;Separation of Concerns ?&lt;/h2&gt;&lt;p&gt;Well, separation on concerns is a good thing to have. But only when the concerns actually translate to different responsibilities and not when they are multiple facets of the same problem.&lt;/p&gt;
&lt;p&gt;The way I see it, managing an identifyable entity in the presentation layer is a singular concern. Breaking up this presentation entity into decoupled parts - a chunk of text based HTML template, a stylesheet to make this template visually appealing and associated javascript that alters the DOM structure depending on user interaction of change of application state, does not facilitate separation of concerns, it makes things less cohesive. &lt;a href=&#34;http://thebojan.ninja/2015/04/08/high-cohesion-loose-coupling/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Loose coupling, High Cohesion&lt;/a&gt; is a classic best practice, proven time again, and React does not ignore this, it accentuates its importance.&lt;/p&gt;
&lt;p&gt;Especially in web-applications the styling rules are intrinsically linked to the DOM structure of a widget and so is the javascript that is responsible for syncing the application state to and from the DOM. Multitude of javascript libraries have recognized this long before React including but not limited to widely popular libraries like &lt;a href=&#34;http://knockoutjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Knockout&lt;/a&gt;, &lt;a href=&#34;https://dojotoolkit.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Dojo&lt;/a&gt; and &lt;a href=&#34;https://www.sencha.com/products/extjs/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;ExtJS&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Fads-are-not-born-from-thin-air&#34;&gt;&lt;a href=&#34;#Fads-are-not-born-from-thin-air&#34; class=&#34;headerlink&#34; title=&#34;Fads are not born from thin air&#34;&gt;&lt;/a&gt;Fads are not born from thin air&lt;/h2&gt;&lt;p&gt;Promotion of best practices like &lt;a href=&#34;https://medium.com/@joshblack/stateless-components-in-react-0-14-f9798f8b992d#.h457qzmob&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Stateless components&lt;/a&gt; and &lt;a href=&#34;https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.6lh6otq97&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;composition of higher order components&lt;/a&gt; goes a long way towards ensuring separation of concerns where they matter.&lt;/p&gt;
&lt;p&gt;The upcoming Web Component technology is fueled by the widespread need for true component oriented building blocks and popularity of frameworks like Google Polymer highlights it very well.&lt;/p&gt;
&lt;h2 id=&#34;JSX-and-designer-languages&#34;&gt;&lt;a href=&#34;#JSX-and-designer-languages&#34; class=&#34;headerlink&#34; title=&#34;JSX and designer languages&#34;&gt;&lt;/a&gt;JSX and designer languages&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Open standards? Nah, how about lock-in to custom language extensions that will prevent you from migrating your code to the next web standard! Much better.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JSX is a custom language extension alright but it is not mandatory for using React. It is &lt;a href=&#34;http://jamesknelson.com/learn-raw-react-no-jsx-flux-es6-webpack/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;fairly easy&lt;/a&gt; to use vanilla javascript and benefit from all the features of React. In fact it is also easy to use React with other AltJS languages like &lt;a href=&#34;http://blog.vjeux.com/2013/javascript/react-coffeescript.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Coffeescript&lt;/a&gt;, &lt;a href=&#34;http://lorefnon.me/2015/09/21/react-and-livescript-in-harmony.html&#34;&gt;Livescript&lt;/a&gt; and &lt;a href=&#34;https://github.com/Asana/typed-react&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Typescript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While I agree that without JSX, the code is much more verbose - there are solutions like &lt;a href=&#34;https://github.com/mlmorg/react-hyperscript&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;React hyperscript&lt;/a&gt; that let you express the DOM structure within javascript, or &lt;a href=&#34;https://github.com/wix/react-templates&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;React Templates&lt;/a&gt; and &lt;a href=&#34;https://github.com/jadejs/react-jade&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;React Jade&lt;/a&gt; which allow you to use external templates with React.&lt;/p&gt;
&lt;p&gt;Also there is a &lt;a href=&#34;https://facebook.github.io/jsx/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;draft specification&lt;/a&gt; for JSX in place and some other frameworks have already &lt;a href=&#34;https://github.com/insin/msx&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;started&lt;/a&gt; adopting it.&lt;/p&gt;
&lt;h2 id=&#34;About-open-standards&#34;&gt;&lt;a href=&#34;#About-open-standards&#34; class=&#34;headerlink&#34; title=&#34;About open standards&#34;&gt;&lt;/a&gt;About open standards&lt;/h2&gt;&lt;h3 id=&#34;Web-Components&#34;&gt;&lt;a href=&#34;#Web-Components&#34; class=&#34;headerlink&#34; title=&#34;Web Components&#34;&gt;&lt;/a&gt;Web Components&lt;/h3&gt;&lt;p&gt;The reasons for not using an open standard like web components have been &lt;a href=&#34;https://github.com/facebook/react/issues/5052#issuecomment-145594782&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;explained&lt;/a&gt; by the React team:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It has turned out that the spec is incomplete with regard to things like event delegation and there are still major changes being pushed from various sides, such as Mozilla. What was in Polymer/Chrome is not the final incarnation so we&amp;#39;ve had to revert some of the support that we already added (e.g. support for event handling in shadow trees).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In terms of strategy, we&amp;#39;ll go forward with as if it didn&amp;#39;t exist and try to improve interop at the React or React-like component layer instead. I&amp;#39;ve talked with members of other popular UI frameworks and they seem to feel the same. In fact, we probably have a better chance at implementing solid interop in user land.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact there already exist some &lt;a href=&#34;http://addyosmani.com/blog/component-interop-with-react-and-custom-elements/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;resources&lt;/a&gt; for working with React and Web-components in same application.&lt;/p&gt;
&lt;p&gt;There is nothing preventing us from migrating to the next web standard. As others have pointed out in the thread, removing JSX is just a matter of running the transformer against the existing codebase and checking in the generated javascript. The output is still human readable.&lt;/p&gt;
&lt;h3 id=&#34;XML-in-javascript&#34;&gt;&lt;a href=&#34;#XML-in-javascript&#34; class=&#34;headerlink&#34; title=&#34;XML in javascript&#34;&gt;&lt;/a&gt;XML in javascript&lt;/h3&gt;&lt;p&gt;Attempts towards seamless incorporation of XML in ecmascript is not a new idea. Actionscript has had that since ages. While E4X is an &lt;a href=&#34;https://en.wikipedia.org/wiki/ECMAScript_for_XML&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;open standard&lt;/a&gt;, pragmatic reasons have been &lt;a href=&#34;http://blog.vjeux.com/2013/javascript/jsx-e4x-the-good-parts.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;put forward&lt;/a&gt; by React team for not embracing it entirely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The major use case of XML within Javascript is to write HTML tags. Unfortunately, what E4X generates is not a DOM node. In order to use it to generate DOM nodes, you&amp;#39;ve got to do a conversion phase not provided by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The second use case of XML is to represent data. In Javascript world, this use case is already being fulfilled by JSON. E4X only supports strings as a data type where Javascript objects can contain numbers, booleans, functions ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;All the code is not going to be converted to E4X right away. There&amp;#39;s going to be a transition phase where E4X and non E4X code will have to co-exist. The fact that the objects E4X generates are not accessible from non E4X code means that none of the libraries ever written can work with E4X structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;On-meritocracy-vs-mediocracy&#34;&gt;&lt;a href=&#34;#On-meritocracy-vs-mediocracy&#34; class=&#34;headerlink&#34; title=&#34;On meritocracy vs mediocracy&#34;&gt;&lt;/a&gt;On meritocracy vs mediocracy&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;And how many app teams have 100 or more active developers? Probably fewer than a dozen, and I submit that none of them probably should. Certainly not the Facebook app: It has a lot of features, but not that many features, and yet it has a 150Mb footprint.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When I hear things like that, I can&amp;#39;t help but fill in &amp;quot;junior&amp;quot; or &amp;quot;mediocre&amp;quot; in front of &amp;quot;developers.&amp;quot; React helps to prevent people from breaking each others&amp;#39; code when you have bloated development teams filled with junior developers. React has some cool ideas, but all told I think it&amp;#39;s a step backward for software engineering, and certainly isn&amp;#39;t as much of a help for small teams, especially if you want to have a CSS/SCSS/LESS expert styling your product without having to dig through JSX files, for instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a small app with a small team, there is little use for any framework at all, but software applications have this uncanny tendency to unexpectedly grow large depending on changing requirements, expanding scope. Given the above, I would certainly feel more comfortable working on a system where I can change the appearance of a component with confidence that will not introduce subtle changes in totally unrelated parts of my application, probably parts that I know nothing about.&lt;/p&gt;
&lt;p&gt;While yes, there are fewer teams that have 100 or more active developers, but high churn rates are an unavoidable problem especially in the startup ecosystems. While a competent developer will certainly be able to jump into an unknown codebase and in due time figure out his/her way - but if the codebase is structured around best practices distilled by the community the time required in the same is drastically reduced. Optimizing the process around that seems like a very good idea.&lt;/p&gt;
&lt;h2 id=&#34;On-stylesheets-a-system-of-cascading-problems&#34;&gt;&lt;a href=&#34;#On-stylesheets-a-system-of-cascading-problems&#34; class=&#34;headerlink&#34; title=&#34;On stylesheets - a system of cascading problems&#34;&gt;&lt;/a&gt;On stylesheets - a system of cascading problems&lt;/h2&gt;&lt;p&gt;Adding to the problem is that automated regression testing of CSS is time consuming and error prone. While there are &lt;a href=&#34;https://css-tricks.com/automating-css-regression-testing/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;solutions&lt;/a&gt; I think the crux of the problem is that our current styling system is a broken technology - globally shared stylesheets are evil and technologies like &lt;a href=&#34;https://github.com/FormidableLabs/radium&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Radium&lt;/a&gt; are steps in the right direction.&lt;/p&gt;
&lt;p&gt;While it isn&amp;#39;t like we have not tried to solve this problem &lt;a href=&#34;https://gridstylesheets.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;before&lt;/a&gt;, I am really glad to see practical alternatives to stylesheets gathering traction.&lt;/p&gt;
&lt;h2 id=&#34;The-good-parts&#34;&gt;&lt;a href=&#34;#The-good-parts&#34; class=&#34;headerlink&#34; title=&#34;The good parts&#34;&gt;&lt;/a&gt;The good parts&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;I do like React&amp;#39;s idea of the Virtual DOM for optimization, but you can get that without using React. [2] React Native is great for using native components and driving them from JavaScript, but it&amp;#39;s also not the only game in town. [3]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree, much has been written about these benefits, and the availability of alternatives is not exactly a secret either. I don&amp;#39;t have much to add.&lt;/p&gt;
&lt;h2 id=&#34;Conclusion&#34;&gt;&lt;a href=&#34;#Conclusion&#34; class=&#34;headerlink&#34; title=&#34;Conclusion&#34;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Back to the original point, though: You can stay on top of the Hot New Technologies, but when there are good technical reasons to use alternate technologies, stay on top of those as well. And then explain clearly to your clients (or employers) why the current fad is a fad, and how to get the key benefits of that stack without its drawbacks. Oh, and choose clients (or employers) who will listen to strong technical arguments. :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While I disagree with the primary premise, this is a very strong and sound advise. I whole-heartedly agree that solutions should be rationally vetted and benchmarked before being put to use. I hope that arguments I have presented above are perceived as rationally just. Any comments or suggestions are more than welcome.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="React" />
        <updated>2015-11-22T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2015/11/15/a-minimal-setup-for-using-es6-modules-in-rails.html</id>
        <title>A minimal setup for using ES6 modules in Rails</title>
        <link rel="alternate" href="https://lorefnon.me/2015/11/15/a-minimal-setup-for-using-es6-modules-in-rails.html"/>
        <content type="html">&lt;p&gt;While ES6 adoption is progressively improving across browsers, and the sprockets team is planning to integrate ES6 features into Rails asset pipeline in near future, using a widely popular transpiler: &lt;a href=&#34;https://babeljs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Babel&lt;/a&gt; we can leverage many of those features right away. The specific aspect of interest for this post is ES6 modules feature which provides a standardized module system for javascript.&lt;/p&gt;
&lt;p&gt;While babel does have a solution for ES6 modules, rather than handling dependency resolution itself - it transpiles the modules to existing javascript based module systems - the most popular ones being &lt;a href=&#34;https://github.com/amdjs&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;AMD&lt;/a&gt; and &lt;a href=&#34;https://commonjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;CommonJS&lt;/a&gt;. This post does not go into a compartive analysis of them, but there is an excellent &lt;a href=&#34;addyosmani.com/writing-modular-js/&#34;&gt;article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/addyosmani&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Addy Osmani&lt;/a&gt; which provides an in-depth elaboration on the topic.&lt;/p&gt;
&lt;p&gt;The solution &lt;a href=&#34;https://babeljs.io/docs/setup/#rails&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;recommended&lt;/a&gt; by the Babel team for using babel with rails, is through an experimental &lt;a href=&#34;https://github.com/TannerRogalsky/sprockets-es6&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;sprockets-es6&lt;/a&gt; gem, which is intended to be a PoC for future work to be integrated into Sprockets. Quoting from the README:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This plugin is primarily experimental and will never reach a stable 1.0. The purpose is to test out BabelJS features on Sprockets 3.x and include it by default in Sprockets 4.x.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apart from the experimental status, the key issue with using this gem is that it is non-trivial to get ES6 modules to work with it. The primary reason being that, as mentioned above, even though babel transpiles ES6 modules to CommonJS (or AMD), we still need to provide an implementation of the relevant module system that will enable the browsers to recognize the modules. This means we will have to include another dependency like &lt;a href=&#34;https://github.com/maccman/sprockets-commonjs&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;sprockets-commonjs&lt;/a&gt;. However there is a caveat:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One caveat to the approach this library takes, is that dependencies loaded through require() will not be added to the dependency graph. This library will not parse the AST tree for require calls. This decision has been made for a variety of reasons, but it does mean you need to require files through both CommonJS and Sprockets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using AMD modules with &lt;a href=&#34;https://github.com/jwhitley/requirejs-rails&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;requirejs-rails&lt;/a&gt; is something that works, however javascript community has largely adopted &lt;a href=&#34;https://npmjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;npm&lt;/a&gt; for package management framework. For example - jQuery plugin repository now states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The jQuery Plugin Registry is in read-only mode.
New plugin releases will not be processed.
We recommend moving to npm, using &amp;quot;jquery-plugin&amp;quot; as the keyword in your package.json. The npm blog has instructions for publishing your plugin to npm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is however a simpler solution: Using the gem &lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;browserify-rails&lt;/a&gt; which bridges sprockets and &lt;a href=&#34;http://browserify.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;browserify&lt;/a&gt;. Browserify is a javascript bundler that leverages CommonJS :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Browserify lets you require(&amp;#39;modules&amp;#39;) in the browser by bundling up all of your dependencies&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The great thing about browserify is that we can hook in transforms which can take care of additional pre-processing before the &lt;code&gt;require&lt;/code&gt;d files are bundled up. Of particular interest to us, is the browserify transform for babel - &lt;a href=&#34;https://github.com/babel/babelify&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;babelify&lt;/a&gt; which allows us to  sidestep the caveat above. We need to have a node installation on the system though, just having a javascript runtime is not sufficient - but this is not much of an issue because node.js is now widely supported on all widely used platforms.&lt;/p&gt;
&lt;p&gt;To get this to work we need to add &lt;code&gt;browserify-rails&lt;/code&gt; to Gemfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;gem &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;browserify-rails&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as well as a &lt;code&gt;package.json&lt;/code&gt; in project root:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&amp;#123;
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;license&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;MIT&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;engines&amp;quot;&lt;/span&gt;: &amp;#123;
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;gt;= 0.10&amp;quot;&lt;/span&gt;
    &amp;#125;,
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;: &amp;#123;
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;babel-preset-es2015&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^6.1.18&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;babelify&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^7.2.0&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;browserify&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;~&amp;gt; 10.2.4&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;browserify-incremental&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;^3.0.1&amp;quot;&lt;/span&gt;
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to use other javascript libraries available through npm we can include them directly in the package.json. There is a single caveat though: We can not directly start using ES6 modules in our top level files (typically application.js) but only in our &lt;code&gt;require&lt;/code&gt;d files:&lt;/p&gt;
&lt;p&gt;So our application.js can be fairly minimal with a single require statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./main&amp;#x27;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can use ES6 modules in main.js&lt;/p&gt;
&lt;p&gt;main.js:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; hello &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./hello&amp;#x27;&lt;/span&gt;

hello()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hello.js:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;hello&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;
    alert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello world&amp;#x27;&lt;/span&gt;);
&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; hello;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the server now and visit the home page, we should be greeted with a hello prompt.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="Rails" />
        <category term="ES6" />
        <updated>2015-11-15T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2015/09/21/react-and-livescript-in-harmony.html</id>
        <title>React and Livescript in harmony</title>
        <link rel="alternate" href="https://lorefnon.me/2015/09/21/react-and-livescript-in-harmony.html"/>
        <content type="html">&lt;h1 id=&#34;Overview&#34;&gt;&lt;a href=&#34;#Overview&#34; class=&#34;headerlink&#34; title=&#34;Overview&#34;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;http://livescript.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Livescript&lt;/a&gt; is a programming language that compiles to readable javascript (similar to coffeescript) and provides language level facilities to &lt;a href=&#34;http://livescript.net/#inspiration&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;encourage&lt;/a&gt; functional programming. &lt;a href=&#34;https://facebook.github.io/react/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;React.js&lt;/a&gt; is a user interface library from &lt;a href=&#34;https://facebook.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;facebook&lt;/a&gt; that uses &lt;a href=&#34;http://calendar.perfplanet.com/2013/diff/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;intelligent heuristics&lt;/a&gt; for efficient DOM updates, simplifying the process of building data driven applications. This post outlines how the two can play well together, and tries to demostrate how livescript allows us write much more compact and succinct code. Basic familiarity with both of them is assumed.&lt;/p&gt;
&lt;p&gt;To begin with let us see what a basic component looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;application-container&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;br&gt;

&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;ContactList = React.create-&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
  render: -&amp;gt;
    React.create-element &lt;span class=&#34;hljs-string&#34;&gt;\ul,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
      React.create-element &lt;span class=&#34;hljs-string&#34;&gt;\li,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, contact.name

el = React.create-element ContactList, contacts: [
  * name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
  * name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
]

React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images/Screen Shot 2015-09-21 at 12.42.18 pm.png&#34;&gt;

&lt;p&gt;This is very similar to what we would have written if we were using vanilla javascript. The only primary advantages are indentation based nesting, elimination of a lot of superfluous syntax - braces and parenthesis and implicit returns. However we can do much better than this.&lt;/p&gt;
&lt;p&gt;Because Livescript was forked from Coffeescript, it inherits Coffeescript&amp;#39;s class syntax which we can use to extend &lt;code&gt;React.Component&lt;/code&gt;. However the benefits of doing so are pretty-much marginal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ContactList&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;React&lt;/span&gt;.&lt;span class=&#34;hljs-title&#34;&gt;Component&lt;/span&gt;&lt;/span&gt;

  render: -&amp;gt;
    React.create-element &lt;span class=&#34;hljs-string&#34;&gt;\ul,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
      React.create-element &lt;span class=&#34;hljs-string&#34;&gt;\li,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, contact.name&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that we may notice is that the above code does not use &lt;a href=&#34;https://facebook.github.io/react/docs/jsx-in-depth.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;JSX&lt;/a&gt;. While yes, it is &lt;a href=&#34;https://github.com/facebook/react/issues/47#issuecomment-18877423&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;possible&lt;/a&gt; to use JSX with livescript using backticks to escape xml constructs and then passing the generated js to babel, it is a hack we better forgo. As we will see soon, livescript native constructs allow for much more succinct expressions than the xml boilerplate that comes JSX.&lt;/p&gt;
&lt;p&gt;Livescript&amp;#39;s feature that almost everything is a expression is particularly helpful when we have conditional logic in our dom generation code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;element = React~create-element

ContactList = React.create-&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;do&lt;/span&gt;&lt;/span&gt;

  render: -&amp;gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\ul,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
      element &lt;span class=&#34;hljs-string&#34;&gt;\li,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;,
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.email
          element &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;contact.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, contact.name
        &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;
          contact.name

el = element ContactList, contacts: [
  * name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
  * name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
    email: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;albus@hogwarts.magic&amp;#x27;&lt;/span&gt;
]

React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images/Screen Shot 2015-09-21 at 12.42.05 pm.png&#34;&gt;

&lt;p&gt;When the render function becomes complex, it is often more readable to use livescript&amp;#39;s pipe operator to chain the operations. This is particularly handy in conjugation with utility libraries geared towards functional programming - the example below uses &lt;a href=&#34;http://ramdajs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Ramda&lt;/a&gt;. Other alternatives include &lt;a href=&#34;http://underscorejs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;underscore&lt;/a&gt;, &lt;a href=&#34;https://lodash.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;lodash&lt;/a&gt;, &lt;a href=&#34;http://www.preludels.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;prelude.ls&lt;/a&gt; etc.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;element = React~create-element

ContactList = React.create-&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;do&lt;/span&gt;&lt;/span&gt;

  render-avatar: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.avatar
    &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\img,&lt;/span&gt; src: contact.avatar, height: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;N/A&amp;#x27;&lt;/span&gt;

  render-label: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.email
    &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;contact.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, contact.name
    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, contact.name

  render-contact-row: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;(contact)&lt;/span&gt;-&amp;gt;&lt;/span&gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; key: contact.id, [
      element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @render-avatar contact
      element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @render-label contact
    ]

  render-head: -&amp;gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\thead,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, [
      element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, [
        element &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Avatar&amp;#x27;&lt;/span&gt;
        element &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Name&amp;#x27;&lt;/span&gt;
      ]
    ]

  render: -&amp;gt;
    @props.contacts
    |&amp;gt; R.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; @~render-contact-row
    |&amp;gt; &lt;span class=&#34;hljs-function&#34;&gt;~&amp;gt;&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\tbody,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
    |&amp;gt; &lt;span class=&#34;hljs-function&#34;&gt;~&amp;gt;&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\table,&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;-&lt;span class=&#34;hljs-title&#34;&gt;name&lt;/span&gt;: \&lt;span class=&#34;hljs-title&#34;&gt;contacts&lt;/span&gt; , [ @&lt;span class=&#34;hljs-title&#34;&gt;render-head&lt;/span&gt;!, &lt;span class=&#34;hljs-title&#34;&gt;it&lt;/span&gt; ]&lt;/span&gt;

el = element ContactList, contacts: [
  * id: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
    avatar: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://cdn.playbuzz.com/cdn/8de88741-d729-4319-aa46-e8a544a20439/f7cade9d-8daf-42b3-8839-3e0e1f3db283.jpeg&amp;#x27;&lt;/span&gt;
  * id: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
    email: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;albus@hogwarts.magic&amp;#x27;&lt;/span&gt;
]


React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images/Screen Shot 2015-09-21 at 2.15.15 pm.png&#34;&gt;

&lt;p&gt;It may be tempting to further shorten the functions taking advantage of livescript&amp;#39;s default argument &lt;code&gt;it&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;render-avatar: -&amp;gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.avatar
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\img,&lt;/span&gt; src: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.avatar, height: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;N/A&amp;#x27;&lt;/span&gt;

render-label: -&amp;gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.email
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.name
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.name

render-contact-row: -&amp;gt;
  element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; key: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.id, [
    element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @render-avatar &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @render-label &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
  ]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I strongly recommend against doing that, because having the arguments specified in the function signature upfront enhances readability.&lt;/p&gt;
&lt;p&gt;Also note that the top down construction flow composition can also be realized in javascript using Ramda&amp;#39;s &lt;code&gt;pipe&lt;/code&gt; but livescript just makes it simpler by providing a language level operator.&lt;/p&gt;
&lt;p&gt;For simpler components (which are just responsible for presenting something passed as props, and do not need lifecycle methods etc.) it may be useful to define a micro-component builder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;micro-component&lt;/span&gt; = &lt;span class=&#34;hljs-params&#34;&gt;(render)&lt;/span&gt;-&amp;gt;&lt;/span&gt; React.create-factory React.create-&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title&#34;&gt;render&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have that, it makes it a lot more easier for us to follow React&amp;#39;s recommendation of having lightweight modular components which can be easily composed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;ContactAvatar = micro-component -&amp;gt;
  &amp;#123; contact &amp;#125; = @props
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.avatar
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\img,&lt;/span&gt; src: contact.avatar, height: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;N/A&amp;#x27;&lt;/span&gt;

ContactLabel = micro-component -&amp;gt;
  &amp;#123; contact &amp;#125; = @props
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.email
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;contact.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, contact.name
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; element &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, contact.name

ContactListRow = micro-component -&amp;gt;
  element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; key: @props.contact.id, [
    element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, ContactAvatar @props
    element &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, ContactLabel @props
  ]

ContactList = micro-component -&amp;gt;
  element &lt;span class=&#34;hljs-string&#34;&gt;\table,&lt;/span&gt; &lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt;-&lt;span class=&#34;hljs-title&#34;&gt;name&lt;/span&gt;: \&lt;span class=&#34;hljs-title&#34;&gt;contacts&lt;/span&gt;, [&lt;/span&gt;
    element &lt;span class=&#34;hljs-string&#34;&gt;\thead,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, [
      element &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, [
        element &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Avatar&amp;#x27;&lt;/span&gt;
        element &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Name&amp;#x27;&lt;/span&gt;
      ]
    ]
    element &lt;span class=&#34;hljs-string&#34;&gt;\tbody,&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; -&amp;gt; ContactListRow &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;
      contact: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
      key: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.id
  ]

el = ContactList contacts: [
  * id: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
    avatar: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://cdn.playbuzz.com/cdn/8de88741-d729-4319-aa46-e8a544a20439/f7cade9d-8daf-42b3-8839-3e0e1f3db283.jpeg&amp;#x27;&lt;/span&gt;
  * id: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
    email: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;albus@hogwarts.magic&amp;#x27;&lt;/span&gt;
]
React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Libraries like &lt;a href=&#34;https://github.com/mlmorg/react-hyperscript&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;&lt;code&gt;react-hyperscript&lt;/code&gt;&lt;/a&gt; may be used to further reduce the dom construction boilerplate :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs livescript&#34;&gt;
&lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;! &amp;#123; react-hyperscript: h, react: React &amp;#125;

ContactAvatar = micro-component -&amp;gt;
  &amp;#123; contact &amp;#125; = @props
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.avatar
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; h &lt;span class=&#34;hljs-string&#34;&gt;\img,&lt;/span&gt; src: contact.avatar, height: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; h &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;N/A&amp;#x27;&lt;/span&gt;

ContactLabel = micro-component -&amp;gt;
  &amp;#123; contact &amp;#125; = @props
  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; contact.email
  &lt;span class=&#34;hljs-keyword&#34;&gt;then&lt;/span&gt; h &lt;span class=&#34;hljs-string&#34;&gt;\a,&lt;/span&gt; href: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;contact.email&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;, contact.name
  &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; h &lt;span class=&#34;hljs-string&#34;&gt;\span,&lt;/span&gt; contact.name

ContactListRow = micro-component -&amp;gt;
  h &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; key: @props.contact.id, [
    h &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; ContactAvatar @props
    h &lt;span class=&#34;hljs-string&#34;&gt;\td,&lt;/span&gt; ContactLabel @props
  ]

ContactList = micro-component -&amp;gt;
  h &lt;span class=&#34;hljs-string&#34;&gt;\table.contacts,&lt;/span&gt; [
    h &lt;span class=&#34;hljs-string&#34;&gt;\thead,&lt;/span&gt; [
      h &lt;span class=&#34;hljs-string&#34;&gt;\tr,&lt;/span&gt; [
        h &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Avatar&amp;#x27;&lt;/span&gt;
        h &lt;span class=&#34;hljs-string&#34;&gt;\th,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Name&amp;#x27;&lt;/span&gt;
      ]
    ]
    h &lt;span class=&#34;hljs-string&#34;&gt;\tbody,&lt;/span&gt; @props.contacts.&lt;span class=&#34;hljs-keyword&#34;&gt;map&lt;/span&gt; -&amp;gt; ContactListRow &lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt;
      contact: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;
      key: &lt;span class=&#34;hljs-literal&#34;&gt;it&lt;/span&gt;.id
  ]

el = ContactList contacts: [
  * id: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Harry Potter&amp;#x27;&lt;/span&gt;
    avatar: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://cdn.playbuzz.com/cdn/8de88741-d729-4319-aa46-e8a544a20439/f7cade9d-8daf-42b3-8839-3e0e1f3db283.jpeg&amp;#x27;&lt;/span&gt;
  * id: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,
    name: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Albus Dumbledore&amp;#x27;&lt;/span&gt;
    email: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;albus@hogwarts.magic&amp;#x27;&lt;/span&gt;
]
React.render el, &lt;span class=&#34;hljs-built_in&#34;&gt;document&lt;/span&gt;.get-element-&lt;span class=&#34;hljs-keyword&#34;&gt;by&lt;/span&gt;-id &lt;span class=&#34;hljs-string&#34;&gt;\application-container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apart from getting rid of null for attribute hashes, hyperscript is particularly useful for shorter syntax for class names and ids. Also it insulates our codebase against changes in the DOM builder API, which have happened in past.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="React" />
        <category term="Functional Programming" />
        <updated>2015-09-21T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2015/08/24/smarter-knockout-applications-with-es-next.html</id>
        <title>Smarter knockout applications with ES6/7</title>
        <link rel="alternate" href="https://lorefnon.me/2015/08/24/smarter-knockout-applications-with-es-next.html"/>
        <content type="html">&lt;h1 id=&#34;Overview&#34;&gt;&lt;a href=&#34;#Overview&#34; class=&#34;headerlink&#34; title=&#34;Overview&#34;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;This post is an outline of ES6/7 features that we can leverage today in our &lt;a href=&#34;http://knockoutjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Knockout&lt;/a&gt; based applications to make them more maintainable.&lt;/p&gt;
&lt;p&gt;Thanks to powerful and reliable transpilers like &lt;a href=&#34;http://babeljs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Babel&lt;/a&gt; we don&amp;#39;t have to wait for mass adoption across browser vendors, to try out features from next generation javascript. While this post is essentially an overview written in a specific context, ie. Knockout applications, I encourage readers to refer to excellent online resources like &lt;a href=&#34;https://leanpub.com/javascriptallongesix&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Javascript Allonge&lt;/a&gt; for a broader coverage.&lt;/p&gt;
&lt;h2 id=&#34;View-Models-as-ES-6-classes&#34;&gt;&lt;a href=&#34;#View-Models-as-ES-6-classes&#34; class=&#34;headerlink&#34; title=&#34;View Models as ES 6 classes:&#34;&gt;&lt;/a&gt;View Models as ES 6 classes:&lt;/h2&gt;&lt;p&gt;View models are typically defined as javascript constructor functions. ES6 classes offer a bit of syntax sugar over prototypal inheritance and the outcome might appeal to people coming other object oriented languages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SomeViewModel&lt;/span&gt; &lt;/span&gt;&amp;#123;
  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName = ko.observable();
  &amp;#125;
&amp;#125;

ko.components.register(&amp;#123;
  &lt;span class=&#34;hljs-attr&#34;&gt;viewModel&lt;/span&gt;: SomeViewModel,
  &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;lt;div data-bind=&amp;quot;text: firstName&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#x27;&lt;/span&gt;
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Arrow-functions-in-computed-properties&#34;&gt;&lt;a href=&#34;#Arrow-functions-in-computed-properties&#34; class=&#34;headerlink&#34; title=&#34;Arrow functions in computed properties:&#34;&gt;&lt;/a&gt;Arrow functions in computed properties:&lt;/h2&gt;&lt;p&gt;In computed properties it is more often than not desirable that the context of function be the same as that of the outer function. Patterns like &lt;code&gt;var self = this&lt;/code&gt; have been adopted widely for situations like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SomeViewModel&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;
  &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName = ko.observable();
  &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName = ko.observable();
  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;;
  &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.fullName = ko.computed(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; self.firstName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; + self.lastName();
  &amp;#125;);
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrow functions simplify this use case by providing special syntax for functions which, as MDN &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;explains&lt;/a&gt; it, capture the this value of the enclosing context&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SomeViewModel&lt;/span&gt; &lt;/span&gt;&amp;#123;
  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName = ko.observable();
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName = ko.observable();
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.fullName = ko.computed(&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;
      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; + &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName();
    &amp;#125;);
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or for smaller functions we can reduce the verbosity even further:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-class&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;SomeViewModel&lt;/span&gt; &lt;/span&gt;&amp;#123;
  &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName = ko.observable();
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName = ko.observable();
    &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.fullName = ko.computed(&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.firstName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; + &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.lastName());
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Imports-for-code-organization&#34;&gt;&lt;a href=&#34;#Imports-for-code-organization&#34; class=&#34;headerlink&#34; title=&#34;Imports for code organization:&#34;&gt;&lt;/a&gt;Imports for code organization:&lt;/h2&gt;&lt;p&gt;JS imports are the new standard approach to deal with modularization in JS code, and I can only anticipate &lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;more&lt;/a&gt; and &lt;a href=&#34;http://aurelia.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;more&lt;/a&gt; libraries moving to them from older patterns like &lt;a href=&#34;https://github.com/amdjs/amdjs-api/wiki/AMD&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;AMD&lt;/a&gt; or &lt;a href=&#34;http://wiki.commonjs.org/wiki/CommonJS&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;CommonJS&lt;/a&gt;. Babel can transpile imports to require invocations that follow AMD/CommonJS syntax so you can move to newer syntax progressively and continue using your existing loaders/bundlers. My personal recommendation for bundler is &lt;a href=&#34;http://webpack.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;webpack&lt;/a&gt; which offers interesting features like &lt;a href=&#34;http://webpack.github.io/docs/code-splitting.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Code splitting&lt;/a&gt; out of the box.&lt;/p&gt;
&lt;h2 id=&#34;Template-strings&#34;&gt;&lt;a href=&#34;#Template-strings&#34; class=&#34;headerlink&#34; title=&#34;Template strings&#34;&gt;&lt;/a&gt;Template strings&lt;/h2&gt;&lt;p&gt;Template strings make it easy to define small multi-line templates along side view models.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;ko.components.register(&amp;#123;
  viewModel: SomeViewModel,
  template:
    `&amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt; Hello friend, nice to meet you &amp;lt;/h1&amp;gt;
      &amp;lt;div&amp;gt;
        Dear &amp;lt;span data-bind=&amp;quot;text: firstName()&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; It is nice to meet you.
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;`
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although for larger templates I recommend using something like &lt;a href=&#34;https://github.com/webpack/raw-loader&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;webpack-raw-loader&lt;/a&gt; so you can write:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;ko.components.register(&amp;#123;
  &lt;span class=&#34;hljs-attr&#34;&gt;viewModel&lt;/span&gt;: SomeViewModel,
  &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./some_view_model.html&amp;#x27;&lt;/span&gt;)
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However larger templates more often than not indicate need for fine-grained modularization, so the above recommendation should be taken with a pinch of salt.&lt;/p&gt;
&lt;h2 id=&#34;ES7-Decorators-for-Component-registration&#34;&gt;&lt;a href=&#34;#ES7-Decorators-for-Component-registration&#34; class=&#34;headerlink&#34; title=&#34;ES7 Decorators for Component registration:&#34;&gt;&lt;/a&gt;ES7 Decorators for Component registration:&lt;/h2&gt;&lt;p&gt;If you have been keeping up with advancements with Angular 2.0, you may have noticed the use of annotations for component registration. Here is an example from their &lt;a href=&#34;https://angular.io/docs/js/latest/quickstart.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;quick start tutorial&lt;/a&gt; showing how annotations go hand in hand with the new class syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;// Annotation section
@Component(&amp;#123;
  selector: &amp;#x27;my-app&amp;#x27;
&amp;#125;)
@View(&amp;#123;
  template: &amp;#x27;&amp;lt;h1&amp;gt;Hello &amp;#123;&amp;#123; name &amp;#125;&amp;#125;&amp;lt;/h1&amp;gt;&amp;#x27;
&amp;#125;)
// Component controller
class MyAppComponent &amp;#123;
  name: string;
  constructor() &amp;#123;
    this.name = &amp;#x27;Alice&amp;#x27;;
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While I refer to &lt;a href=&#34;https://github.com/wycats/javascript-decorators&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;this excellent writeup&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/wycats&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Yehuda Katz&lt;/a&gt; on javascript decorators for an indepth overview, the following snippet is a quick overview as to how we can leverage javascript decorators to handle component registration in knockout:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;function Component(params) &amp;#123;
  return function(viewModel) &amp;#123;
    ko.components.register(params.name, &amp;#123;
      viewModel: viewModel,
      template: params.template
    &amp;#125;)
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once our &lt;code&gt;Component&lt;/code&gt; decorator has been defined we can simply use it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;@Component(&amp;#123;
  name: &amp;#x27;my-app-component&amp;#x27;,
  template:
    `&amp;lt;div&amp;gt;
      ...
    &amp;lt;/div&amp;gt;`
&amp;#125;)
class MyAppViewModel &amp;#123;
  constructor() &amp;#123;
    ...
  &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may be tempted to use the &lt;code&gt;target.name&lt;/code&gt; to enforce some module naming conventions, but before you tread that way please be aware of lack of IE support for &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Function#name&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This concludes this overview for now, though there is a lot to be explored in next generation javascript beyond this basic introduction. As always, I welcome any suggestions or requests for improvement in the comments section below.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="KnockoutJS" />
        <updated>2015-08-24T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2014/03/10/decoupling-frontend-with-gulp-and-node-http-proxy.html</id>
        <title>Decoupling your frontend development with gulp and http-proxy</title>
        <link rel="alternate" href="https://lorefnon.me/2014/03/10/decoupling-frontend-with-gulp-and-node-http-proxy.html"/>
        <content type="html">&lt;p&gt;In past developers have often relied on backend-specific toolchains for
web application frontends. Some examples would be &lt;a href=&#34;http://edgeguides.rubyonrails.org/asset_pipeline.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Rails asset pipeline&lt;/a&gt; or
the legacy ant based toolchain for YUI. However recently node.js based tooling support
for frontend technologies has significantly evolved and it is quite viable
to use a node.js based toolchain for managing your frontend projects, even if
the backend is not node.js, thus keeping the workflow decoupled from the backend.&lt;/p&gt;
&lt;p&gt;This has multiple advantages, primary among them being that javascript
developers can configure their tools using a language they already are
familiar with without relying on server-side developers.&lt;/p&gt;
&lt;p&gt;The workflow I outline in this post utilizes &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;gulp&lt;/a&gt; and node module &lt;a href=&#34;https://www.npmjs.org/package/http-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;http-proxy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Gulp is a build system. I prefer it over alternative task runners like grunt
and mimosa because, as the gulp&amp;#39;s website states quite succinctly :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gulp&amp;#39;s use of streams and code-over-configuration makes for a simpler and more intuitive build.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A claim that I have found to be true in practice.&lt;/p&gt;
&lt;p&gt;The http-proxy library helps us connect with our backend seemlessly and at the same
time keep the codebase in a separate project. By configuring a proxy server
we can load frontend assets from our local system while route the rest of the
requests to a potentially remote backend. This is particularly helpful when
we have multiple loosely coupled mini-applications backed by a single monolithic
server-side codebase.&lt;/p&gt;
&lt;p&gt;An alternative to this would be to configure the backend to support &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/cors/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;cross origin
requests&lt;/a&gt;, but this is really unnecessary if eventually the application will be
served from the same domain.&lt;/p&gt;
&lt;p&gt;Let us say we have a javascript heavy dashboard which we would like to develop
in a separate project. Here is the directory structure I&amp;#39;ll use. Please note that following this
directory structure is not mandatory and is mainly illustrative.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;project
  |_ gulpfile.js    &lt;span class=&#34;hljs-comment&#34;&gt;# task runner configuration&lt;/span&gt;
  |_ dashboard      &lt;span class=&#34;hljs-comment&#34;&gt;# generated files go here&lt;/span&gt;
  |  |_ css
  |  |_ js
  |_ node_modules   &lt;span class=&#34;hljs-comment&#34;&gt;# node.js dependencies are installed here&lt;/span&gt;
  |_ package.json   &lt;span class=&#34;hljs-comment&#34;&gt;# configuration for node.js packages&lt;/span&gt;
  |_ server.js      &lt;span class=&#34;hljs-comment&#34;&gt;# proxy server&lt;/span&gt;
  |_ src            &lt;span class=&#34;hljs-comment&#34;&gt;# source files&lt;/span&gt;
     |_ css
     |_ js&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When deploying the application we can simply drop the dashboard folder to the
web-root of our application eg. the public folder of a Rails application.&lt;/p&gt;
&lt;p&gt;Next we illustrate usage of http-proxy module to create a simple proxy server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// server.js&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; httpProxy = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http-proxy&amp;#x27;&lt;/span&gt;),
    connect = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;connect&amp;#x27;&lt;/span&gt;),
    livereload = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;connect-livereload&amp;#x27;&lt;/span&gt;)

&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; proxy = httpProxy.createProxyServer()

&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; app = connect()
    .use(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/dashboard&amp;#x27;&lt;/span&gt;, connect.static(__dirname+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/dashboard&amp;#x27;&lt;/span&gt;))
    .use(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;req, res&lt;/span&gt;)&lt;/span&gt;&amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (req.url.indexOf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;dashboard&amp;#x27;&lt;/span&gt;) == -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;
            proxy.web(req, res, &amp;#123;
                &lt;span class=&#34;hljs-attr&#34;&gt;target&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://localhost:3000&amp;#x27;&lt;/span&gt;
            &amp;#125;)
        &amp;#125;
    &amp;#125;)
    .listen(&lt;span class=&#34;hljs-number&#34;&gt;4000&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before running the server, install the node.js dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;npm install --save connect http-proxy connect-livereload&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What the above script does is simply serve the urls that
have dashboard in the url from dashboard folder while
directing the rest of the requests to another server, which
in case is simply &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For complex routing we can use some of the &lt;a href=&#34;https://nodejsmodules.org/tags/router&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;routing libraries&lt;/a&gt;
for node.js but for our example the simple script above works
pretty well.&lt;/p&gt;
&lt;p&gt;Our gulp tasks go in gulpfile.js. Configuring gulp tasks is fairly
simple. While the &lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;official documentation&lt;/a&gt;
is a thorough reference, we illustrate the workflow through some examples.
For example creating a task to clean our target js and css
folders is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; gulp = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;gulp&amp;#x27;&lt;/span&gt;),
    clean = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;gulp-clean&amp;#x27;&lt;/span&gt;)

gulp.task(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;clean&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;
    gulp.src([&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./dashboard/js/*&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./dashboard/css/*&amp;#x27;&lt;/span&gt;])
        .pipe(clean())
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stream based based approach really shines when we use pre-processors for
our js or css files. For example to use stylus for css we can add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; stylus = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;gulp-stylus&amp;#x27;&lt;/span&gt;)

gulp.task(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;css&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;
    gulp.src(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./src/css/*.styl&amp;#x27;&lt;/span&gt;)
        .pipe(stylus())
        .pipe(gulp.dest(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./dashboard/css&amp;#x27;&lt;/span&gt;))
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To manage dependencies with browserify we can have:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;gulp.task(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;
    gulp.src(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./src/js/index.js&amp;#x27;&lt;/span&gt;)
        .pipe(browserify())
        .pipe(gulp.dest(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./dashboard/js&amp;#x27;&lt;/span&gt;))
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As I hope is clear, the stream based approach makes configuration fairly
simple, intuitive and consistent throughout.&lt;/p&gt;
&lt;p&gt;Of course associated packages above like &lt;code&gt;gulp-stylus&lt;/code&gt;, &lt;code&gt;gulp-browserify&lt;/code&gt;, &lt;code&gt;gulp-clean&lt;/code&gt;
have to be installed through npm before we can use them.&lt;/p&gt;
&lt;p&gt;While we can run &lt;code&gt;gulp js&lt;/code&gt;, &lt;code&gt;gulp css&lt;/code&gt;, &lt;code&gt;gulp clean&lt;/code&gt; etc. from the command line
we would probably want to have a default task that we run most of the time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;gulp.task(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;default&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;clean&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;css&amp;#x27;&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running &lt;code&gt;gulp&lt;/code&gt; will cleanup the dashboard/js and dashboard/css folders and
run our js and css tasks.&lt;/p&gt;
&lt;p&gt;To streamline our workflow we configure a watcher which can monitor our files, and
run the associated tasks automatically. Writing a simple watcher is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;gulp.task(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;watch&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;
    gulp.watch(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./src/js/**/*&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;default&amp;#x27;&lt;/span&gt;])
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And why stop here, let us automate browser refreshes too. We can use &lt;a href=&#34;http://livereload.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;livereload&lt;/a&gt; to
automatically reload our browser whenever the files change.&lt;/p&gt;
&lt;p&gt;We can add a watcher that notifies the livereload server with changes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;gulp.task(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;watch&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; server = livereload()
    gulp.watch(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./src/js/**/*&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;default&amp;#x27;&lt;/span&gt;])
    gulp.watch(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./dashboard/**/*&amp;#x27;&lt;/span&gt;)
        .on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;change&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;file&lt;/span&gt;)&lt;/span&gt;&amp;#123;
            server.changed(file.path)
        &amp;#125;)
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that we could not have hooked up the callback to the watcher we
already had because then it would not guarantee that the pre-processors have
actually completed before our browser refreshes. Please never use timers for
situations like this.&lt;/p&gt;
&lt;p&gt;If you have been using livereload for a while then you probably have the browser
extension for livereload. But in case you haven&amp;#39;t you can use a middleware for
express in the server.js file. This is especially convenient for testing on
several browsers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; app = connect()
    .use(connect.logger(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;dev&amp;#x27;&lt;/span&gt;))
    .use(livereload(&amp;#123;
        &lt;span class=&#34;hljs-attr&#34;&gt;port&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;35729&lt;/span&gt;
    &amp;#125;))
    .use(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/dashboard&amp;#x27;&lt;/span&gt;, connect.static(__dirname+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/dashboard&amp;#x27;&lt;/span&gt;))
    .use(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;req, res&lt;/span&gt;)&lt;/span&gt;&amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (req.url.indexOf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;dashboard&amp;#x27;&lt;/span&gt;) == -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;
            proxy.web(req, res, &amp;#123;
                &lt;span class=&#34;hljs-attr&#34;&gt;target&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://localhost:3000&amp;#x27;&lt;/span&gt;
            &amp;#125;)
        &amp;#125;
    &amp;#125;)
    .listen(&lt;span class=&#34;hljs-number&#34;&gt;4000&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;35729 is the default port on which livereload server runs. Note that this
relieves us from having to add the livereload script in our page manually
because the middleware takes care of it for us.&lt;/p&gt;
&lt;p&gt;If you use the above configuration, you will soon notice something strange.
When we edit a css file our entire page refreshes. If you have used livereload
before or have seen the demos you know that this should not happen. It should
just transparently reload the css files.&lt;/p&gt;
&lt;p&gt;It happens because of the way our gulp tasks are configured. Whenever a file
in src directory changes we run both our js and css tasks which cause both
js and css files to be regerated and thus prompt livereload to refresh the page.&lt;/p&gt;
&lt;p&gt;To remedy this we have to modify the watch handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;gulp.task(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;watch&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; server = livereload()
    gulp.watch(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./src/js/**/*.js&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;js&amp;#x27;&lt;/span&gt;])
    gulp.watch(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./src/css/**/*.styl&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;css&amp;#x27;&lt;/span&gt;])
    gulp.watch(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./dashboard/**/*&amp;#x27;&lt;/span&gt;)
        .on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;change&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;file&lt;/span&gt;)&lt;/span&gt;&amp;#123;
            server.changed(file.path)
        &amp;#125;)
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you try now, you will notice that css changes no longer refresh the full
page as expected.&lt;/p&gt;
&lt;p&gt;While the above was not an indepth introduction to any of the technologies involved,
I hope that it gave a basic idea about how node.js based tools can be used
for a streamlined frontend development workflow. As always any comment or criticism is
welcome.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="Gulp" />
        <updated>2014-03-10T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2012/12/12/sharing-jade-templates-between-nodejs-server-and-client.html</id>
        <title>Sharing Jade templates between Node.js server and client</title>
        <link rel="alternate" href="https://lorefnon.me/2012/12/12/sharing-jade-templates-between-nodejs-server-and-client.html"/>
        <content type="html">&lt;p&gt;Although there are several templating options available for the client eg. &lt;a href=&#34;http://handlebarsjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Handlebars&lt;/a&gt;, &lt;a href=&#34;http://mustache.github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Mustache&lt;/a&gt;, &lt;a href=&#34;http://beebole.com/pure/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Pure&lt;/a&gt; etc. nevertheless, &lt;a href=&#34;http://jade-lang.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Jade&lt;/a&gt; is attractive in its own right.  Its succinct syntax is cleaner even than &lt;a href=&#34;http://haml.info/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Haml&lt;/a&gt;, which is arguably the predecessor and inspiration-source of all the minimalist whitespace sensitive templating systems. Using Node.js on the server offers an interesting opportunity to reuse the same servers on the server as well as client. This has been made particulary easy by the &lt;a href=&#34;https://github.com/search?q=jade&amp;ref=commandbar&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;numerous community contributions&lt;/a&gt; by Jade enthusiasts which I will attempt to highlight in this post.&lt;/p&gt;
&lt;p&gt;When using Jade on the client the most naive approach would be  fetching our typical .jade file via ajax and then parsing the file and then  manipulating the structure and  interpolating the various variables. However,  we can pre-process the jade file beforehand thereby eliminating the heavyweight parsing step in the client. The end result of the pre-processing is a function which takes in the variables needed to render the template and then outputs the resultant HTML string which can be injected into the DOM.&lt;/p&gt;
&lt;p&gt;Preprocessing also takes care of &lt;a href=&#34;https://github.com/visionmedia/jade#template-inheritance&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;template-inheritance&lt;/a&gt; and &lt;a href=&#34;https://github.com/visionmedia/jade#includes&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;template-inclusion&lt;/a&gt; seamlessly which are difficult to implement in pure clienside parsing without an added layer of complexity and overhead of multiple ajax calls.&lt;/p&gt;
&lt;p&gt;Client-side rendering is made possible by a Jade feature called jade-runtime. On supplying a -c flag to jade, it generates the compiled javascript template which can be used along with the &lt;a href=&#34;https://github.com/visionmedia/jade/blob/master/runtime.js&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;runtime.js&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jgallen23/clientjade&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Clientjade&lt;/a&gt; takes the process to next level of simplicity.  It is simple npm module which provides you with a command line utility to compile several jade templates into a single compiled javascript file. Compilation is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clientjade test1.jade test2.jade &amp;gt; templates.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once templates.js has been included in the page,  individual templates can be accessed using their filenames.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jade.render($(&amp;#39;#target&amp;#39;), &amp;#39;test1&amp;#39;, &amp;#123; name: &amp;#39;Bob&amp;#39; &amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First argument is the DOM node where the template is to be rendered, second is a reference to the template and last is the data required to render the template.&lt;/p&gt;
&lt;p&gt;While this entire procedure is very simple, inclusion of multiple compiled templates in an HTML page leads to headaches.  Reason is that every individual compiled file assigns an empty hash to internal object containing references to templates. While in casual usage this is usually not a problem because you can always compile all the templates you need into a single javascript file, this can become troublesome if you are loading templates on-the-fly, as per requirements. The most common scenario is the case when an AMD loader eg. RequireJS is being used to manage dependencies.&lt;/p&gt;
&lt;p&gt;Fortunately there is a sister project &lt;a href=&#34;https://github.com/mysociety/node-jade-amd&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;node-jade-amd&lt;/a&gt; which focusses on exactly this usage scenario. As you might expect, after installing the &lt;a href=&#34;https://github.com/mysociety/node-jade-amd&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;jade-amd&lt;/a&gt; npm module you have a handy command line utility using which is as simple as :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jade-amd --from &amp;lt;source-folder&amp;gt; --to &amp;lt;destination-folder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The compiled templates have a dependency on jadeRuntime amd module which can be obtained by :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jade-amd --runtime &amp;gt; jadeRuntime.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the compiled template can be used just like you would use any other amd module :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;([ &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;templates/person&amp;#x27;&lt;/span&gt; ],            &lt;span class=&#34;hljs-comment&#34;&gt;// Compiled template AMD modules&lt;/span&gt;
    &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;personTemplate&lt;/span&gt;) &lt;/span&gt;&amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; rendered_content = personTemplate(&amp;#123;
              &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Joe Bloggs&amp;#x27;&lt;/span&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// Data to be used in the template&lt;/span&gt;
         &amp;#125;);
    &amp;#125;
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that explitly requiring the runtime is not necessary because it is implicitly required by the compiled templates.&lt;/p&gt;
&lt;p&gt;If repeated manual recompilation feels like a headache, and you don’t already have a file watcher setup there is a connect middleware &lt;a href=&#34;https://github.com/storify/jade-browser&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;jade-browser&lt;/a&gt; which exposes jade templates to the web browser and also provides a few additional features like express-like render function with partial handling. If you already using &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;grunt&lt;/a&gt;, you can checkout the plugin &lt;a href=&#34;https://github.com/phated/grunt-jade&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;grunt-jade&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;So jade is an immensely popular templating solution among Node.js developers and the benefit of this is that there are numerous compilation options available to fit into your development toolchain.  I hope this quick detour around jade was helpful.  There are multiple other similar projects aiming to solve similar scenarios.  The ones aforementioned, were a few that I recently used. Please feel free to express any opinions or criticisms. If there is a project with related objectives which is particularly noteworthy,  feel free to add a link.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="Jade" />
        <category term="Node.js" />
        <updated>2012-12-12T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2012/08/12/effectively-debugging-knockoutjs-applications.html</id>
        <title>Effectively debugging KnockoutJS applications.</title>
        <link rel="alternate" href="https://lorefnon.me/2012/08/12/effectively-debugging-knockoutjs-applications.html"/>
        <content type="html">&lt;p&gt;This post aims to provide some explanation about the lifecycle of dynamic data-bindings in KnockoutJS to  ease debugging of KO applications .&lt;/p&gt;
&lt;p&gt;A developer can remain perfectly oblivious of all that is going on under the hood and let the magic of declarative bindings do all the heavy-lifting of data-synchronization and it all works fine untill something unexpected happens. What now ? While most of the bugs in code can be directly resolved by inspecting the data-bind attributes manually, but if the complexity of application grows beyond a level an understanding of what goes on under the sheets becomes necessary.&lt;/p&gt;
&lt;p&gt;While UI does appear to be getting magically updated when the models change, in reality the code underneath is all plain javascript. So what happens when something doesn’t turn out to be as expected ? Where do we start debugging from ?&lt;/p&gt;
&lt;p&gt;The first and most obvious point of commencement is the observable. While we can (and sometimes might need to) begin from the observable function and dig down, debugging process is much simplified if we have a bit of familiarity with the way KO works internally. At this point I would like to underline that KO code is written very well and in general is easy to understand.&lt;/p&gt;
&lt;p&gt;This knowledge is also helpful for development of custom bindings.&lt;/p&gt;
&lt;p&gt;KO relies on bindingHandlers to manage bindings. So corresponding to every built in binding (eg. visible, text, html, value etc.)  we have a bindingHandler which has the same name. The text  binding is handled by a function &lt;strong&gt;ko.bindingHandlers.text&lt;/strong&gt;, the value binding by &lt;strong&gt;ko.bindingHandlers.value&lt;/strong&gt; and likewise.&lt;/p&gt;
&lt;p&gt;Let us checkout a simple example :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jquery-1.7.1.min.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;knockout-latest.debug.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;index.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
      Please Enter your name :
      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;data-bind&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;value:name&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
      Hello &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;data-bind&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text: name&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;$(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; vmodel = &amp;#123;
        &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: ko.observable(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Lorefnon&amp;quot;&lt;/span&gt;)
    &amp;#125;
    ko.applyBindings(vmodel);
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two binders involved : text-binder and value-binder. Let us inspect the &lt;strong&gt;ko.bindingHandlers.text&lt;/strong&gt;in javascript.   It has a single member : update function. Yes, you guessed it right – this is the function that is called when the span is to be updated. Let us checkout what it does :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;ko.bindingHandlers[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;text&amp;#x27;&lt;/span&gt;] = &amp;#123;
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;update&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;element, valueAccessor&lt;/span&gt;) &lt;/span&gt;&amp;#123;
        ko.utils.setTextContent(element, valueAccessor());
    &amp;#125;
&amp;#125;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is straightforward and self explanatory. You can just add a breakpoint to the update function and it will be triggered every time that particular DOM node is updated. As expected the actual DOM manipulation takes place in the &lt;strong&gt;ko.utils.setTextContent&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;setTextContent: &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;element, textContent&lt;/span&gt;) &lt;/span&gt;&amp;#123;
     &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; value = ko.utils.unwrapObservable(textContent);
     &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ((value === &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) || (value === &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;)) value = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;
     &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;innerText&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; element ? element.innerText = value : element.textContent = value;
     &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ieVersion &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;) &amp;#123;
         &lt;span class=&#34;hljs-comment&#34;&gt;// Believe it or not, this actually fixes an IE9 rendering bug&lt;/span&gt;
         &lt;span class=&#34;hljs-comment&#34;&gt;// (See https://github.com/SteveSanderson/knockout/issues/209)&lt;/span&gt;
         element.style.display = element.style.display;
     &amp;#125;
&amp;#125;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What about the other side of the code : What do you do to intercept a change in a form element ? Let us checkout the &lt;strong&gt;ko.bindingHandlers.value&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;/images/ko.png&#34; /&gt;

&lt;p&gt;As you probably have already guessed, the init function creates the bindings to intercept any change in the form element. The actual handler that is called each time when the input element changes its value is the valueUpdateHandler function defined inside init :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; valueUpdateHandler = &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;
     &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; modelValue = valueAccessor();
     &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; elementValue = ko.selectExtensions.readValue(element);
     ko.jsonExpressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;value&amp;#x27;&lt;/span&gt;, elementValue, &lt;span class=&#34;hljs-comment&#34;&gt;/* checkIfDifferent: */&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;);
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;elementValue holds the changed value which is in the next line synced back.&lt;/p&gt;
&lt;p&gt;So here is an overview of how bindings work : when you call &lt;strong&gt;ko.applyBindings&lt;/strong&gt; the library traverses the DOM hunting for data-bind attributes. When it finds a data-bind attribute – it first of all figures out which bindingHandler is to be called from the part of data-bind attribute value that preceded the colon. The corresponding handler’s update method set to be called each time the value of corresponding view model attribute changes and it is the responsibility of the update method to alter the DOM node as directed by the data-bind specification.&lt;/p&gt;
&lt;p&gt;For those nodes which are editable by user (ie. the form elements) the corresponding bindingHandlers also have an init method which sets up the bindings for reverse synchronization.&lt;/p&gt;
&lt;p&gt;This summarizes the way data-bindings work under the hood. I hope that this post helps to improve your understanding of KO library.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="KnockoutJS" />
        <updated>2012-08-12T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2012/08/11/debunking-10-common-knockoutjs-myths.html</id>
        <title>Debunking 10 common KnockoutJS myths</title>
        <link rel="alternate" href="https://lorefnon.me/2012/08/11/debunking-10-common-knockoutjs-myths.html"/>
        <content type="html">&lt;p&gt;It seems that among the developer community, there exist multiple misconceptions regarding KnockoutJS. This is particularly true for developers who are not familiar with the MVVM pattern or declarative style followed by Knockout. This posts aims to clarify some of these misconceptions.&lt;/p&gt;
&lt;p&gt;I was particularly motivated to write this post after &lt;a href=&#34;http://stackoverflow.com/questions/5112899/knockout-js-vs-backbone-js-vs/6340870#6340870&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;this discussion&lt;/a&gt; at Stackoverflow.&lt;/p&gt;
&lt;h1 id=&#34;KnockoutJS-is-tied-to-specific-server-side-back-ends&#34;&gt;&lt;a href=&#34;#KnockoutJS-is-tied-to-specific-server-side-back-ends&#34; class=&#34;headerlink&#34; title=&#34;KnockoutJS is tied to specific server side back-ends.&#34;&gt;&lt;/a&gt;KnockoutJS is tied to specific server side back-ends.&lt;/h1&gt;&lt;p&gt;This mainly stems from the similarities of the declarative binding style used in KO with the WPF declarative bindings. Since I do not work with Microsoft technologies, I can not really assert if the WPF declarative binding style was indeed an inspiration behind KO, however I would like to highlight that KO is strictly a client side library and an ASP.net backend (or any specific server side backend for that matter) is not mandatory. In fact KO will work happily with no server-side code at all. I strongly recommend people to checkout the basic examples presented in the site using jsfiddle and convince yourself that this is indeed the case.&lt;/p&gt;
&lt;p&gt;On a sidenote, there do exist libraries that aim to provide seamless integration layers between KO and ASP.net MVC eg. KnockoutMVC which claims to facilitate creation of complex client side applications without writing a single line of javascript. I strongly advocate against using such esoteric frameworks.&lt;/p&gt;
&lt;h1 id=&#34;KnockoutJS-has-hard-wired-dependency-on-jQuery-and-jQuery-templating-plugin&#34;&gt;&lt;a href=&#34;#KnockoutJS-has-hard-wired-dependency-on-jQuery-and-jQuery-templating-plugin&#34; class=&#34;headerlink&#34; title=&#34;KnockoutJS has hard-wired dependency on jQuery and jQuery-templating plugin.&#34;&gt;&lt;/a&gt;KnockoutJS has hard-wired dependency on jQuery and jQuery-templating plugin.&lt;/h1&gt;&lt;p&gt;Again this is absolutely incorrect. The core functionality provided by KO is framework agonistic. And as far as templating is concerned integrating of third party templating engines is not very difficult. Since KO is open source you can probably find support for your favourite templating engine already available. For example the ko.mustache extension by Marcin Wtorkowski adds support for mustache templating engine.&lt;/p&gt;
&lt;h1 id=&#34;Because-of-the-level-of-abstraction-offered-by-declarative-bindings-KnockoutJS-is-difficult-to-debug&#34;&gt;&lt;a href=&#34;#Because-of-the-level-of-abstraction-offered-by-declarative-bindings-KnockoutJS-is-difficult-to-debug&#34; class=&#34;headerlink&#34; title=&#34;Because of the level of abstraction offered by declarative bindings, KnockoutJS is difficult to debug.&#34;&gt;&lt;/a&gt;Because of the level of abstraction offered by declarative bindings, KnockoutJS is difficult to debug.&lt;/h1&gt;&lt;p&gt;While it is true that KO hides away the boiler plate code for data synchronization and the users are concerned with declaring the bindings in attributes, when things go wrong (either at your end or if you happen to discover a bug in the library) you will have to dig into the layers of abstraction. Fortunately in case of KO, the abstractions are not very convoluted and a basic understanding of the binding management lifecycle makes debugging pretty easy. KO source code is well written and not very difficult to understand, although that certainly is a subjective opinion.&lt;/p&gt;
&lt;p&gt;I plan to highlight some guidelines for debugging KO applications in a future post.&lt;/p&gt;
&lt;h1 id=&#34;It-is-difficult-to-properly-test-a-KnockoutJS-application&#34;&gt;&lt;a href=&#34;#It-is-difficult-to-properly-test-a-KnockoutJS-application&#34; class=&#34;headerlink&#34; title=&#34;It is difficult to properly test a KnockoutJS application.&#34;&gt;&lt;/a&gt;It is difficult to properly test a KnockoutJS application.&lt;/h1&gt;&lt;p&gt;There is simply no reason for this to be true considering that KO is plain simple javascript. In particular KO is well tested and has a comprehensive test suite, which alleviates the developer from writing test cases for boilerplate code for managing data synchronizations. The domain logic is still javascript and KO does not abstract away any client-server interaction so testing the core of your application mostly involves testing your own javascript code only.&lt;/p&gt;
&lt;p&gt;Also, with a basic understanding of KO handlers, the bindingHandlers can be mocked, providing a greater control to the developer.&lt;/p&gt;
&lt;h1 id=&#34;KnockoutJS-applications-do-not-degrade-gracefully-in-absence-of-javascript&#34;&gt;&lt;a href=&#34;#KnockoutJS-applications-do-not-degrade-gracefully-in-absence-of-javascript&#34; class=&#34;headerlink&#34; title=&#34;KnockoutJS applications do not degrade gracefully in absence of javascript.&#34;&gt;&lt;/a&gt;KnockoutJS applications do not degrade gracefully in absence of javascript.&lt;/h1&gt;&lt;p&gt;Graceful degradation in absense of javascript depends on the way your application has been architectured. Although KO being a pure javascript library, does not offer any support for graceful degradation in absence of javascript, nevertheless unlike many of the competing technologies it does not hinder graceful degradation.&lt;/p&gt;
&lt;p&gt;To create a KO application that degrades gracefully, just ensure that the initial state of the page that is rendered by the server suffices to convey the information that a user should see in absence of javascript. Fallback mechanisms (eg simple forms and links) should be available that provide the complete (or partial) application functionality in absence of javascript. Then when you create your view models you can instantiate them from the data already available from the DOM and future data can be loaded via ajax without refreshing the page.&lt;/p&gt;
&lt;p&gt;A good example for this functionality can be a grid. The basic HTML page served by the server can contain a simple HTML table with support for traditional links for pagination. Then you can create your view models from the data present in the table ( or ajax if a bit of redundant data load does not matter for you) and utilize KO for interactive bindings.&lt;/p&gt;
&lt;p&gt;Since KO does not use special inline markup or custom html tags, but rather simple data-bind attributes which are anyways not visible in absence of javascript, it does not hinder graceful degradation.&lt;/p&gt;
&lt;h1 id=&#34;Although-simple-attribute-binding-works-well-designing-complex-interactive-UI-results-in-cluttered-code&#34;&gt;&lt;a href=&#34;#Although-simple-attribute-binding-works-well-designing-complex-interactive-UI-results-in-cluttered-code&#34; class=&#34;headerlink&#34; title=&#34;Although simple attribute-binding works well, designing complex interactive UI results in cluttered code.&#34;&gt;&lt;/a&gt;Although simple attribute-binding works well, designing complex interactive UI results in cluttered code.&lt;/h1&gt;&lt;p&gt;Again code organization is something that KO does not enforce upon you. A very nice way to make to code modular and easy to understand is to use custom bindings. Custom bindings are not something to be used as a last resort . Creating them is easy and utilizing them you can write very succinct code that is easily understandable and manageable. Infact properly using custom bindings can significantly improve performance as compared to several data-bind attributes for same property across several adjacent DOM nodes.&lt;/p&gt;
&lt;p&gt;A few people strongly believe that doing something slightly abnormal (somewhat different from the advertised use-cases) the developer has to go to great lengths in case of KnockoutJS. This is certainly not the case. KnockoutJS does an elegant job at data binding. Not only can the actual value stored in text nodes be mapped to JavaScript objects, practically any attribute and even individual styles can be mapped to JavaScript data structures. Combine with that the fact that mapping can be directed to dynamic objects which actually derive their data from other data structures and the excellent integration of KnockoutJS with jQuery templating system, EVERY single type of UI binding can be made in knockoutJS with lesser number of lines than backbone provided you craft your viewmodels and templates creatively.
7. Doing anything serious using KnockoutJS requires verbose inline scripts.&lt;/p&gt;
&lt;p&gt;This is also incorrect. Please read the above paragraph on properly using dynamic objects and custom bindings.&lt;/p&gt;
&lt;p&gt;Yes code like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;The item is &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;data-bind&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text: price() &amp;gt; 50 ? &amp;#x27;expensive&amp;#x27; : &amp;#x27;affordable&amp;#x27;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; today.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is certainly ugly. But you can simply define a custom attribute that depends on price using ko.computable and have that in the view-model. As a developer you already are smart enough to avoid embedding javascript application logic inside html. KO does not come in your way.&lt;/p&gt;
&lt;h1 id=&#34;KnockoutJS-does-not-offer-a-multitude-of-widgets&#34;&gt;&lt;a href=&#34;#KnockoutJS-does-not-offer-a-multitude-of-widgets&#34; class=&#34;headerlink&#34; title=&#34;KnockoutJS does not offer a multitude of widgets.&#34;&gt;&lt;/a&gt;KnockoutJS does not offer a multitude of widgets.&lt;/h1&gt;&lt;p&gt;This is absolutely correct. But KO noway advertises the same. It is essentially a data-binding library that does one thing and does it well. It is not a complete application SDK or UI framework.&lt;/p&gt;
&lt;h1 id=&#34;Integrating-KnockoutJS-with-a-restful-backend-is-difficult&#34;&gt;&lt;a href=&#34;#Integrating-KnockoutJS-with-a-restful-backend-is-difficult&#34; class=&#34;headerlink&#34; title=&#34;Integrating KnockoutJS with a restful backend is difficult.&#34;&gt;&lt;/a&gt;Integrating KnockoutJS with a restful backend is difficult.&lt;/h1&gt;&lt;p&gt;As I previously pointed out, KO does not abstract out client server interaction. In fact the management of your Model layer is left almost entirely to you. Having said that, if your restful backend makes data available as json, the backbone mapping plugin makes it trivial to sync server data with view models.&lt;/p&gt;
&lt;p&gt;If the structure of the data fetched from sever differs significantly from the way view models are organized, then you anyway have to write code for transforming the code.&lt;/p&gt;
&lt;p&gt;The knockout-rest plugin by Francesco Pontillo provides a very easy and intuitive way to integrate view-models with a restful backend.&lt;/p&gt;
&lt;h1 id=&#34;Using-libraries-like-KnockoutJS-have-serious-negative-impact-on-SEO&#34;&gt;&lt;a href=&#34;#Using-libraries-like-KnockoutJS-have-serious-negative-impact-on-SEO&#34; class=&#34;headerlink&#34; title=&#34;Using libraries like KnockoutJS have serious negative impact on SEO.&#34;&gt;&lt;/a&gt;Using libraries like KnockoutJS have serious negative impact on SEO.&lt;/h1&gt;&lt;p&gt;If you follow the guidelines presented above on graceful degradation then there is no reason why this should happen.&lt;/p&gt;
&lt;p&gt;Even if you are not concerned about graceful degradation, and your application is heavily dependent on Ajax based content fetching,  These  guidelines from Google, can make your website crawlable.&lt;/p&gt;
&lt;p&gt;I sincerely hope that this post was successful in removing many of the common misconceptions regarding KnockoutJS and I also hope that you will be able to appreciate the power of this fantastic library. Please leave your suggestions and opinions in the comments section below. Also if you have been working on a project that enhances or extends the capabilities of KnockoutJS please feel free to drop in a link.&lt;/p&gt;
</content>
        <category term="Javascript" />
        <category term="KnockoutJS" />
        <updated>2012-08-11T00:00:00.000Z</updated>
    </entry>
</feed>
