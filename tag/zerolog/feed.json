{
    "version": "https://jsonfeed.org/version/1",
    "title": "Icicles of Thought â€¢ All posts by \"zerolog\" tag",
    "description": "",
    "home_page_url": "https://lorefnon.me",
    "items": [
        {
            "id": "https://lorefnon.me/2022/09/01/setting-up-log-rotation-for-zerolog/",
            "url": "https://lorefnon.me/2022/09/01/setting-up-log-rotation-for-zerolog/",
            "title": "Setting up logrotation for zerolog",
            "date_published": "2022-09-01T00:00:00.000Z",
            "content_html": "<p>Zerolog is a popular structured logging library for go. This post is a quick recipie for configuring it to use log rotation. </p>\n<p>Log rotation is a mechanism where instead of having a single log file which keeps growing forever, the application switches to a new log file when a time threshold or a size threshold is exceeded. Optionally files which are too old to be of significance can be deleted.</p>\n<p>While logging to a stream and having an external service manage it for your is nice if you can embrace it. However, Log rotation can be useful for desktop applications or isolated deployments.</p>\n<p>Lumberjack is a nice utility for go that supports log rotation. It is also easy to hook up with zerolog because a lumberjack logger implements io.Writer which zerolog can target.</p>\n<pre><code class=\"hljs\"><table class=\"hlcode-table\"><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-comment\">/** Configuration options for log rotation */</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-keyword\">type</span> LoggerConfig <span class=\"hljs-keyword\">struct</span> {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">/** Max size of the logfile before it&#x27;s rolled */</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMaxSizeMB <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;max_size_mb,omitempty&quot;`</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">/** Max number of rolled files to keep */</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMaxBackupCount <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;max_backup_count,omitempty&quot;`</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">/** Max age in days to keep a logfile */</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tMaxAgeDays <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;max_age_days,omitempty&quot;`</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initLogger</span><span class=\"hljs-params\">(config *config.LoggerConfig)</span></span> *zerolog.Logger {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">var</span> writers []io.Writer\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">// Optional: Log to console</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\twriters = <span class=\"hljs-built_in\">append</span>(writers, zerolog.ConsoleWriter{Out: os.Stderr})\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">// Log to rolling file</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\twriters = <span class=\"hljs-built_in\">append</span>(writers, initRollingFileLogger(config))\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-comment\">// Multiwriter encapsulates multiple writers</span>\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tmw := io.MultiWriter(writers...)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tlogger := zerolog.New(mw).With().\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tTimestamp().\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tLogger()\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> &amp;logger\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initRollingFileLogger</span><span class=\"hljs-params\">(config *config.LoggerConfig)</span></span> *lumberjack.Logger {\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tloggerPath := filepath.Join(xdg.DataHome, <span class=\"hljs-string\">&quot;example&quot;</span>, <span class=\"hljs-string\">&quot;app.log&quot;</span>)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\tfmt.Printf(<span class=\"hljs-string\">&quot;logging to file: %s\\n&quot;</span>, loggerPath)\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t<span class=\"hljs-keyword\">return</span> &amp;lumberjack.Logger{\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tFilename:   loggerPath,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tMaxBackups: config.MaxBackupCount,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tMaxSize:    config.MaxSizeMB,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t\tMaxAge:     config.MaxAgeDays,\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">\t}\n</td></tr><tr style=\"border:none;\" class=\"hlcode-line  \" ><td style=\"border:none\" class=\"hlcode-code-cell\">}\n</td></tr></table></code></pre>\n\n<p>We can now use the logger returned by initLogger to write logs, and they will be written to a file which will be rotated by lumberjack.</p>\n",
            "tags": [
                "go",
                "golang",
                "zerolog"
            ]
        }
    ]
}