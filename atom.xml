<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lorefnon.me</id>
    <title>Icicles of Thought</title>
    <link href="https://lorefnon.me" />
    <updated>2022-12-06T16:50:53.806Z</updated>
    <category term="Javascript" />
    <category term="KnockoutJS" />
    <category term="Ruby" />
    <category term="EventMachine" />
    <category term="Websockets" />
    <category term="SQLite" />
    <category term="Jade" />
    <category term="Node.js" />
    <category term="Rails" />
    <category term="Emacs" />
    <category term="Gulp" />
    <category term="ActiveAdmin" />
    <category term="ActiveRecord" />
    <category term="Devise" />
    <category term="Integration" />
    <category term="ZSH" />
    <category term="Productivity Hacks" />
    <category term="OCR" />
    <category term="Design Patterns" />
    <category term="InfluxDB" />
    <category term="Grafana" />
    <category term="React" />
    <category term="Functional Programming" />
    <category term="ES6" />
    <category term="Helm" />
    <category term="SPF" />
    <category term="CSS" />
    <category term="Redux" />
    <category term="Redux-loop" />
    <category term="Frontend" />
    <category term="Vagrant" />
    <category term="Clojure" />
    <category term="Hashicorp" />
    <category term="Typescript" />
    <category term="ReasonML" />
    <category term="Next.js" />
    <category term="Koa" />
    <category term="Apollo" />
    <category term="GraphQL" />
    <category term="MongoDB" />
    <category term="Automerge" />
    <category term="CRDT" />
    <category term="SVG" />
    <category term="VSCode" />
    <category term="Comlink" />
    <category term="Web-workers" />
    <category term="io-ts" />
    <category term="MobX" />
    <category term="MobX-State-Tree" />
    <category term="Routing" />
    <category term="HAR" />
    <category term="Jq" />
    <category term="Lit-html" />
    <category term="Stimulus" />
    <category term="Kotlin" />
    <category term="Vert.X" />
    <category term="Vert.X-Web" />
    <category term="Backend-development" />
    <category term="API-development" />
    <category term="Java" />
    <category term="JOOQ" />
    <category term="Ruby on Rails" />
    <category term="Liquibase" />
    <category term="tbls" />
    <category term="jOOQ" />
    <category term="Vue" />
    <category term="TypeScript" />
    <category term="Gradle" />
    <category term="Spring" />
    <category term="Spring-Boot" />
    <category term="gRPC" />
    <category term="Redis" />
    <category term="Database" />
    <category term="Exposed" />
    <category term="vim" />
    <category term="kotlin" />
    <category term="spring" />
    <category term="spring-security" />
    <category term="komapper" />
    <category term="spring-boot" />
    <category term="typescript" />
    <category term="zod" />
    <category term="ts-pattern" />
    <category term="ts-sql-query" />
    <category term="go" />
    <category term="golang" />
    <category term="zerolog" />
    <category term="jet" />
    <category term="sql" />
    <category term="go-migrate" />
    <category term="chi" />
    <category term="connect" />
    <category term="cloudfront" />
    <category term="AWS" />
    <category term="CDK" />
    <category term="Go" />
    <entry>
        <id>https://lorefnon.me/2022/11/15/configuring-cloudfront-functions-for-spa-routing-using-cdk/</id>
        <title>Configuring cloudfront functions for SPA routing with CDK</title>
        <link rel="alternate" href="https://lorefnon.me/2022/11/15/configuring-cloudfront-functions-for-spa-routing-using-cdk/"/>
        <content type="html">&lt;p&gt;When building &lt;a href=&#34;https://en.wikipedia.org/wiki/Single-page_application&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;single page applications&lt;/a&gt;, it is convenient to serve the complete website including the HTML files from a CDN like AWS cloudfront. All the assets can then be potentially served from a location close to the user. This works particularly well for PWAs and dynamic client rendered websites. &lt;/p&gt;
&lt;p&gt;It is also common to use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;push based&lt;/a&gt; routing in single page applications. However the first request would always go the server so we need to setup some server side routing as well to route these requests to an appropriate HTML file. In the simplest case we&amp;#39;d route all incoming requests to our domain to a single index.html file, and the javascript referenced in the HTML file will take over once the browser renders it.&lt;/p&gt;
&lt;p&gt;This is easily accomplished via &lt;a href=&#34;https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;cloudfront functions&lt;/a&gt;, which are a &lt;a href=&#34;https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;recently introduced&lt;/a&gt; cost effective alternative to &lt;a href=&#34;https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;lambda@edge&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;lambda@edge may be more suitable if you need to execute complex logic and need access to a more full-fledged execution environment like node.js (For example if you are doing server side rendering). However for simpler use cases like changing routes, adapting headers etc. cloudfront functions offer a simpler and more cost effective alternative.&lt;/p&gt;
&lt;p&gt;Here is a simple function to route all requests which don&amp;#39;t have an extension in the url to index.html: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// path-redir-rule.js&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handler&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;event&lt;/span&gt;) &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; request = event.&lt;span class=&#34;hljs-property&#34;&gt;request&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; hasExtension = request.&lt;span class=&#34;hljs-property&#34;&gt;uri&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;includes&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;)
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!hasExtension) &amp;#123;
        request.&lt;span class=&#34;hljs-property&#34;&gt;uri&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/app/index.html&amp;#x27;&lt;/span&gt;
    &amp;#125;
    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; request;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we love &lt;a href=&#34;https://en.wikipedia.org/wiki/Infrastructure_as_code&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;IaC&lt;/a&gt;, we will use &lt;a href=&#34;https://aws.amazon.com/cdk/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;CDK&lt;/a&gt; to wire up our cloudfront. This post is not intended to be a good first intro to CDK, but here are a few if you are using it for first time: &lt;a href=&#34;https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-cdk-getting-started.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;[1]&lt;/a&gt;, &lt;a href=&#34;https://dev.to/kevin_odongo35/getting-started-with-aws-cdk-2k19&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It should not surprise anyone that AWS CDK has good support for AWS Cloudfront. &lt;/p&gt;
&lt;p&gt;Here is a simple stack that uses CDK with typescript to wire up a cloudfront stack backed by an S3 bucket. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; path &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;node:path&amp;quot;&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; cdk &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib&amp;quot;&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; s3 &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib/aws-s3&amp;quot;&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; cf &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib/aws-cloudfront&amp;quot;&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; origins &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib/aws-cloudfront-origins&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FrontendStack&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;cdk.Stack&lt;/span&gt; &amp;#123;
  publicAssetsS3Bucket = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; s3.&lt;span class=&#34;hljs-title class_&#34;&gt;Bucket&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PublicAssetsBucket&amp;quot;&lt;/span&gt;, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;removalPolicy&lt;/span&gt;: cdk.&lt;span class=&#34;hljs-property&#34;&gt;RemovalPolicy&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;RETAIN&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;publicReadAccess&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;websiteIndexDocument&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;versioned&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,
  &amp;#125;);

  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfOrigin&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; origins.&lt;span class=&#34;hljs-title function_&#34;&gt;S3Origin&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;publicAssetsS3Bucket&lt;/span&gt;);

  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfDistribution&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;Distribution&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CFDistribution&amp;quot;&lt;/span&gt;, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;defaultBehavior&lt;/span&gt;: &amp;#123;
      &lt;span class=&#34;hljs-attr&#34;&gt;origin&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfOrigin&lt;/span&gt;
    &amp;#125;
  &amp;#125;);
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a production application we will also configure certifications and domains for the distribution, which I have omited to keep the post focussed, but here is &lt;a href=&#34;https://blog.dennisokeeffe.com/blog/2021-08-08-building-a-cdn-with-s3-cloudfront-and-the-aws-cdk&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;another post&lt;/a&gt; that convers those things too.&lt;/p&gt;
&lt;p&gt;We can now update this CF distribution configuration to use our function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FrontendStack&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;cdk.Stack&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  publicAssetsS3Bucket = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; s3.&lt;span class=&#34;hljs-title class_&#34;&gt;Bucket&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PublicAssetsBucket&amp;quot;&lt;/span&gt;, {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;removalPolicy&lt;/span&gt;: cdk.&lt;span class=&#34;hljs-property&#34;&gt;RemovalPolicy&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;RETAIN&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;publicReadAccess&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;websiteIndexDocument&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;versioned&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  })
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  cfPathRedirFunction = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;Function&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PathRedirFunction&amp;quot;&lt;/span&gt;, {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;code&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;FunctionCode&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;fromFile&lt;/span&gt;({
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;filePath&lt;/span&gt;: path.&lt;span class=&#34;hljs-title function_&#34;&gt;join&lt;/span&gt;(
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;          __dirname,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./cf-functions/path-redir-rule.js&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        ),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      }),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    });
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfOrigin&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; origins.&lt;span class=&#34;hljs-title function_&#34;&gt;S3Origin&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;publicAssetsS3Bucket&lt;/span&gt;);
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfDistribution&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;Distribution&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CFDistribution&amp;quot;&lt;/span&gt;, {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;defaultBehavior&lt;/span&gt;: {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;origin&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfOrigin&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;functionAssociations&lt;/span&gt;: [
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;function&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfPathRedirFunction&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;eventType&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;FunctionEventType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;VIEWER_REQUEST&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      ],
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  });
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this function will need to be run before the target is selected, we needed to use &lt;code&gt;VIEWER_REQUEST&lt;/code&gt; event type.&lt;/p&gt;
&lt;p&gt;We can also consider adding a response function which adds headers to prevent the browser from caching our html pages, as we can expect it to frequently change.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// prevent-html-caching.js&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handler&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;event&lt;/span&gt;) &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; request = event.&lt;span class=&#34;hljs-property&#34;&gt;request&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; parts = request.&lt;span class=&#34;hljs-property&#34;&gt;uri&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;)
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; lastPart = parts[parts.&lt;span class=&#34;hljs-property&#34;&gt;length&lt;/span&gt;-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; response = event.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;;
    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; headers = response.&lt;span class=&#34;hljs-property&#34;&gt;headers&lt;/span&gt;;
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (lastPart.&lt;span class=&#34;hljs-title function_&#34;&gt;match&lt;/span&gt;(&lt;span class=&#34;hljs-regexp&#34;&gt;/\.html$/&lt;/span&gt;) || lastPart.&lt;span class=&#34;hljs-title function_&#34;&gt;match&lt;/span&gt;(&lt;span class=&#34;hljs-regexp&#34;&gt;/^[^.]*$/&lt;/span&gt;)) &amp;#123;
        headers[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;cache-control&amp;#x27;&lt;/span&gt;] = &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;no-cache&amp;#x27;&lt;/span&gt; &amp;#125;
    &amp;#125;
    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; response
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because this function needs access to the response being sent, the function event type needs to be &lt;code&gt;VIEWER_RESPONSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FrontendStack&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;cdk.Stack&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  cfHtmlRespFunction = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;Function&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;HTMLRespFunction&amp;quot;&lt;/span&gt;, {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;code&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;FunctionCode&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;fromFile&lt;/span&gt;({
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;filePath&lt;/span&gt;: path.&lt;span class=&#34;hljs-title function_&#34;&gt;join&lt;/span&gt;(
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        __dirname,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./cf-functions/prevent-html-caching.js&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      ),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    }),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  });
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfOrigin&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; origins.&lt;span class=&#34;hljs-title function_&#34;&gt;S3Origin&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;publicAssetsS3Bucket&lt;/span&gt;);
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfDistribution&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;Distribution&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CFDistribution&amp;quot;&lt;/span&gt;, {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;defaultBehavior&lt;/span&gt;: {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;origin&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfDistribution&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;functionAssociations&lt;/span&gt;: [
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;function&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfPathRedirFunction&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;eventType&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;FunctionEventType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;VIEWER_REQUEST&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        },
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;function&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfHtmlRespFunction&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;eventType&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;FunctionEventType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;VIEWER_RESPONSE&lt;/span&gt;,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;background:#fffacd;&#34; class=&#34;hlcode-line  hlcode-line-highlight&#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;        },
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;      ],
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;  });
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that is it. Run &lt;code&gt;cdk synth&lt;/code&gt; and &lt;code&gt;cdk deploy&lt;/code&gt; to deploy or update your cloudfront setup.&lt;/p&gt;
</content>
        <category term="cloudfront" />
        <category term="AWS" />
        <category term="CDK" />
        <updated>2022-12-06T16:50:53.806Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/12/06/being-explicit-about-implementing-interfaces-in-golang/</id>
        <title>Being explicit about implementing interfaces in Golang</title>
        <link rel="alternate" href="https://lorefnon.me/2022/12/06/being-explicit-about-implementing-interfaces-in-golang/"/>
        <content type="html">&lt;p&gt;Go embraces structural typing, so struct types don&amp;#39;t need to explicitly implement interfaces in order to be used a concrete instance of the interface. This offers more flexibility over nominative typing (as in Java, C# etc.) esp. when integrating libraries that are unaware of each other. &lt;/p&gt;
&lt;p&gt;However, unlike typescript etc. go also does not offer a way to explicitly declare that a struct type is &lt;strong&gt;intended&lt;/strong&gt; to satisfy an interface. &lt;/p&gt;
&lt;p&gt;The result of this is that if someone later refactors a method of the struct such that it no longer implements the interface it used to before, then a type error is not immediately visible in the same file. Rather the location of error is the use site where an instance of the interface is expected. This is more problematic if such a use site does not even exist in the current repo.&lt;/p&gt;
&lt;p&gt;I found this to be a periodic annoyance when implementing gRPC API specs where the service structs are always intended to implement the interfaces generated from the API spec, and any breakage should be immediately noticed and preferrably identified close to the service implementation.&lt;/p&gt;
&lt;p&gt;Fortunately, the solution is pretty simple: just add a struct method that returns an instance of the interface. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs go&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; UserQueryService &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-comment&#34;&gt;// Members omitted&lt;/span&gt;
&amp;#125;

&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(s *UserQueryService)&lt;/span&gt;&lt;/span&gt; ASUserQueryServiceHandler() pbconnect.UserQueryServiceHandler &amp;#123;
	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; s
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we introduce any error that makes UserQueryService incompatible with &lt;code&gt;pbconnect.UserQueryServiceHandler&lt;/code&gt; interface, a compile time error will be reported in the above method.&lt;/p&gt;
</content>
        <category term="Go" />
        <updated>2022-12-06T16:50:53.806Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/12/06/configuring-cloudfront-as-non-caching-reverse-proxy-for-api-backend/</id>
        <title>Using CDK to configure cloudfront as non-caching reverse proxy for API backend</title>
        <link rel="alternate" href="https://lorefnon.me/2022/12/06/configuring-cloudfront-as-non-caching-reverse-proxy-for-api-backend/"/>
        <content type="html">&lt;p&gt;Cloudfront is primarily a CDN, but it is often also convenient to use it as reverse proxy for a backend service. This is especially convenient when the entire frontend SPA (including HTML) is already hosted from Cloudfront and we don&amp;#39;t want to support CORS in our backend API that this frontend talks to.&lt;/p&gt;
&lt;p&gt;Reusing Cloudfront as a reverse proxy in such cases ensures that both our frontend and backend can be available from the same domain. However, in such case we must take special care to ensure that our backend responses do get unexpectedly cached by Cloudfront. This post outlines the CDK configuration to facilitate this.&lt;/p&gt;
&lt;p&gt;A minimal Cloudfront setup for an SPA may look something like this: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; cdk &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib&amp;quot;&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; s3 &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib/aws-s3&amp;quot;&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; cf &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib/aws-cloudfront&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FrontendStack&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;cdk.Stack&lt;/span&gt; &amp;#123;
  publicAssetsS3Bucket = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; s3.&lt;span class=&#34;hljs-title class_&#34;&gt;Bucket&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;PublicAssetsS3Bucket&amp;#x27;&lt;/span&gt;, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;removalPolicy&lt;/span&gt;: cdk.&lt;span class=&#34;hljs-property&#34;&gt;RemovalPolicy&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;RETAIN&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;publicReadAccess&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;websiteIndexDocument&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;versioned&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,
  &amp;#125;)

  s3Origin = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; origins.&lt;span class=&#34;hljs-title function_&#34;&gt;S3Origin&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;publicAssetsS3Bucket&lt;/span&gt;);

  cfDistribution = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;Distribution&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;CFDistribution&amp;#x27;&lt;/span&gt;, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;defaultBehavior&lt;/span&gt;: &amp;#123;
      &lt;span class=&#34;hljs-attr&#34;&gt;origin&lt;/span&gt;: s3Origin,
    &amp;#125;,
    &lt;span class=&#34;hljs-comment&#34;&gt;// Certificate and domain configuration omitted&lt;/span&gt;
  &amp;#125;);
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here our CF Distribution is backed by an S3 bucket.&lt;/p&gt;
&lt;p&gt;Now, to support reverse proxying to an API we need an additional origin. While adding this origin, we will also want to configure additional policies to ensure that the responses from this origin do not get cached: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;dist.&lt;span class=&#34;hljs-title function_&#34;&gt;addBehavior&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/api/*&amp;quot;&lt;/span&gt;, apiOrigin, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;responseHeadersPolicy&lt;/span&gt;: cfAPIRespHeadersPolicy,
    &lt;span class=&#34;hljs-attr&#34;&gt;allowedMethods&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;AllowedMethods&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;ALLOW_ALL&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;cachePolicy&lt;/span&gt;: cfApiCachePolicy,
    &lt;span class=&#34;hljs-attr&#34;&gt;originRequestPolicy&lt;/span&gt;: cfApiOriginReqPolicy,
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important to explicitly allow all methods because CF by default permits only GET &amp;amp; HEAD requests, and other HTTP verbs will be rejected.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s next look at the associated policies: &lt;/p&gt;
&lt;p&gt;Following Response headers policy primary hints browsers to not cache the API responses:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;cfAPIRespHeadersPolicy = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;ResponseHeadersPolicy&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CFAPIRespHeadersPolicy&amp;quot;&lt;/span&gt;, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;customHeadersBehavior&lt;/span&gt;: &amp;#123;
      &lt;span class=&#34;hljs-attr&#34;&gt;customHeaders&lt;/span&gt;: [
        &amp;#123;
          &lt;span class=&#34;hljs-attr&#34;&gt;header&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Cache-Control&amp;quot;&lt;/span&gt;,
          &lt;span class=&#34;hljs-attr&#34;&gt;override&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,
          &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;no-cache&amp;quot;&lt;/span&gt;,
        &amp;#125;,
      ],
    &amp;#125;,
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Cache policy will ensure that cloudfront itself does not cache the responses from our API backend: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;cfApiCachePolicy = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;CachePolicy&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ApiCachePolicy&amp;quot;&lt;/span&gt;, &amp;#123;
  &lt;span class=&#34;hljs-attr&#34;&gt;defaultTtl&lt;/span&gt;: cdk.&lt;span class=&#34;hljs-property&#34;&gt;Duration&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;seconds&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;),
  &lt;span class=&#34;hljs-attr&#34;&gt;maxTtl&lt;/span&gt;: cdk.&lt;span class=&#34;hljs-property&#34;&gt;Duration&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;seconds&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;),
  &lt;span class=&#34;hljs-attr&#34;&gt;queryStringBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;CacheQueryStringBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;all&lt;/span&gt;(),
  &lt;span class=&#34;hljs-attr&#34;&gt;headerBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;CacheHeaderBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;allowList&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Authorization&amp;#x27;&lt;/span&gt;)
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we also need to explicitly allow the Authorization header otherwise it will be stripped by Cloudfront. &lt;/p&gt;
&lt;p&gt;Currently there appears to be a bug which prevents us from being able to specify a header behavior if all the ttls are 0, so we keep the maxTtl as 1s.&lt;/p&gt;
&lt;p&gt;Lastly, we need an OriginRequestPolicy that instructs Cloudfront to forward all query params &amp;amp; cookies to the backend. In addition we can also specify any cloudfront specific headers here. In example below we add the &lt;code&gt;CloudFront-Viewer-Address&lt;/code&gt; header which enables the backend to receive the actual IP of the user.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;cfApiOriginReqPolicy = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;OriginRequestPolicy&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ApiOriginReqPolicy&amp;quot;&lt;/span&gt;, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;originRequestPolicyName&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;SampleApiOriginReqPolicy&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;cookieBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;OriginRequestCookieBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;all&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;headerBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;OriginRequestHeaderBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;all&lt;/span&gt;(
      &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CloudFront-Viewer-Address&amp;quot;&lt;/span&gt;
    ),
    &lt;span class=&#34;hljs-attr&#34;&gt;queryStringBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;OriginRequestQueryStringBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;all&lt;/span&gt;(),
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our final integration looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; cdk &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib&amp;quot;&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; s3 &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib/aws-s3&amp;quot;&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; cf &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib/aws-cloudfront&amp;quot;&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; origins &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aws-cdk-lib/aws-cloudfront-origins&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FrontendStack&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;cdk.Stack&lt;/span&gt; &amp;#123;
  publicAssetsS3Bucket = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; s3.&lt;span class=&#34;hljs-title class_&#34;&gt;Bucket&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;PublicAssetsS3Bucket&amp;#x27;&lt;/span&gt;, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;removalPolicy&lt;/span&gt;: cdk.&lt;span class=&#34;hljs-property&#34;&gt;RemovalPolicy&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;RETAIN&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;publicReadAccess&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;websiteIndexDocument&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;versioned&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,
  &amp;#125;)

  cfApiCachePolicy = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;CachePolicy&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ApiCachePolicy&amp;quot;&lt;/span&gt;, &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;defaultTtl&lt;/span&gt;: cdk.&lt;span class=&#34;hljs-property&#34;&gt;Duration&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;seconds&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;),
    &lt;span class=&#34;hljs-attr&#34;&gt;maxTtl&lt;/span&gt;: cdk.&lt;span class=&#34;hljs-property&#34;&gt;Duration&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;seconds&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;),
    &lt;span class=&#34;hljs-attr&#34;&gt;queryStringBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;CacheQueryStringBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;all&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;headerBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;CacheHeaderBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;allowList&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Authorization&amp;#x27;&lt;/span&gt;)
  &amp;#125;);

  cfApiOriginReqPolicy = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;OriginRequestPolicy&lt;/span&gt;(
    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ApiOriginReqPolicy&amp;quot;&lt;/span&gt;,
    &amp;#123;
      &lt;span class=&#34;hljs-attr&#34;&gt;originRequestPolicyName&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;SampleApiOriginReqPolicy&amp;quot;&lt;/span&gt;,
      &lt;span class=&#34;hljs-attr&#34;&gt;cookieBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;OriginRequestCookieBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;all&lt;/span&gt;(),
      &lt;span class=&#34;hljs-attr&#34;&gt;headerBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;OriginRequestHeaderBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;all&lt;/span&gt;(
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CloudFront-Viewer-Address&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CloudFront-Viewer-Country&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CloudFront-Viewer-City&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CloudFront-Viewer-Country-Region&amp;quot;&lt;/span&gt;
      ),
      &lt;span class=&#34;hljs-attr&#34;&gt;queryStringBehavior&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;OriginRequestQueryStringBehavior&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;all&lt;/span&gt;(),
    &amp;#125;
  );

  s3Origin = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; origins.&lt;span class=&#34;hljs-title function_&#34;&gt;S3Origin&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;publicAssetsS3Buckets&lt;/span&gt;[idx]);

  apiOrigin = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; origins.&lt;span class=&#34;hljs-title class_&#34;&gt;HttpOrigin&lt;/span&gt;(serverHost!);
  
  cfAPIRespHeadersPolicy = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;ResponseHeadersPolicy&lt;/span&gt;(
    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,
    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cfHTMLRespHeadersPolicy&amp;quot;&lt;/span&gt;,
    &amp;#123;
      &lt;span class=&#34;hljs-attr&#34;&gt;customHeadersBehavior&lt;/span&gt;: &amp;#123;
        &lt;span class=&#34;hljs-attr&#34;&gt;customHeaders&lt;/span&gt;: [
          &amp;#123;
            &lt;span class=&#34;hljs-attr&#34;&gt;header&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Cache-Control&amp;quot;&lt;/span&gt;,
            &lt;span class=&#34;hljs-attr&#34;&gt;override&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,
            &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;no-cache&amp;quot;&lt;/span&gt;,
          &amp;#125;,
        ],
      &amp;#125;,
    &amp;#125;
  );

  configureCFDistribution = (): cf.&lt;span class=&#34;hljs-property&#34;&gt;Distribution&lt;/span&gt; =&amp;gt; &amp;#123;
      &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; dist = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; cf.&lt;span class=&#34;hljs-title class_&#34;&gt;Distribution&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;CFDistribution&amp;#x27;&lt;/span&gt;, &amp;#123;
        &lt;span class=&#34;hljs-attr&#34;&gt;defaultBehavior&lt;/span&gt;: &amp;#123;
          &lt;span class=&#34;hljs-attr&#34;&gt;origin&lt;/span&gt;: s3Origin,
        &amp;#125;,
        &lt;span class=&#34;hljs-comment&#34;&gt;// Certificate and domain configuration omitted&lt;/span&gt;
      &amp;#125;);

      dist.&lt;span class=&#34;hljs-title function_&#34;&gt;addBehavior&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/api/*&amp;quot;&lt;/span&gt;, apiOrigin, &amp;#123;
        &lt;span class=&#34;hljs-attr&#34;&gt;responseHeadersPolicy&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfAPIRespHeadersPolicy&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;allowedMethods&lt;/span&gt;: cf.&lt;span class=&#34;hljs-property&#34;&gt;AllowedMethods&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;ALLOW_ALL&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;cachePolicy&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfApiCachePolicy&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;originRequestPolicy&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;cfApiOriginReqPolicy&lt;/span&gt;,
      &amp;#125;);

      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; dist;
  &amp;#125;

  cfDistribution = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;configureCFDistribution&lt;/span&gt;()
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="typescript" />
        <category term="cloudfront" />
        <category term="AWS" />
        <category term="CDK" />
        <updated>2022-12-06T16:50:53.806Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/10/01/embedding-sql-migrations-in-go-binary/</id>
        <title>Embedding sql migrations in go binary</title>
        <link rel="alternate" href="https://lorefnon.me/2022/10/01/embedding-sql-migrations-in-go-binary/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;github.com/golang-migrate/migrate&#34;&gt;Go-migrate&lt;/a&gt; is a simple and easy to use database migration (schema evolution) library for go with good support for many mainstream databases. This post is a quick recipe on how we can bundle the migrations (sql patch files) within our go binary - this is particularly helpful when the app is distributed a single binary without dependencies.&lt;/p&gt;
&lt;p&gt;Go stdlib includes an &lt;a href=&#34;https://pkg.go.dev/embed&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;embed package&lt;/a&gt; that simplifies accessing files embedded in the running go program. Also go-migrate has support for httpfs as a source that makes it easy to integrate the two.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; store
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; (
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;database/sql&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;embed&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;path/filepath&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;github.com/golang-migrate/migrate/v4&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;github.com/golang-migrate/migrate/v4/database/sqlite3&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;github.com/golang-migrate/migrate/v4/source/httpfs&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	_ &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;github.com/mattn/go-sqlite3&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Our migration files reside in db_migrations directory within this package&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// eg. db_migrations/&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//     |_ 001_create_tables.up.sql&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//     |_ 001_create_tables.down.sql&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//go:embed db_migrations&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; migrations embed.FS
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;migrateSchema&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;error&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    db, err := sql.Open(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sqlite3&amp;quot;&lt;/span&gt;, dbFilePath)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt; { &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; err }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    driver, err := sqlite3.WithInstance(db, &lt;span class=&#34;hljs-built_in&#34;&gt;new&lt;/span&gt;(sqlite3.Config))
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt; { &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; err }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    sourceInstance, err := httpfs.New(http.FS(migrations), &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;db_migrations&amp;quot;&lt;/span&gt;)    
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt; { &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; err }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    migrator, err := migrate.NewWithInstance(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;httpfs&amp;quot;&lt;/span&gt;, sourceInstance, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sqlite3&amp;quot;&lt;/span&gt;, driver) 
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt; { &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; err }
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    err = migrator.Up()
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; err
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

</content>
        <category term="go" />
        <category term="sql" />
        <category term="go-migrate" />
        <updated>2022-10-01T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/10/01/using-buf-connect-with-chi/</id>
        <title>Using chi router and connect-go together</title>
        <link rel="alternate" href="https://lorefnon.me/2022/10/01/using-buf-connect-with-chi/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;https://github.com/bufbuild/connect-go&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;connect-go&lt;/a&gt; is a protobuf RPC implementation, touted as a better gRPC. I have been using it for few weeks and have found it to be quite enjoyable.&lt;/p&gt;
&lt;p&gt;This post is a quick recipe on how to use it alongside chi router. The &lt;a href=&#34;https://github.com/bufbuild/connect-go#a-small-example&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;official docs&lt;/a&gt; already illustrate using connect with net&amp;#x2F;http2 directly. But if you are incrementally adopting connect in a project, or need a few REST style endpoints for backward compatibility, or for file uploads or serving server generated templates, it is easy to use connect alongside the &lt;a href=&#34;https://go-chi.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;chi router&lt;/a&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;mux := chi.NewRouter()
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Middlewares&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;mux.Use(middleware.Logger)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// HTTP Endpoints&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;mux.Post(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/upload&amp;quot;&lt;/span&gt;, handleFileUpload)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Connect API Endpoints&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Associate the Handlers generated from the protobuf file&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;path, handler := pbconnect.SampleServiceHandler(
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Pass service implementation here:&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    &amp;amp;SampleServiceImpl{},
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;mux.Handle(path+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, handler) &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;----- Note The &amp;quot;*&amp;quot; wildcard suffix here&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Use h2c so we can serve HTTP/2 without TLS.&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;handler := h2c.NewHandler(mux, &amp;amp;http2.Server{})
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;err := http.ListenAndServe(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;localhost:8080&amp;quot;&lt;/span&gt;, handler)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-built_in&#34;&gt;panic&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Failed to init http server&amp;quot;&lt;/span&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="go" />
        <category term="chi" />
        <category term="connect" />
        <updated>2022-10-01T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/09/04/getting-started-with-jet-query-builder-for-golang/</id>
        <title>Getting started with Jet Query builder for Go</title>
        <link rel="alternate" href="https://lorefnon.me/2022/09/04/getting-started-with-jet-query-builder-for-golang/"/>
        <content type="html">&lt;p&gt;I was recently looking for a good query builder for a go application I am prototyping, and settled on &lt;a href=&#34;https://github.com/go-jet/jet&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Jet&lt;/a&gt;. Jet has a nice &lt;a href=&#34;https://github.com/go-jet/jet/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;wiki&lt;/a&gt;, but limited introductory material as of this writing, so this post is an attempt to collect a set of small recipies to help you get started with it quicker.&lt;/p&gt;
&lt;h2 id=&#34;Why-Jet&#34;&gt;&lt;a href=&#34;#Why-Jet&#34; class=&#34;headerlink&#34; title=&#34;Why Jet ?&#34;&gt;&lt;/a&gt;Why Jet ?&lt;/h2&gt;&lt;p&gt;Usually larger applications tend to adopt fully featured ORMs early on, where as smaller micro-services often eschew the complexity that comes with a full ORM and directly use the low level database adapters.&lt;/p&gt;
&lt;p&gt;Query builders like jet sit somewhere between the two in the abstraction ladder. &lt;/p&gt;
&lt;p&gt;Unlike a full ORM it doesn&amp;#39;t have features like dirty tracking, model lifecycle hooks etc. &lt;/p&gt;
&lt;p&gt;Also unlike directly using a database driver, it provides a type-safe API to construct SQL queries which I find much more ergonomic and less error-prone than raw parameterized queries or (ugh) constructing complex sql with string interpolations.&lt;/p&gt;
&lt;p&gt;Jet fits a sweet spot for me, because: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is not overly opinionated around how database should be accessed.&lt;/li&gt;
&lt;li&gt;Whatever you can do with SQL, you can also do with Jet&lt;/li&gt;
&lt;li&gt;It is performant, very little overhead over direct SQL&lt;/li&gt;
&lt;li&gt;It is type-safe - no ugly string interpolations, no SQL syntax errors in corner cases.&lt;/li&gt;
&lt;li&gt;The API closely matches the SQL syntax - so less learning curve is required&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;How-to-use&#34;&gt;&lt;a href=&#34;#How-to-use&#34; class=&#34;headerlink&#34; title=&#34;How to use ?&#34;&gt;&lt;/a&gt;How to use ?&lt;/h2&gt;&lt;p&gt;Jet is easy to get started with. It is designed to work with the &lt;code&gt;database/sql&lt;/code&gt; package in go stdlib, and only offers a query builder. The database&amp;#x2F;sql package is used for actually executing the queries on the database.&lt;/p&gt;
&lt;p&gt;In this post we will use a sqlite, but jet offers support for most mainstream databases.&lt;/p&gt;
&lt;h3 id=&#34;Configuring-the-codegenerator&#34;&gt;&lt;a href=&#34;#Configuring-the-codegenerator&#34; class=&#34;headerlink&#34; title=&#34;Configuring the codegenerator&#34;&gt;&lt;/a&gt;Configuring the codegenerator&lt;/h3&gt;&lt;p&gt;Jet offers what is called a database-first approach. In this approach, you update your database first (a migration system is recommended) and then generate code from the database for all your tables. &lt;/p&gt;
&lt;p&gt;This ensures that the table mapping code is always up-to-date and you don&amp;#39;t need to specify every column being added twice - once when updating the database, and once in application code. &lt;/p&gt;
&lt;p&gt;Let us say we have following sql tables defined in test.sqlite3: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs sql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;TABLE&lt;/span&gt;
  notebook (id &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;36&lt;/span&gt;) &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key, title &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;500&lt;/span&gt;));

&lt;span class=&#34;hljs-keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;TABLE&lt;/span&gt;
  note (
    id &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;36&lt;/span&gt;) &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key,
    title &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;500&lt;/span&gt;),
    notebook_id &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;36&lt;/span&gt;) &lt;span class=&#34;hljs-keyword&#34;&gt;references&lt;/span&gt; notebook (id) &lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;delete&lt;/span&gt; cascade &lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;update&lt;/span&gt; restrict
  );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate the code, we&amp;#39;ll first need to install the jet cli. We will also need to ensure that the specific database drivers we need are enabled through build tags: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;go install -tags &amp;#x27;sqlite3&amp;#x27; github.com/go-jet/jet/v2/cmd/jet@latest&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you will need to change the tags if you are using another database.  Also if you are using sqlite, and need to use some of the sqlite extensions, you&amp;#39;ll need additional build tags for those too, for example: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;go install -tags &amp;#x27;json1 fts5 sqlite3&amp;#x27; github.com/go-jet/jet/v2/cmd/jet@latest&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside a go project, we can generate the jet mapper code for this database using a command like: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;jet -source=sqlite -dsn=&amp;quot;/tmp/test.sqlite3&amp;quot; -path=./gen/jet&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you use a migration system like dbmate, go-migrate or atlas, you&amp;#39;d typically want to exclude the tables used only for migration bookkeeping.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs plaintext&#34;&gt;jet -source=sqlite -dsn=&amp;quot;/tmp/test.sqlite3&amp;quot; -path=./gen/jet -ignore-tables=schema_migrations&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, so now let&amp;#39;s look at the generated files: For every table we have a table mapper file and model file. For example for notebook we have the following table mapper file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Code generated by go-jet DO NOT EDIT.&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// WARNING: Changes to this file may cause incorrect behavior&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// and will be lost if the code is regenerated&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; table
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; (
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;github.com/go-jet/jet/v2/sqlite&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; Notebook = newNotebookTable(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;notebook&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; notebookTable &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	sqlite.Table
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//Columns&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	ID    sqlite.ColumnString
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	Title sqlite.ColumnString
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	AllColumns     sqlite.ColumnList
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	MutableColumns sqlite.ColumnList
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; NotebookTable &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	notebookTable
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	EXCLUDED notebookTable
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// AS creates new NotebookTable with assigned alias&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(a NotebookTable)&lt;/span&gt;&lt;/span&gt; AS(alias &lt;span class=&#34;hljs-type&#34;&gt;string&lt;/span&gt;) *NotebookTable {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; newNotebookTable(a.SchemaName(), a.TableName(), alias)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Schema creates new NotebookTable with assigned schema name&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(a NotebookTable)&lt;/span&gt;&lt;/span&gt; FromSchema(schemaName &lt;span class=&#34;hljs-type&#34;&gt;string&lt;/span&gt;) *NotebookTable {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; newNotebookTable(schemaName, a.TableName(), a.Alias())
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// WithPrefix creates new NotebookTable with assigned table prefix&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(a NotebookTable)&lt;/span&gt;&lt;/span&gt; WithPrefix(prefix &lt;span class=&#34;hljs-type&#34;&gt;string&lt;/span&gt;) *NotebookTable {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; newNotebookTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// WithSuffix creates new NotebookTable with assigned table suffix&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(a NotebookTable)&lt;/span&gt;&lt;/span&gt; WithSuffix(suffix &lt;span class=&#34;hljs-type&#34;&gt;string&lt;/span&gt;) *NotebookTable {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; newNotebookTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;newNotebookTable&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(schemaName, tableName, alias &lt;span class=&#34;hljs-type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; *NotebookTable {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;NotebookTable{
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		notebookTable: newNotebookTableImpl(schemaName, tableName, alias),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		EXCLUDED:      newNotebookTableImpl(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;excluded&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;newNotebookTableImpl&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(schemaName, tableName, alias &lt;span class=&#34;hljs-type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; notebookTable {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; (
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		IDColumn       = sqlite.StringColumn(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		TitleColumn    = sqlite.StringColumn(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		allColumns     = sqlite.ColumnList{IDColumn, TitleColumn}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		mutableColumns = sqlite.ColumnList{TitleColumn}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; notebookTable{
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//Columns&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		ID:    IDColumn,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Title: TitleColumn,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		AllColumns:     allColumns,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		MutableColumns: mutableColumns,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file initializes the specific table objects for constructing SQL queries.&lt;/p&gt;
&lt;p&gt;We also have a model file which is a simple go struct representing a row in a table: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Code generated by go-jet DO NOT EDIT.&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// WARNING: Changes to this file may cause incorrect behavior&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// and will be lost if the code is regenerated&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; model
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; Notebook &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	ID    &lt;span class=&#34;hljs-type&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`sql:&amp;quot;primary_key&amp;quot;`&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	Title *&lt;span class=&#34;hljs-type&#34;&gt;string&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will have this pair generated for each table in our db. &lt;/p&gt;
&lt;h2 id=&#34;Executing-queries&#34;&gt;&lt;a href=&#34;#Executing-queries&#34; class=&#34;headerlink&#34; title=&#34;Executing queries&#34;&gt;&lt;/a&gt;Executing queries&lt;/h2&gt;&lt;p&gt;Now that we have our code generated, we can use the generated API to query our database. &lt;/p&gt;
&lt;p&gt;Jet&amp;#39;s api closely matches the SQL syntax. So to fetch a note with known title we can do something like: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; (
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	m &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;example.com/rts/gen/jet/model&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	t &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;example.com/rts/gen/jet/table&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	jet &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;github.com/go-jet/jet/v2/sqlite&amp;quot;&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;query := t.Note.
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    SELECT(t.Notebook.AllColumns).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    WHERE(t.Notebook.Title.EQ(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;))
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this just creates the query. To actually execute it, we need a sql.DB instance. This would be created through the database&amp;#x2F;sql package in go stdlib and is not jet specific. &lt;/p&gt;
&lt;p&gt;For SQLite all we need is the path to the database. For other database we can pass connection strings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;db, err := sql.Open(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sqlite3&amp;quot;&lt;/span&gt;, dbFilePath)
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run the query through the db instance and map the rows to our generated model structs: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; notebooks []m.Notebook
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;err := t.Notebook.
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    SELECT(t.Notebook.AllColumns).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    WHERE(t.Notebook.Title.EQ(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;)).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    Query(db, &amp;amp;notebooks)
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the query succeeds our notebooks slice will be populated with the fetched rows.&lt;/p&gt;
&lt;p&gt;Note that we didn&amp;#39;t have to deal with untyped data at any point. &lt;/p&gt;
&lt;p&gt;We are also not restricted to using the generated model types. The generated model types are provided as a convenience for common crud operations, but we will often need to define custom types when fetching subset of columns or when fetching data from multiple tables. &lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say we want to fetch not only the notebook, but all associated notes. To represent a note along with member notes, we can define following struct which composes the generated models:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; NotebookWithNotes &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    m.Notebook,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    Notes []m.Note
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and use that in our query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; notebooks []m.NotebookWithNotes
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;err := t.Notebook.
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    INNER_JOIN(t.Note, t.Note.NotebookID.EQ(t.Notebook.ID))
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    SELECT(t.Notebook.AllColumns).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    WHERE(t.Notebook.Title.EQ(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;)).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    Query(db, &amp;amp;notebooks)
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The join syntax is pretty similar to what we would have expected from SQL. Also we didn&amp;#39;t have to do anything special here to support mapping the flattened rows to hierarchical model. jet is able to automatically identify the Notebook fields from embedded struct and the Note fields in the member slice and populate them all from the rows in database. &lt;/p&gt;
&lt;h2 id=&#34;Integration-with-context-propagation&#34;&gt;&lt;a href=&#34;#Integration-with-context-propagation&#34; class=&#34;headerlink&#34; title=&#34;Integration with context propagation&#34;&gt;&lt;/a&gt;Integration with context propagation&lt;/h2&gt;&lt;p&gt;Almost all web frameworks integrate with Go&amp;#39;s context propagation system, and it is useful to take advantage of it so that when the context gets cancelled, unnecessary operations can be avoided in the backend. &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-contexts-in-go&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;This DO post&lt;/a&gt; goes into more details about the context mechanism in go. &lt;/p&gt;
&lt;p&gt;jet makes it easier to integrate this mechanism. If we have a context instance at our disposal (likely coming as an argument in our request handler from a web framework), we can pass that to the &lt;code&gt;QueryContext&lt;/code&gt; function instead of using the &lt;code&gt;Query&lt;/code&gt; function as above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; notebooks []m.NotebookWithNotes
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;err := t.Notebook.
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    INNER_JOIN(t.Note, t.Note.NotebookID.EQ(t.Notebook.ID))
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    SELECT(t.Notebook.AllColumns).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    WHERE(t.Notebook.Title.EQ(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;)).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;    Query(db, &amp;amp;notebooks)
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;Query-Logging&#34;&gt;&lt;a href=&#34;#Query-Logging&#34; class=&#34;headerlink&#34; title=&#34;Query Logging&#34;&gt;&lt;/a&gt;Query Logging&lt;/h2&gt;&lt;p&gt;It is clear now that jet enables us to construct complex queries dynamically in our application. It is often useful to log these queries in development so that we can see what exactly is getting executed. This is also useful for DBA audits.&lt;/p&gt;
&lt;p&gt;To make this possible, jet provides a &lt;code&gt;SetQueryLogger&lt;/code&gt; API, which can be used to log operations through any logging library: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;jet.SetQueryLogger(&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ctx context.Context, info jet.QueryInfo)&lt;/span&gt;&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	query, args := info.Statement.Sql()
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	zerolog.Debug().
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Int64(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;DurationMS&amp;quot;&lt;/span&gt;, info.Duration.Milliseconds()).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Msgf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;SQL Query: SQL: %s\nArgs: %+v&amp;quot;&lt;/span&gt;, query, args)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;})
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above example uses zerolog, but we are free to use any logging library available for go.&lt;/p&gt;
&lt;h2 id=&#34;Insert-x2F-Update&#34;&gt;&lt;a href=&#34;#Insert-x2F-Update&#34; class=&#34;headerlink&#34; title=&#34;Insert&amp;#x2F;Update&#34;&gt;&lt;/a&gt;Insert&amp;#x2F;Update&lt;/h2&gt;&lt;p&gt;Insert&amp;#x2F;update APIs are also pretty similar to what we&amp;#39;d expect from SQL. We can pass raw values or make use of model structs generated for us (recommended). Following example illustrates the latter approach for insertion: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;_, err := t.Notebook.
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	INSERT(t.Notebook.AllColumns).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	MODEL(&amp;amp;m.Notebook{
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Title: &amp;amp;title,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	}).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	Exec(db)
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The wiki goes into more detail about available APIs, but it is particularly notable that jet has good support for on conflict update APIs which are often useful for preventing get-check-insert race-conditions: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;_, err := t.Notebook.
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	INSERT(t.Notebook.AllColumns).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	MODEL(&amp;amp;m.Notebook{
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		ID:    someId,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Title: &amp;amp;title,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	}).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	ON_CONFLICT(t.Notebook.ID).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	DO_UPDATE(jet.SET(t.Notebook.Title.SET(t.Notebook.EXCLUDED.Title))).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	Exec(db)
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In contrast, if did a select to check whether a notebook exists, and issued an insert if it didn&amp;#39;t, the insert could still fail because a notebook could have been inserted in the meanwhile.&lt;/p&gt;
&lt;h2 id=&#34;Subqueries&#34;&gt;&lt;a href=&#34;#Subqueries&#34; class=&#34;headerlink&#34; title=&#34;Subqueries&#34;&gt;&lt;/a&gt;Subqueries&lt;/h2&gt;&lt;p&gt;As we may expect by now, jet has good support for subqueries too. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;_, err = t.Note.DELETE().
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	WHERE(
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		t.Note.ID.IN(
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;			t.Note.LEFT_JOIN(t.NoteFile, t.NoteFile.NoteID.EQ(t.Note.ID)).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;				SELECT(t.Note.ID).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;				WHERE(t.Note.NotebookID.EQ(jet.String(notebookId)).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;					AND(t.NoteFile.ID.IS_NULL())),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		),
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	).
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	ExecContext(ctx, store.db)
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully this provides a high-level overview that can jumpstart your go project that needs database access.&lt;/p&gt;
&lt;p&gt;This post has, however, just scratched the surface of what is possible with jet, and the aforementioned &lt;a href=&#34;https://github.com/go-jet/jet/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;jet wiki&lt;/a&gt; goes into a lot more detail.&lt;/p&gt;
</content>
        <category term="go" />
        <category term="golang" />
        <category term="jet" />
        <category term="sql" />
        <updated>2022-09-04T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/09/01/setting-up-log-rotation-for-zerolog/</id>
        <title>Setting up log-rotation for zerolog</title>
        <link rel="alternate" href="https://lorefnon.me/2022/09/01/setting-up-log-rotation-for-zerolog/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;https://github.com/rs/zerolog&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Zerolog&lt;/a&gt; is a popular structured logging library for go. This post is a quick recipie for configuring it to use log rotation. &lt;/p&gt;
&lt;p&gt;Log rotation is a mechanism where instead of having a single log file which keeps growing forever, the application switches to a new log file when a time threshold or a size threshold is exceeded. Optionally files which are too old to be of significance can be deleted.&lt;/p&gt;
&lt;p&gt;Now a days, it is a more common practice to log to a stream and have an external service manage it for you. This is indeed nice if you can embrace it. However, Log rotation can be useful for desktop applications or isolated deployments.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/natefinch/lumberjack&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Lumberjack&lt;/a&gt; is a nice utility for go that supports log rotation. It is also easy to hook up with zerolog because a lumberjack logger implements io.Writer which zerolog can target.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&lt;table class=&#34;hlcode-table&#34;&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** Configuration options for log rotation */&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; LoggerConfig &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/** Max size of the logfile before it&amp;#x27;s rolled */&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	MaxSizeMB &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`json:&amp;quot;max_size_mb,omitempty&amp;quot;`&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/** Max number of rolled files to keep */&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	MaxBackupCount &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`json:&amp;quot;max_backup_count,omitempty&amp;quot;`&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/** Max age in days to keep a logfile */&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	MaxAgeDays &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`json:&amp;quot;max_age_days,omitempty&amp;quot;`&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;initLogger&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(config *config.LoggerConfig)&lt;/span&gt;&lt;/span&gt; *zerolog.Logger {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; writers []io.Writer
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// Optional: Log to console&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	writers = &lt;span class=&#34;hljs-built_in&#34;&gt;append&lt;/span&gt;(writers, zerolog.ConsoleWriter{Out: os.Stderr})
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// Log to rolling file&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	writers = &lt;span class=&#34;hljs-built_in&#34;&gt;append&lt;/span&gt;(writers, initRollingFileLogger(config))
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;// Multiwriter encapsulates multiple writers&lt;/span&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	mw := io.MultiWriter(writers...)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	logger := zerolog.New(mw).With().
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Timestamp().
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Logger()
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;logger
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;initRollingFileLogger&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(config *config.LoggerConfig)&lt;/span&gt;&lt;/span&gt; *lumberjack.Logger {
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	loggerPath := filepath.Join(xdg.DataHome, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;example&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app.log&amp;quot;&lt;/span&gt;)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	fmt.Printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;logging to file: %s\n&amp;quot;&lt;/span&gt;, loggerPath)
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;lumberjack.Logger{
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		Filename:   loggerPath,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		MaxBackups: config.MaxBackupCount,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		MaxSize:    config.MaxSizeMB,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;		MaxAge:     config.MaxAgeDays,
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;	}
&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;border:none;&#34; class=&#34;hlcode-line  &#34; &gt;&lt;td style=&#34;border:none&#34; class=&#34;hlcode-code-cell&#34;&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now use the logger returned by initLogger to write logs, and they will be written to a file which will be rotated by lumberjack.&lt;/p&gt;
</content>
        <category term="go" />
        <category term="golang" />
        <category term="zerolog" />
        <updated>2022-09-01T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/06/25/generating-api-docs-for-zod-types/</id>
        <title>Generating API docs for zod-types</title>
        <link rel="alternate" href="https://lorefnon.me/2022/06/25/generating-api-docs-for-zod-types/"/>
        <content type="html">&lt;p&gt;I often like to use &lt;a href=&#34;https://github.com/colinhacks/zod&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;zod&lt;/a&gt; for validating user provided options in the public API in typescript projects. Zod offers a really nice validation &amp;amp; type inference support and it is nice to be able to fail early for invalid options even if consumer is not using typescript.&lt;/p&gt;
&lt;p&gt;Generating API documentation is a bit of trouble though, for these types. &lt;a href=&#34;https://typedoc.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;Typedoc&lt;/a&gt; is a nice documentation generator I frequently use, but it does not have any specialized zod support and works best when types are defined through normal typescript interfaces.&lt;/p&gt;
&lt;p&gt;So what do we do ? &lt;/p&gt;
&lt;p&gt;Interestingly, typescript is able to propagate comments through inheritance hierarchy and mapped types.&lt;/p&gt;
&lt;p&gt;So if we have a zod-type as follows: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; z &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zod&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-comment&#34;&gt;/** Full name of user */&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and later define an interface that extends the type inferred from this: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; z.&lt;span class=&#34;hljs-title class_&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;typeof &lt;span class=&#34;hljs-title class_&#34;&gt;UserSchema&lt;/span&gt;&amp;gt; &amp;#123;&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generated documentation of User will contain the comments for name property.&lt;/p&gt;
&lt;p&gt;This unfortunately works only for Object types as long as we don&amp;#39;t introduce any unions and intersections - any base type of an interface must have statically known members. This also doesn&amp;#39;t work well for nested object types as typedoc will pick only the types at top level.&lt;/p&gt;
&lt;p&gt;For more complex types, a simple workaround is to extract interfaces for constituent types and link them in the documentation. &lt;/p&gt;
&lt;p&gt;So instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDetailsSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;profile&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
        &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
    &amp;#125;).&lt;span class=&#34;hljs-title function_&#34;&gt;nullish&lt;/span&gt;()
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;d write: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ProfileSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-comment&#34;&gt;/** Full name of user */&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Profile&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; z.&lt;span class=&#34;hljs-title class_&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;typeof &lt;span class=&#34;hljs-title class_&#34;&gt;ProfileSchema&lt;/span&gt;&amp;gt; &amp;#123;&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDetailsSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-comment&#34;&gt;/** See &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@link&lt;/span&gt; Profile&amp;#125; */&lt;/span&gt;
    &lt;span class=&#34;hljs-attr&#34;&gt;profile&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;Profile&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;nullish&lt;/span&gt;()
&amp;#125;)

&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDetails&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; z.&lt;span class=&#34;hljs-title class_&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;typeof &lt;span class=&#34;hljs-title class_&#34;&gt;UserDetailsSchema&lt;/span&gt;&amp;gt; &amp;#123;&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This increases the boilerplate a bit, but is otherwise quite practical.&lt;/p&gt;
</content>
        <category term="typescript" />
        <category term="zod" />
        <updated>2022-06-25T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/06/18/type-safe-event-handling-with-zod-and-ts-pattern/</id>
        <title>Type-safe event handling in Typescript with zod and ts-pattern</title>
        <link rel="alternate" href="https://lorefnon.me/2022/06/18/type-safe-event-handling-with-zod-and-ts-pattern/"/>
        <content type="html">&lt;h1 id=&#34;Event-handling&#34;&gt;&lt;a href=&#34;#Event-handling&#34; class=&#34;headerlink&#34; title=&#34;Event handling&#34;&gt;&lt;/a&gt;Event handling&lt;/h1&gt;&lt;p&gt;It is no surprise to anyone that event handling is bread and butter in javascript. However, often we receive several types of events from an event source which makes handling them in a type-safe manner harder. Eg. if we are consuming websocket events on the backend we may write something like: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; ws &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ws&amp;quot;&lt;/span&gt;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; app = &lt;span class=&#34;hljs-title function_&#34;&gt;express&lt;/span&gt;()

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; server = app.&lt;span class=&#34;hljs-title function_&#34;&gt;listen&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;3000&lt;/span&gt;)

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; wss = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; ws.&lt;span class=&#34;hljs-title class_&#34;&gt;Server&lt;/span&gt;(&amp;#123; server &amp;#125;)

wss.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;connection&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;ws: ws.WebSocket&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
    ws.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; parsed = &lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(data); 
               ^
               &lt;span class=&#34;hljs-string&#34;&gt;`----- any :(&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;    &amp;#125;)&lt;/span&gt;
&lt;span class=&#34;hljs-string&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly we could be receiving a message from a different window&amp;#x2F;frame through postMessage, or another peer over a webrtc data channel, the problem remains the same: After receiving the data we need to disambiguate it into one of the multiple possible types of messages and branch out the handling logic from there.&lt;/p&gt;
&lt;p&gt;The most basic way would be to write a &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;type-guard&lt;/a&gt; for each possible type.&lt;/p&gt;
&lt;p&gt;Typescript offers flow-sensitive typing so once we have established in a branch that a value is of a particular type, we do need any extra casts. &lt;/p&gt;
&lt;p&gt;So we could write something like this: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetails&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;;
    &lt;span class=&#34;hljs-attr&#34;&gt;description&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;;
&amp;#125;

&lt;span class=&#34;hljs-comment&#34;&gt;// Types for our events:&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetails&lt;/span&gt;
&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePost&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;,
    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetails&lt;/span&gt;
&amp;#125;

&lt;span class=&#34;hljs-comment&#34;&gt;// Type-guards for different message types&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; isCreatePost = (&lt;span class=&#34;hljs-attr&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;): event is &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; =&amp;gt; event.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; isUpdatePost = (&lt;span class=&#34;hljs-attr&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;): event is &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; =&amp;gt; event.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;

&lt;span class=&#34;hljs-comment&#34;&gt;// Later in our message receiver: &lt;/span&gt;

ws.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; parsed = &lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(data); 
    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-title function_&#34;&gt;isCreatePost&lt;/span&gt;(parsed)) &amp;#123;
        ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleCreatePost&lt;/span&gt;(parsed))
        &lt;span class=&#34;hljs-comment&#34;&gt;//                       ^&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;//                       `---- type of parsed is CreatePost in this branch&lt;/span&gt;
    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-title function_&#34;&gt;isUpdatePost&lt;/span&gt;(parsed)) &amp;#123;
        ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleUpdatePost&lt;/span&gt;(parsed))
        &lt;span class=&#34;hljs-comment&#34;&gt;//                        ^&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;//                         `---- type of parsed is UpdatePost in this branch&lt;/span&gt;
    &amp;#125;
    &lt;span class=&#34;hljs-comment&#34;&gt;// ....&lt;/span&gt;
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it is quite a bit of boilerplate to discriminate&amp;#x2F;disambiguate between different possible types. This boilerpate is also repetitive if we adopt a convention that we will always discriminate the types based on a &lt;code&gt;type&lt;/code&gt; attribute which all the events will have. &lt;/p&gt;
&lt;p&gt;Other issue is that we are trusting the rest of the shape of the data based on the type attribute. Our type-guards (isCreatePost, isUpdatePost etc.) just check for the type property - and assumes that rest of the properties are as expected. If the websocket client sends an invalid object like &lt;code&gt;&amp;#123; type: &amp;quot;CreatePost&amp;quot; &amp;#125;&lt;/code&gt; (no data) we will get a runtime error which may surface deeper inside the handling logic with a confusing stack trace. &lt;/p&gt;
&lt;p&gt;When we are receiving data over a network boundary or from a persisted store, it is generally safer to validate the complete payload at the boundary itself (which is our message receiver function in this example) and fail early with a clean error.&lt;/p&gt;
&lt;p&gt;We could write our type-guard to be more defensive like: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; isCreatePost = (&lt;span class=&#34;hljs-attr&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;): event is &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; =&amp;gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; event.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;
        &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; event.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;
        &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; event.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;title&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;
        &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; event.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;description&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this is now a ton of additional work. &lt;/p&gt;
&lt;p&gt;This is also error prone because tomorrow if we add another field in PostDetails we will also need to update all these type-guards to accomodate the same. They have to kept in sync manually with no help from type-checker whatsoever.&lt;/p&gt;
&lt;p&gt;Fortunately, we have libraries to simplify this validation logic for us. One such library is &lt;a href=&#34;https://github.com/colinhacks/zod&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;zod&lt;/a&gt; which is what I currently use in my production applications.&lt;/p&gt;
&lt;p&gt;With zod we can define the shape of our events through zod&amp;#39;s API: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; zod &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zod&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;description&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePostSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;),
    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePostSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;),
    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;partial&lt;/span&gt;()
&amp;#125;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The benefit of defining these schema objects, is that we are able to perform runtime validation of unknown data.&lt;/p&gt;
&lt;p&gt;So our isCreatePost type-guard can be written as: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; isCreatePost = (&lt;span class=&#34;hljs-attr&#34;&gt;event&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;): event is &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; =&amp;gt;
    &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePostSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;safeParse&lt;/span&gt;(event).&lt;span class=&#34;hljs-property&#34;&gt;success&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also don&amp;#39;t have to manually define the typescript interfaces for &lt;code&gt;CreatePost&lt;/code&gt;, &lt;code&gt;UpdatePost&lt;/code&gt; etc. ourselves. They can instead be inferred from the Schema objects. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; = z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePostSchema&lt;/span&gt;&amp;gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePost&lt;/span&gt; = z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePostSchema&lt;/span&gt;&amp;gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above approach of discriminating between multiple types using a shared property is very common in practice, and we call union of such types as discriminated unions. &lt;/p&gt;
&lt;p&gt;Zod has built in support for discriminated unions, and we can define an EventSchema as follows: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//                                          ,---- Property based on which we will discriminate&lt;/span&gt;
&lt;span class=&#34;hljs-comment&#34;&gt;//                                         V           the members of our union type&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;discriminatedUnion&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, [
    &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePostSchema&lt;/span&gt;,
    &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePostSchema&lt;/span&gt;
])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often, we won&amp;#39;t define the individual members separately: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;discriminatedUnion&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, [
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;
   &amp;#125;),
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;
   &amp;#125;)
])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is exactly the same as above. &lt;/p&gt;
&lt;p&gt;If we use the previously mentioned TypeOf type to get the static type of EventSchema we will get a union of the CreatePost and UpdatePost types. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Event&lt;/span&gt; = z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above will be inferred as: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Event&lt;/span&gt; = 
    | &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;description&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; &amp;#125; &amp;#125;
    | &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &amp;#123; title?: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;, description?: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; &amp;#125; &amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is effectively: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Event&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;CreatePost&lt;/span&gt; | &lt;span class=&#34;hljs-title class_&#34;&gt;UpdatePost&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One additional thing that we gain from defining a discriminated union is an exhaustiveness check. So we if we use &lt;code&gt;EventSchema.parse(someData)&lt;/code&gt; this will throw a runtime error if someData does not conform to the complete shape of one of the errors.&lt;/p&gt;
&lt;p&gt;We can write our handler as: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;ws.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123; 
        &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; parsed = &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(data)); &lt;span class=&#34;hljs-comment&#34;&gt;// Parse will throw for invalid events&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;//     ^&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;//      `--- CreatePost | UpdatePost&lt;/span&gt;
        &lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; (parsed.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt;) &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;:
            ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleCreatePost&lt;/span&gt;(parsed)) 
            &lt;span class=&#34;hljs-comment&#34;&gt;//                        ^&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;//                        `---- type of parsed is CreatePost in this branch&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;; 
        &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;:
            ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleUpdatePost&lt;/span&gt;(parsed))
            &lt;span class=&#34;hljs-comment&#34;&gt;//                      ^&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;//                       `---- type of parsed is UpdatePost in this branch&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;
        &amp;#125;
    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (e) &amp;#123;
        &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;error&lt;/span&gt;(e);
        &lt;span class=&#34;hljs-comment&#34;&gt;// Also see https://github.com/colinhacks/zod#error-formatting&lt;/span&gt;
    &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, it would be also nice to have this exhaustiveness check enforced in our handler at compile time. The way our code is currently written, tomorrow if we add a new type of event in the discriminated union, but forget to add an if-else branch in the above code, it will get silently ignored - Not great. &lt;/p&gt;
&lt;p&gt;We can take advantage of the typescript compiler option &lt;a href=&#34;https://www.typescriptlang.org/tsconfig#noImplicitReturns&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;noImplicitReturns&lt;/a&gt; to enforce this: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;ws.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123; 
        ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;handleEvent&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(data)))); &lt;span class=&#34;hljs-comment&#34;&gt;// Parse will throw for invalid events&lt;/span&gt;
    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (e) &amp;#123;
        &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;error&lt;/span&gt;(e);
    &amp;#125;
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handleEvent&lt;/span&gt; = (&lt;span class=&#34;hljs-params&#34;&gt;event: Event&lt;/span&gt;) =&amp;gt; &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; (event.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt;) &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;:
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handleCreatePost&lt;/span&gt;(event);
        &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;:
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handleUpdatePost&lt;/span&gt;(event);
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that our switch statement does not have a default case. &lt;/p&gt;
&lt;p&gt;So if we update our Event have another variant like: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;EventSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;discriminatedUnion&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, [
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;CreatePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;
   &amp;#125;),
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UpdatePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;PostDetailsSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;partial&lt;/span&gt;()
   &amp;#125;),
   z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
     &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;literal&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;DeletePost&amp;quot;&lt;/span&gt;),
     &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;() &amp;#125;)
   &amp;#125;)
])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;None of the switch-case branches will now match for &lt;code&gt;DeletePost&lt;/code&gt; and we will end up with a possible branch of code that returns implicitly. Typescript will now complain about that.&lt;/p&gt;
&lt;p&gt;We could wrap-up the post here - given that we have accomplished all the type-safety features we wanted. However, I am not a huge fan of having to rely on implicit returns (or similar workarounds) for exhaustiveness check. &lt;/p&gt;
&lt;p&gt;In many functional languages, we have support for &lt;a href=&#34;https://abitofocaml.weebly.com/12-pattern-matching.html&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;pattern-matching&lt;/a&gt; with built in support for exhaustiveness check. Typescript does not have this at the moment but there are userland implementations that emulate pattern matching. One such library is &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;ts-pattern&lt;/a&gt;, which I have found to work very well in practice. &lt;/p&gt;
&lt;p&gt;With ts-pattern we could write our handler as: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; match &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ts-pattern&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-comment&#34;&gt;// --- &lt;/span&gt;

&lt;span class=&#34;hljs-title function_&#34;&gt;match&lt;/span&gt;(event)
    .&lt;span class=&#34;hljs-title function_&#34;&gt;with&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;CreatePost&amp;#x27;&lt;/span&gt; &amp;#125;, handleCreatePost)
    .&lt;span class=&#34;hljs-title function_&#34;&gt;with&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;UpdatePost&amp;#x27;&lt;/span&gt; &amp;#125;, handleUpdatePost)
    .&lt;span class=&#34;hljs-title function_&#34;&gt;exhaustive&lt;/span&gt;()   &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;--- will be a type error if Event type has any other union members&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only is this more succinct for this use case, ts-pattern becomes more useful when we have more complex scenario like combining multiple predicates or performing checks based on multiple properties. Take a look at some of their examples in the &lt;a href=&#34;https://github.com/gvergnaud/ts-pattern#readme&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, unlike our switch-case or if-else examples above, the entire match invocation is a single expression so we could use the return value of our handler without needing temporary variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;ws.&lt;span class=&#34;hljs-title function_&#34;&gt;send&lt;/span&gt;(
    &lt;span class=&#34;hljs-title function_&#34;&gt;match&lt;/span&gt;(event)
        .&lt;span class=&#34;hljs-title function_&#34;&gt;with&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;CreatePost&amp;#x27;&lt;/span&gt; &amp;#125;, handleCreatePost)
        .&lt;span class=&#34;hljs-title function_&#34;&gt;with&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;UpdatePost&amp;#x27;&lt;/span&gt; &amp;#125;, handleUpdatePost)
        .&lt;span class=&#34;hljs-title function_&#34;&gt;exhaustive&lt;/span&gt;()
)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool, eh ?&lt;/p&gt;
</content>
        <category term="typescript" />
        <category term="zod" />
        <category term="ts-pattern" />
        <updated>2022-06-18T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://lorefnon.me/2022/06/18/type-safe-jsonb-with-ts-sql-query/</id>
        <title>Making jsonb access type-safe with a zod adapter in ts-sql-query</title>
        <link rel="alternate" href="https://lorefnon.me/2022/06/18/type-safe-jsonb-with-ts-sql-query/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;https://ts-sql-query.readthedocs.io/en/stable&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;ts-sql-query&lt;/a&gt; is a nice typescript library for typesafe database access. It goes to great lengths to ensure that if code compiles without type errors then all generated SQL is correct. Of course there are escape hatches for advanced scenarios, but having type-safety for the 90% most common usages is a huge productivity boost.&lt;/p&gt;
&lt;p&gt;Modern databases like postgres have built in json support, enabling us to store semi-structured data in a database column. While this does go against norms of traditional normalization, in practice it is immensely convenient for cases where shaping the data into tabular format is either very time consuming or simply not feasible because the entire structure of data is not known ahead of time or changes frequently.&lt;/p&gt;
&lt;p&gt;However, to be able to effectively process this data in application layer, it is often beneficial to have an application-side schema to validate this json data even if this schema is not 100% known ahead of time, evolves alongside our understanding of data or not 100% strict.&lt;/p&gt;
&lt;p&gt;In typescript, we have a multitude of options for schema validation like &lt;a href=&#34;https://zod.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;zod&lt;/a&gt;, &lt;a href=&#34;https://github.com/gcanti/io-ts&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;io-ts&lt;/a&gt;, &lt;a href=&#34;https://joi.dev/api/?v=17.6.0&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;joi&lt;/a&gt; etc. In this post we primarily focus on zod because IMHO it strikes a very good balance between a user friendly API, available features and being able to extract static types from schema definitions.&lt;/p&gt;
&lt;p&gt;Whiel ts-sql-query does not have json support built-in, it supports custom types through &lt;a href=&#34;https://ts-sql-query.readthedocs.io/en/stable/supported-operations/#type-adpaters&#34; target=&#34;_blank&#34; rel=&#34;noopener external nofollow noreferrer&#34;&gt;TypeAdapter&lt;/a&gt;. So for our jsonb columns we can write a TypeAdapter that utilizes zod to enforce that the data coming from and going to the database conforms to our expectations.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say we have a zod type ChapterMedatadata:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; z &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zod&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;topics&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;().&lt;span class=&#34;hljs-title function_&#34;&gt;array&lt;/span&gt;(),
&amp;#125;);

&lt;span class=&#34;hljs-comment&#34;&gt;// Extract static type&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadata&lt;/span&gt; = z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataSchema&lt;/span&gt;&amp;gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following would be a type adapter that validates the incoming and outgoing json through this type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;TypeAdapter&lt;/span&gt; &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ts-sql-query/TypeAdapter&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAdapter&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;TypeAdapter&lt;/span&gt; = &amp;#123;
    &lt;span class=&#34;hljs-title function_&#34;&gt;transformValueFromDB&lt;/span&gt;(
        &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;
    ): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;) &amp;#123;
            &lt;span class=&#34;hljs-comment&#34;&gt;// Our database adapter (postgres) is aware of jsonb and has already&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// parsed the JSON. So we don&amp;#x27;t need JSON.parse. However if the dabase&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// didn&amp;#x27;t have first class support for json type and&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// we were storing the JSON in a text field we would need to do a JSON.parse first&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// before calling ChapterMetadataSchema.parse&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value);
        &amp;#125;

        &lt;span class=&#34;hljs-comment&#34;&gt;// If type is not jsonb then gracefully fallback to the next adapter&lt;/span&gt;
        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; next.&lt;span class=&#34;hljs-title function_&#34;&gt;transformValueFromDB&lt;/span&gt;(value, &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;);
    &amp;#125;,

    &lt;span class=&#34;hljs-title function_&#34;&gt;transformValueToDB&lt;/span&gt;(
        &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;
    ): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;) &amp;#123;
            &lt;span class=&#34;hljs-comment&#34;&gt;// This is strictly not necessary because TS will ensure&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// that atleast the static type is enforced.&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// However it offers aditional safety if we have some refinements&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// or if there is possibility of values with any type creeping in.&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value);
        &amp;#125;

        &lt;span class=&#34;hljs-comment&#34;&gt;// If type is not jsonb gracefully fallback to the next adapter&lt;/span&gt;
        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; next.&lt;span class=&#34;hljs-title function_&#34;&gt;transformValueToDB&lt;/span&gt;(value, &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;);
    &amp;#125;,
&amp;#125;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have the adapter in place, we can use this in our table mapping:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title class_&#34;&gt;Table&lt;/span&gt; &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ts-sql-query/Table&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChaptersTable&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Table&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title class_&#34;&gt;DBConnection&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ChaptersTable&amp;quot;&lt;/span&gt;&amp;gt; &amp;#123;
    id = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;autogeneratedPrimaryKey&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;int&amp;quot;&lt;/span&gt;);
    metadata = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;optionalColumn&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadata&lt;/span&gt;&amp;gt;(
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;custom&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;,
        &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAdapter&lt;/span&gt;
    );

    &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;
        &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;chapters&amp;quot;&lt;/span&gt;);
    &amp;#125;
&amp;#125;

&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; tChapters = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChaptersTable&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now whenever we try to retrieve the data from database, the value for metadata column will be validated against our schema.&lt;/p&gt;
&lt;p&gt;And because we have passed the ChapterMetadata static type as a type parameter to the column, for operations performed in typescript codebase, we get static type safety as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;getConnection&lt;/span&gt;()
    .&lt;span class=&#34;hljs-title function_&#34;&gt;insertInto&lt;/span&gt;(tChapters)
    .&lt;span class=&#34;hljs-title function_&#34;&gt;set&lt;/span&gt;(&amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;metadata&lt;/span&gt;: &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;topic&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &amp;#125; &amp;#125;); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;-- Static type error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that whenever we are performing type validation of data coming from a long term storage, we need to be cautious with schema evolution.&lt;/p&gt;
&lt;p&gt;Tomorrow if we update the type and add backward incompatible changes (eg. new mandatory fields), then the rows containing past data can become inaccessible.&lt;/p&gt;
&lt;p&gt;So it is better to ensure that any schema change is additive, and new fields added are optional. It is also useful to perform two step transitions where in the transition duration the schema is compatible with both previous and new shape of data (at the cost of being more relaxed than is necessary).&lt;/p&gt;
&lt;p&gt;Lastly, the above type adapter assumes that the shape of data as stored in database matches the shape of the data that the application deals with.&lt;/p&gt;
&lt;p&gt;It can sometimes be desirable to store the data in a different format than what the application deals. This could be either to facilitate ease of indexing or compaction of storage on the db side, or to use more complex data structures than json-compatible objects and arrays on the application side.&lt;/p&gt;
&lt;p&gt;While zod does not support codecs like some other libraries like io-ts, it is possible to use two different (mutually compatible) types in transformValueToDB and transformValueFromDB to convert between the two representations.&lt;/p&gt;
&lt;p&gt;A simple example of two such types can be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; z &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zod&amp;quot;&lt;/span&gt;;

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataDBToAppSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;topics&lt;/span&gt;: z
        .&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()
        .&lt;span class=&#34;hljs-title function_&#34;&gt;array&lt;/span&gt;()
        .&lt;span class=&#34;hljs-title function_&#34;&gt;transform&lt;/span&gt;(
            &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;it&lt;/span&gt;) =&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;hljs-comment&#34;&gt;// Convert the JSON array to a Set&lt;/span&gt;
                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Set&lt;/span&gt;(it)
        ),
    &lt;span class=&#34;hljs-attr&#34;&gt;relevanceScores&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;record&lt;/span&gt;(z.&lt;span class=&#34;hljs-title function_&#34;&gt;number&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;transform&lt;/span&gt;(
        &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;it&lt;/span&gt;) =&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;hljs-comment&#34;&gt;// Convert the JSON object to a Map&lt;/span&gt;
            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Map&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;entries&lt;/span&gt;(it))
    ),
&amp;#125;);

&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAppToDBSchema&lt;/span&gt; = z.&lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&amp;#123;
    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(),
    &lt;span class=&#34;hljs-attr&#34;&gt;topics&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;set&lt;/span&gt;(z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;transform&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;it&lt;/span&gt;) =&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;// Convert set to array&lt;/span&gt;
        [...it]
    ),
    &lt;span class=&#34;hljs-attr&#34;&gt;relevanceScores&lt;/span&gt;: z.&lt;span class=&#34;hljs-title function_&#34;&gt;map&lt;/span&gt;(z.&lt;span class=&#34;hljs-title function_&#34;&gt;string&lt;/span&gt;(), z.&lt;span class=&#34;hljs-title function_&#34;&gt;number&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;transform&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;it&lt;/span&gt;) =&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;hljs-comment&#34;&gt;// Convert Map to object&lt;/span&gt;
        &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;fromEntries&lt;/span&gt;(it.&lt;span class=&#34;hljs-title function_&#34;&gt;entries&lt;/span&gt;())
    ),
&amp;#125;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can change our adapter to use these two separate types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAdapter&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;TypeAdapter&lt;/span&gt; = &amp;#123;
    &lt;span class=&#34;hljs-title function_&#34;&gt;transformValueFromDB&lt;/span&gt;(
        &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;
    ): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;) &amp;#123;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataDBToAppSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value);
        &amp;#125;
        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; next.&lt;span class=&#34;hljs-title function_&#34;&gt;transformValueFromDB&lt;/span&gt;(value, &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;);
    &amp;#125;,

    &lt;span class=&#34;hljs-title function_&#34;&gt;transformValueToDB&lt;/span&gt;(
        &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,
        &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;DefaultTypeAdapter&lt;/span&gt;
    ): &lt;span class=&#34;hljs-built_in&#34;&gt;unknown&lt;/span&gt; &amp;#123;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jsonb&amp;quot;&lt;/span&gt;) &amp;#123;
            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAppToDBSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value);
        &amp;#125;
        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; next.&lt;span class=&#34;hljs-title function_&#34;&gt;transformValueToDB&lt;/span&gt;(value, &lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt;);
    &amp;#125;,
&amp;#125;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to make sure that these two types are always mutually compatible ie. for any valid values&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAppToDBSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataDBToAppSchema&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(value));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;succeeds, and vice versa.&lt;/p&gt;
&lt;p&gt;We can use unit tests to ensure that, and we can also add witness types to validate the compatibility of corresponding static types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs ts&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Type that enforces that U is assignable to T&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ExtendsWitness&lt;/span&gt;&amp;lt;U &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; T, T&amp;gt; = U;

&lt;span class=&#34;hljs-comment&#34;&gt;// If the Input type of ChapterMetadataAppToDBSchema is not compatbile with&lt;/span&gt;
&lt;span class=&#34;hljs-comment&#34;&gt;// output type of ChapterMetadataDBToAppSchema following witness will have a type error&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; _ChapterMetadataWitness1 = &lt;span class=&#34;hljs-title class_&#34;&gt;ExtendsWitness&lt;/span&gt;&amp;lt;
    z.&lt;span class=&#34;hljs-property&#34;&gt;TypeOf&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataDBToAppSchema&lt;/span&gt;&amp;gt;,
    &lt;span class=&#34;hljs-comment&#34;&gt;// Extract input type from ChapterMetadataAppToDBSchema&lt;/span&gt;
    &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChapterMetadataAppToDBSchema&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; z.&lt;span class=&#34;hljs-property&#34;&gt;ZodType&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;any&lt;/span&gt;, infer &lt;span class=&#34;hljs-title class_&#34;&gt;TIn&lt;/span&gt;&amp;gt;
        ? &lt;span class=&#34;hljs-title class_&#34;&gt;TIn&lt;/span&gt;
        : &lt;span class=&#34;hljs-built_in&#34;&gt;never&lt;/span&gt;
&amp;gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and similarly the other way round.&lt;/p&gt;
</content>
        <category term="typescript" />
        <category term="zod" />
        <category term="ts-sql-query" />
        <updated>2022-06-18T00:00:00.000Z</updated>
    </entry>
</feed>
