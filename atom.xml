<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Icicles of Thought</title>
  
  <subtitle>Notes on Software Craftsmanship, Web Development &amp; Distributed Systems</subtitle>
  <link href="https://lorefnon.me/atom.xml" rel="self"/>
  
  <link href="https://lorefnon.me/"/>
  <updated>2023-08-27T07:24:55.952Z</updated>
  <id>https://lorefnon.me/</id>
  
  <author>
    <name>Lorefnon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Conditional Queries in Postgres with help from JSON Operators</title>
    <link href="https://lorefnon.me/Conditional-Queries-in-Postgres-with-help-from-JSON-Operators/"/>
    <id>https://lorefnon.me/Conditional-Queries-in-Postgres-with-help-from-JSON-Operators/</id>
    <published>2023-08-27T05:46:20.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>For many mainstream languages we have query builder libraries that enable us to easily create <code>select</code> queries with complex <code>where</code> conditions that conditionally filter by multiple columns based on incoming input. These are often useful for things like a filter panel in product catalogue where user may specify one or more of several possible criteria.</p><p>This post outlines an alternative solution. If we structure our input parameter as json (or any other compound data type for that matter), we can handle the conditional clauses within SQL with some creativity.</p><p>For example, to find users by id or email, we can do something like this: </p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> &quot;user&quot; u <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> user_email ue     <span class="hljs-keyword">on</span> ue.user_id <span class="hljs-operator">=</span> u.id<span class="hljs-keyword">where</span>     (        <span class="hljs-comment">-- Filter conditions</span>        ($<span class="hljs-number">1</span>::jsonb #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> u.id <span class="hljs-operator">=</span> ($<span class="hljs-number">1</span>::jsonb #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span>)::<span class="hljs-type">bigint</span> ) <span class="hljs-keyword">or</span>        ($<span class="hljs-number">1</span>::jsonb #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> ue.email <span class="hljs-operator">=</span> ($<span class="hljs-number">1</span>::jsonb #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span>))    ) <span class="hljs-keyword">and</span>    <span class="hljs-comment">-- Fallback to ensure that nothing is selected if no filters are passed</span>    ($<span class="hljs-number">1</span>::jsonb #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> $<span class="hljs-number">1</span>::jsonb #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>)</code></pre><p>We can pass input parameters like: <code>&#123; &quot;id&quot;: &#123; &quot;eq&quot;: 1 &#125; &#125;</code> or <code>&#123; &quot;email&quot;: &#123; &quot;eq&quot;: &quot;lorefnon@tutanota.com&quot; &#125; &#125;</code> and it will filter appropriately.</p><p>We can skip the jsonb cast if our client library allows us to cast parameters while passing to database</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> &quot;user&quot; u <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> user_email ue     <span class="hljs-keyword">on</span> ue.user_id <span class="hljs-operator">=</span> u.id<span class="hljs-keyword">where</span>     (        <span class="hljs-comment">-- Filter conditions</span>        (($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> u.id <span class="hljs-operator">=</span> ($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span>)::<span class="hljs-type">bigint</span> ) <span class="hljs-keyword">or</span>        (($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> ue.email <span class="hljs-operator">=</span> ($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span>))    ) <span class="hljs-keyword">and</span>    <span class="hljs-comment">-- Fallback to ensure that nothing is selected if no filters are passed</span>    ($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> $<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>)</code></pre><p>While this is arguably more verbose and less readable (due to the use of non-intuitive json operators), there are a few benefits to this approach.</p><p>One is that we don&#39;t need a complex query builder library, which may be a plus if we are working with a niche language and&#x2F;or a restricted runtime like openresty. </p><p>Other is that this approach pairs well with prepared statements and the query can be parsed and analyzed just once - if we use a query builder to create slightly differing SELECT statements for various use cases, they would need to be parsed separately each time. Of course, we are trading off per-execution query parsing with per-execution json parsing, but if our json is not very complex, the parsing overhead is lower.</p><p>One apparent limitation is that we can not perform conditional joins. However, that can often be alleviated with usage of unions:</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> &quot;user&quot; u<span class="hljs-keyword">where</span>     ($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> u.id <span class="hljs-operator">=</span> ($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span>)::<span class="hljs-type">bigint</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> u.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> &quot;user&quot; u<span class="hljs-keyword">join</span> user_email ue    <span class="hljs-keyword">on</span> ue.user_id <span class="hljs-operator">=</span> u.id<span class="hljs-keyword">where</span>    ($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> ue.email <span class="hljs-operator">=</span> ($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email, eq&#125;&#x27;</span>)</code></pre><p>or, by building up subselections for individual filters in CTE steps and then combining them in the final select:</p><pre><code class="hljs sql"><span class="hljs-comment">-- CTE Steps for each possible criteria</span><span class="hljs-keyword">with</span> user_fby_email <span class="hljs-keyword">as</span> (    <span class="hljs-keyword">select</span> ue.user_id     <span class="hljs-keyword">from</span> user_email ue    <span class="hljs-keyword">where</span> ($<span class="hljs-number">1</span>::json #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> ue.email <span class="hljs-operator">=</span> ($<span class="hljs-number">1</span>::json #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;email,eq&#125;&#x27;</span>))<span class="hljs-comment">-- Directly handle the criteria for user table (for which an additional subquery is unnecessary)</span><span class="hljs-keyword">select</span> u.<span class="hljs-operator">*</span><span class="hljs-keyword">from</span> &quot;user&quot; u<span class="hljs-keyword">where</span> (($<span class="hljs-number">1</span> #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">and</span> u.id <span class="hljs-operator">=</span> ($<span class="hljs-number">1</span>::jsonb #<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-string">&#x27;&#123;id,eq&#125;&#x27;</span>)::<span class="hljs-type">bigint</span> ))<span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><span class="hljs-comment">-- Merge users for each criteria</span><span class="hljs-keyword">select</span> u.<span class="hljs-operator">*</span><span class="hljs-keyword">from</span> &quot;user&quot; u<span class="hljs-keyword">where</span> u.id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> user_id <span class="hljs-keyword">from</span> user_fby_email)</code></pre><p>The latter tends to be more readable when there are many possible filter criteria.</p><p>When using multiple tables, these approaches are likely to enable better index utilization.</p><p>We do need to analyze EXPLAIN queries with all possible combinations of inputs to ensure that indexes are properly utilized - but that is something we would have needed when using query builders or ORMs too.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;For many mainstream languages we have query builder libraries that enable us to easily create &lt;code&gt;select&lt;/code&gt; queries with complex &lt;c</summary>
      
    
    
    
    
    <category term="Postgres" scheme="https://lorefnon.me/tags/Postgres/"/>
    
    <category term="JSON" scheme="https://lorefnon.me/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Using Vector to funnel Docker Compose logs to S3</title>
    <link href="https://lorefnon.me/Using-Vector-to-funnel-Docker-Compose-logs-to-S3/"/>
    <id>https://lorefnon.me/Using-Vector-to-funnel-Docker-Compose-logs-to-S3/</id>
    <published>2023-08-20T07:14:55.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener external nofollow noreferrer">Docker compose</a> is an easy-to-use utility for running multi-container applications. It is particularly suited for development and local testing, but is also useful for production development of low-traffic&#x2F;personal-use application which neither need a full fledged cluster nor features like auto-scaling&#x2F;failover-handling which come with more advanced container orchestration solutions.</p><p>This post is a quick recipe to funnel docker compose logs to AWS S3 for long term archival.</p><p>The utility we use for shipping the logs is <a href="https://vector.dev/guides/" target="_blank" rel="noopener external nofollow noreferrer">Vector</a>. Vector is a full featured observability pipeline solution which supports not just shipping but also aggregating and transforming logs. However, in this post we just use it to ship logs to a bucket so that we can analyse them later if needed. Being a rust-based native utility, it has a very low footprint and is well suited to single server or homelab deployments.</p><p>In <code>docker-compose.yaml</code>:</p><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.9&quot;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">vector:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">timberio/vector:0.31.0-debian</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">vector</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">vector</span>    <span class="hljs-attr">environment:</span>       <span class="hljs-bullet">-</span> <span class="hljs-string">DOCKER_HOST=&quot;unix:///var/run/docker.sock&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">AWS_ACCESS_KEY_ID</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">AWS_SECRET_ACCESS_KEY</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">AWS_REGION</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8383:8383&#x27;</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./vector-setup/vector.yaml:/etc/vector/vector.yaml:ro</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock:ro</span>    <span class="hljs-attr">command:</span> <span class="hljs-string">--config</span> <span class="hljs-string">/etc/vector/vector.yaml</span>  <span class="hljs-comment"># Add any other services:</span>  <span class="hljs-attr">caddy:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">caddy:latest</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./modules/caddy-setup/tmp/config:/config</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./modules/caddy-setup/tmp/data:/data</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./modules/caddy-setup/Caddyfile:/etc/caddy/Caddyfile</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span></code></pre><p>Since vector needs to communicate with the docker daemon we need to mount the docker socket and make it available to the vector container.</p><p>In the vector.yaml config, we can specify which bucket we want to funnel our logs to and which services we want to track:</p><pre><code class="hljs yaml"><span class="hljs-attr">data_dir:</span> <span class="hljs-string">/var/lib/vector</span><span class="hljs-attr">sources:</span>  <span class="hljs-attr">docker_logs_source:</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">docker_logs</span>    <span class="hljs-attr">docker_host:</span> <span class="hljs-string">&quot;unix:///var/run/docker.sock&quot;</span><span class="hljs-attr">sinks:</span>  <span class="hljs-attr">s3_sink:</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">aws_s3</span>    <span class="hljs-attr">inputs:</span> [<span class="hljs-string">docker_logs_source</span>]    <span class="hljs-attr">region:</span> <span class="hljs-string">ap-south-1</span>    <span class="hljs-attr">bucket:</span> <span class="hljs-string">my-service-logs</span>    <span class="hljs-attr">key_prefix:</span> <span class="hljs-string">&quot;container-logs/date=%Y-%m-%d&quot;</span>    <span class="hljs-attr">compression:</span> <span class="hljs-string">gzip</span>    <span class="hljs-attr">encoding:</span>      <span class="hljs-attr">codec:</span> <span class="hljs-string">json</span></code></pre><p>And that is all we need. Once we run <code>docker compose up</code>, after a while we should see our logs getting dumped into the S3 bucket.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/compose/&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;Docker compose&lt;/a&gt; is an easy-to-u</summary>
      
    
    
    
    
    <category term="AWS" scheme="https://lorefnon.me/tags/AWS/"/>
    
    <category term="Docker" scheme="https://lorefnon.me/tags/Docker/"/>
    
    <category term="Docker-Compose" scheme="https://lorefnon.me/tags/Docker-Compose/"/>
    
    <category term="Vector" scheme="https://lorefnon.me/tags/Vector/"/>
    
    <category term="S3" scheme="https://lorefnon.me/tags/S3/"/>
    
  </entry>
  
  <entry>
    <title>integrating CtrlP with Nvimtree in lunarvim</title>
    <link href="https://lorefnon.me/integrating-ctrlp-with-lvim-nvimtree/"/>
    <id>https://lorefnon.me/integrating-ctrlp-with-lvim-nvimtree/</id>
    <published>2023-08-20T06:53:01.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.lunarvim.org/" target="_blank" rel="noopener external nofollow noreferrer">Lunarvim</a> comes preconfigured with <a href="https://github.com/nvim-tree/nvim-tree.lua" target="_blank" rel="noopener external nofollow noreferrer">Nvimtree</a> - a nice directory tree browser which is also extensible through lua.</p><p>This is a quick recipe to integrate it with <a href="https://ctrlpvim.github.io/ctrlp.vim/" target="_blank" rel="noopener external nofollow noreferrer">CtrlP</a> - my preferred file finder for vim.</p><p>In <code>~/.config/lvim/lua/treeutils.lua</code>:</p><pre><code class="hljs lua"><span class="hljs-keyword">local</span> api = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nvim-tree.api&quot;</span>)<span class="hljs-keyword">local</span> M = &#123;&#125;<span class="hljs-comment">-- Launch CtrlP from selected tree node</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.launch_ctrlp</span><span class="hljs-params">()</span></span>    <span class="hljs-keyword">local</span> node = api.tree.get_node_under_cursor()    <span class="hljs-keyword">local</span> is_folder = node.fs_stat <span class="hljs-keyword">and</span> node.fs_stat.<span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;directory&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">false</span>    <span class="hljs-keyword">local</span> basedir = is_folder <span class="hljs-keyword">and</span> node.absolute_path <span class="hljs-keyword">or</span> vim.fn.fnamemodify(node.absolute_path, <span class="hljs-string">&quot;:h&quot;</span>)    vim.cmd(<span class="hljs-string">&quot;CtrlP &quot;</span> .. basedir)<span class="hljs-keyword">end</span><span class="hljs-keyword">return</span> M</code></pre><p>In <code>~/.config/lvim/config.lua</code>:</p><pre><code class="hljs lua">lvim.builtin.nvimtree.setup.on_attach = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(bufnr)</span></span>    <span class="hljs-keyword">local</span> api       = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;nvim-tree.api&quot;</span>    <span class="hljs-keyword">local</span> treeutils = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;treeutils&quot;</span>    <span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">opts</span><span class="hljs-params">(desc)</span></span>        <span class="hljs-keyword">return</span> &#123; desc = <span class="hljs-string">&quot;nvim-tree: &quot;</span> .. desc, buffer = bufnr, noremap = <span class="hljs-literal">true</span>, silent = <span class="hljs-literal">true</span>, nowait = <span class="hljs-literal">true</span> &#125;    <span class="hljs-keyword">end</span>    api.<span class="hljs-built_in">config</span>.mappings.default_on_attach(bufnr)    <span class="hljs-keyword">local</span> useful_keys = &#123;        [<span class="hljs-string">&quot;&lt;C-p&gt;&quot;</span>] = &#123; treeutils.launch_ctrlp, opts <span class="hljs-string">&quot;Launch CtrlP&quot;</span> &#125;,        <span class="hljs-comment">-- Other useful keybindings - cherry pick</span>        [<span class="hljs-string">&quot;l&quot;</span>] = &#123; api.node.<span class="hljs-built_in">open</span>.edit, opts <span class="hljs-string">&quot;Open&quot;</span> &#125;,        [<span class="hljs-string">&quot;o&quot;</span>] = &#123; api.node.<span class="hljs-built_in">open</span>.edit, opts <span class="hljs-string">&quot;Open&quot;</span> &#125;,        [<span class="hljs-string">&quot;&lt;CR&gt;&quot;</span>] = &#123; api.node.<span class="hljs-built_in">open</span>.edit, opts <span class="hljs-string">&quot;Open&quot;</span> &#125;,        [<span class="hljs-string">&quot;v&quot;</span>] = &#123; api.node.<span class="hljs-built_in">open</span>.vertical, opts <span class="hljs-string">&quot;Open: Vertical Split&quot;</span> &#125;,        [<span class="hljs-string">&quot;h&quot;</span>] = &#123; api.node.navigate.parent_close, opts <span class="hljs-string">&quot;Close Directory&quot;</span> &#125;,        [<span class="hljs-string">&quot;C&quot;</span>] = &#123; api.tree.change_root_to_node, opts <span class="hljs-string">&quot;CD&quot;</span> &#125;,    &#125;    <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;lvim.keymappings&quot;</span>).load_mode(<span class="hljs-string">&quot;n&quot;</span>, useful_keys)<span class="hljs-keyword">end</span></code></pre><p>Now, whenever we do a <code>ctrl+p</code> with our cursor on a directory node, we&#39;ll get a file selector scoped to that directory.</p><p><img src="/images/2023-08-20-nvim-ctrlp-screenshot.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.lunarvim.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;Lunarvim&lt;/a&gt; comes preconfigured with &lt;a </summary>
      
    
    
    
    
    <category term="Vim" scheme="https://lorefnon.me/tags/Vim/"/>
    
    <category term="Neovim" scheme="https://lorefnon.me/tags/Neovim/"/>
    
    <category term="CtrlP" scheme="https://lorefnon.me/tags/CtrlP/"/>
    
    <category term="Neotree" scheme="https://lorefnon.me/tags/Neotree/"/>
    
  </entry>
  
  <entry>
    <title>Running an arbitrary main class as a Gradle task using the kotlin DSL</title>
    <link href="https://lorefnon.me/gradle-kotlin-dsl-running-main-class/"/>
    <id>https://lorefnon.me/gradle-kotlin-dsl-running-main-class/</id>
    <published>2023-01-28T18:30:00.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>This post is a simple recipe illustrating how we can run an arbitrary main class as a gradle task through the <a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html" target="_blank" rel="noopener external nofollow noreferrer">Gradle JavaExec utility</a>. Because we love kotlin, both our gradle configuration and main class are written in kotlin.</p><pre><code class="hljs kt"><span class="hljs-comment">// build.gradle.kts</span>tasks.register&lt;JavaExec&gt;(<span class="hljs-string">&quot;sampleTask&quot;</span>) &#123;    mainClass.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;com.example.util.SampleTaskKt&quot;</span>)    classpath = sourceSets[<span class="hljs-string">&quot;main&quot;</span>].runtimeClasspath&#125;</code></pre><pre><code class="hljs kt"><span class="hljs-comment">// src/main/kotlin/com/example/util/sampleTask.kt</span><span class="hljs-keyword">package</span> com.example.util<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;    print(<span class="hljs-string">&quot;hello world&quot;</span>)&#125;</code></pre><p>Now if you run <code>./gradlew sampleTask</code> in cli (or use your IDE&#39;s gradle panel to execute it) you should see &quot;hello world&quot; printed in the console.</p><p>Gradle&#39;s JavaExec is quite handy for one off project specific tasks for which you don&#39;t want to implement a dedicated plugin.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This post is a simple recipe illustrating how we can run an arbitrary main class as a gradle task through the &lt;a href=&quot;https://docs.gradl</summary>
      
    
    
    
    
    <category term="Kotlin" scheme="https://lorefnon.me/tags/Kotlin/"/>
    
    <category term="Gradle" scheme="https://lorefnon.me/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Snapshot testing with node test runner (node:test)</title>
    <link href="https://lorefnon.me/snapshot-testing-with-node-test-runner/"/>
    <id>https://lorefnon.me/snapshot-testing-with-node-test-runner/</id>
    <published>2023-01-24T18:30:00.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>While there are a lot of popular test runners in node.js ecosystem, like jest, mocha etc. node has recently introduced a built in test runner available as <code>test</code> package in the standard library. The <a href="https://nodejs.org/api/test.html" target="_blank" rel="noopener external nofollow noreferrer">official documentation</a> describe the usage, and it should look familiar to people coming from most popular testing libraries.</p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; describe, it &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:test&quot;</span>;<span class="hljs-keyword">import</span> assert <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:assert&quot;</span><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;A thing&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;should work&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    assert.<span class="hljs-title function_">strictEqual</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);  &#125;);&#125;);</code></pre><p>However, one aspect that it does not handle currently is snapshot testing. </p><p>As popularised by <a href="https://jestjs.io/" target="_blank" rel="noopener external nofollow noreferrer">Jest</a>, snapshot testing is a convenient mechanism to ensure that certain computed values don&#39;t change across test runs by storing the result on first run and comparing with the stored value in subsequent runs. <a href="https://jestjs.io/docs/snapshot-testing" target="_blank" rel="noopener external nofollow noreferrer">Jest docs</a> explain the concept in more detail.</p><p>Fortuantely, using the library  <a href="https://www.npmjs.com/package/snap-shot-core" target="_blank" rel="noopener external nofollow noreferrer">snap-shot-core</a> we can easily integrate snapshot testing with <code>node:test</code> without needing to switch to another testing library.</p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Snap</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;snap-shot-core&quot;</span><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;User insertion&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;inserts new row&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;        <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">createUser</span>(&#123;            <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;janedoe@example.com&#x27;</span>        &#125;)        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">findByEmail</span>(<span class="hljs-string">&#x27;janedoe@example.com&#x27;</span>)        <span class="hljs-title class_">Snap</span>.<span class="hljs-title function_">core</span>(&#123;            <span class="hljs-attr">what</span>: user,            <span class="hljs-attr">file</span>: __filename,            <span class="hljs-attr">specName</span>: <span class="hljs-string">&#x27;inserts new row&#x27;</span>        &#125;)    &#125;)&#125;)</code></pre><p>This will write a snapshot file if not present, or validate against once if present. </p><p>Note that one caveat here is that, being a standalone library we needed to explicitly specify the specName.</p><p>If using the <code>test</code> function from <code>node:test</code>, we have access to the test name through <code>testContext.name</code>, which we can pass to this lib. </p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Snap</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;snap-shot-core&quot;</span><span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;user insertion&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">testCtx</span>) =&gt;</span> &#123;    <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">createUser</span>(&#123;        <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;janedoe@example.com&#x27;</span>    &#125;)    <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">findByEmail</span>(<span class="hljs-string">&#x27;janedoe@example.com&#x27;</span>)    <span class="hljs-title class_">Snap</span>.<span class="hljs-title function_">core</span>(&#123;        <span class="hljs-attr">what</span>: user,        <span class="hljs-attr">file</span>: __filename,        <span class="hljs-attr">specName</span>: testCtx.<span class="hljs-property">name</span>    &#125;)&#125;)</code></pre><p>However, for BDD style tests, we don&#39;t have the test context injected. One convenient solution to prevent the spec names from getting out of sync is to use named functions. </p><pre><code class="hljs ts"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;User insertion&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-title function_">it</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">insertsNewRow</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// &lt;-- Spec name inferred from function name</span>        <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">createUser</span>(&#123;            <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;janedoe@example.com&#x27;</span>        &#125;)        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">findByEmail</span>(<span class="hljs-string">&#x27;janedoe@example.com&#x27;</span>)        <span class="hljs-title class_">Snap</span>.<span class="hljs-title function_">core</span>(&#123;            <span class="hljs-attr">what</span>: user,            <span class="hljs-attr">file</span>: __filename,            <span class="hljs-attr">specName</span>: insertsNewRow.<span class="hljs-property">name</span>        &#125;)    &#125;)&#125;)</code></pre><p>Lastly, if our test files are ES modules, we won&#39;t have access to <code>__filename</code>. We can instead use the <code>fileURLToPath</code> utility.</p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Snap</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;snap-shot-core&quot;</span><span class="hljs-keyword">import</span> &#123; fileURLToPath &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;url&#x27;</span><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;User insertion&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-title function_">it</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">insertsNewRow</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">createUser</span>(&#123;            <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;janedoe@example.com&#x27;</span>        &#125;)        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">findByEmail</span>(<span class="hljs-string">&#x27;janedoe@example.com&#x27;</span>)        <span class="hljs-title class_">Snap</span>.<span class="hljs-title function_">core</span>(&#123;            <span class="hljs-attr">what</span>: user,            <span class="hljs-attr">file</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>),            <span class="hljs-attr">specName</span>: insertsNewRow.<span class="hljs-property">name</span>        &#125;)    &#125;)&#125;)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;While there are a lot of popular test runners in node.js ecosystem, like jest, mocha etc. node has recently introduced a built in test ru</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://lorefnon.me/tags/Javascript/"/>
    
    <category term="Node.js" scheme="https://lorefnon.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Auto-transforming modules to mjs using babel</title>
    <link href="https://lorefnon.me/auto-transforming-modules-to-mjs-node/"/>
    <id>https://lorefnon.me/auto-transforming-modules-to-mjs-node/</id>
    <published>2022-12-12T18:30:00.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>The unfortunate reality of being a js library author in present day world is that we need to deal with multiple module systems and bundlers, which make life hard. </p><p>While commonjs usage is declining, many users are yet to move to esm fully.</p><p>Solutions like tsup provide a nice DX for deploying libraries by bundling separately to an artifact of each configured module type. </p><p>However, for nodejs libraries I often prefer to not bundle my libraries, and thankfully babel ecosystem makes it easy to handle these scenarios.</p><p>This post outlines a simple babel setup where: </p><ol><li><p>We author code without needing explicit extensions in import: </p> <pre><code class="hljs ts"><span class="hljs-comment">// bar.ts</span><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./foo&quot;</span></code></pre></li><li><p>As part of build, we generate <code>.mjs</code> modules where the relative imports are also transformed to use <code>.mjs</code>:</p> <pre><code class="hljs ts"><span class="hljs-comment">// bar.mjs</span><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./foo.mjs&quot;</span></code></pre></li></ol><p>Benefit of this setup is that the generated .mjs modules can co-exist alongside .cjs modules.</p><p>Consumers of the module can either explicitly import with mjs extension (eg. <code>import &#123; foo &#125; from &quot;foo-lib/foo.mjs&quot;</code>) or configure their bundler&#x2F;runtime to default to mjs if they prefer mjs.</p><p>Note that this setup does not fully emulate node-specific module resolution. For example: <code>import &#123; foo &#125; from &quot;./foo&quot;</code> will not be auto-resolved to <code>import &#123; foo &#125; from &quot;./foo/index.js&quot;</code> if foo is directory.</p><p>Babel config: </p><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;    <span class="hljs-attr">presets</span>: [        <span class="hljs-string">&#x27;@babel/preset-typescript&#x27;</span>,        [<span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>, &#123;            <span class="hljs-attr">targets</span>: &#123;                <span class="hljs-attr">node</span>: <span class="hljs-number">16</span>            &#125;,            <span class="hljs-attr">modules</span>: <span class="hljs-literal">false</span>        &#125;]    ],    <span class="hljs-attr">plugins</span>: [        [<span class="hljs-string">&#x27;babel-plugin-replace-import-extension&#x27;</span>, &#123;            <span class="hljs-attr">extMapping</span>: &#123;                <span class="hljs-string">&#x27;&#x27;</span>: <span class="hljs-string">&#x27;.mjs&#x27;</span>            &#125;        &#125;]    ]&#125;</code></pre><pre><code class="hljs sh">babel src \    --config-file ./babel.esm.config.js \    --out-dir dist \    --out-file-extension <span class="hljs-string">&quot;.mjs&quot;</span> \    --extensions <span class="hljs-string">&quot;.ts&quot;</span> \    --ignore <span class="hljs-string">&quot;**/*.d.ts&quot;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The unfortunate reality of being a js library author in present day world is that we need to deal with multiple module systems and bundle</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://lorefnon.me/tags/Javascript/"/>
    
    <category term="Babel" scheme="https://lorefnon.me/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>Being explicit about implementing interfaces in Golang</title>
    <link href="https://lorefnon.me/being-explicit-about-implementing-interfaces-in-golang/"/>
    <id>https://lorefnon.me/being-explicit-about-implementing-interfaces-in-golang/</id>
    <published>2022-12-05T18:30:00.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>Go embraces structural typing, so struct types don&#39;t need to explicitly implement interfaces in order to be used a concrete instance of the interface. This offers more flexibility over nominative typing (as in Java, C# etc.) esp. when integrating libraries that are unaware of each other. </p><p>However, unlike typescript etc. go also does not offer a way to explicitly declare that a struct type is <strong>intended</strong> to satisfy an interface. </p><p>The result of this is that if someone later refactors a method of the struct such that it no longer implements the interface it used to before, then a type error is not immediately visible in the same file. Rather the location of error is the use site where an instance of the interface is expected. This is more problematic if such a use site does not even exist in the current repo.</p><p>I found this to be a periodic annoyance when implementing gRPC API specs where the service structs are always intended to implement the interfaces generated from the API spec, and any breakage should be immediately noticed and preferrably identified close to the service implementation.</p><p>Fortunately, the solution is pretty simple: just add a struct method that returns an instance of the interface. </p><pre><code class="hljs go"><span class="hljs-keyword">type</span> UserQueryService <span class="hljs-keyword">struct</span> &#123;    <span class="hljs-comment">// Members omitted</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *UserQueryService)</span></span> ASUserQueryServiceHandler() pbconnect.UserQueryServiceHandler &#123;<span class="hljs-keyword">return</span> s&#125;</code></pre><p>Now if we introduce any error that makes UserQueryService incompatible with <code>pbconnect.UserQueryServiceHandler</code> interface, a compile time error will be reported in the above method.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Go embraces structural typing, so struct types don&amp;#39;t need to explicitly implement interfaces in order to be used a concrete instance </summary>
      
    
    
    
    
    <category term="Go" scheme="https://lorefnon.me/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Using CDK to configure cloudfront as non-caching reverse proxy for API backend</title>
    <link href="https://lorefnon.me/configuring-cloudfront-as-non-caching-reverse-proxy-for-api-backend/"/>
    <id>https://lorefnon.me/configuring-cloudfront-as-non-caching-reverse-proxy-for-api-backend/</id>
    <published>2022-12-05T18:30:00.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>Cloudfront is primarily a CDN, but it is often also convenient to use it as reverse proxy for a backend service. This is especially convenient when the entire frontend SPA (including HTML) is already hosted from Cloudfront and we don&#39;t want to support CORS in our backend API that this frontend talks to.</p><p>Reusing Cloudfront as a reverse proxy in such cases ensures that both our frontend and backend can be available from the same domain. However, in such case we must take special care to ensure that our backend responses do get unexpectedly cached by Cloudfront. This post outlines the CDK configuration to facilitate this.</p><p>A minimal Cloudfront setup for an SPA may look something like this: </p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cdk <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> s3 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib/aws-s3&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cf <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib/aws-cloudfront&quot;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FrontendStack</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">cdk.Stack</span> &#123;  publicAssetsS3Bucket = <span class="hljs-keyword">new</span> s3.<span class="hljs-title class_">Bucket</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;PublicAssetsS3Bucket&#x27;</span>, &#123;    <span class="hljs-attr">removalPolicy</span>: cdk.<span class="hljs-property">RemovalPolicy</span>.<span class="hljs-property">RETAIN</span>,    <span class="hljs-attr">publicReadAccess</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">websiteIndexDocument</span>: <span class="hljs-string">&quot;index.html&quot;</span>,    <span class="hljs-attr">versioned</span>: <span class="hljs-literal">false</span>,  &#125;)  s3Origin = <span class="hljs-keyword">new</span> origins.<span class="hljs-title function_">S3Origin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">publicAssetsS3Bucket</span>);  cfDistribution = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">Distribution</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;CFDistribution&#x27;</span>, &#123;    <span class="hljs-attr">defaultBehavior</span>: &#123;      <span class="hljs-attr">origin</span>: s3Origin,    &#125;,    <span class="hljs-comment">// Certificate and domain configuration omitted</span>  &#125;);&#125;</code></pre><p>Here our CF Distribution is backed by an S3 bucket.</p><p>Now, to support reverse proxying to an API we need an additional origin. While adding this origin, we will also want to configure additional policies to ensure that the responses from this origin do not get cached: </p><pre><code class="hljs ts">dist.<span class="hljs-title function_">addBehavior</span>(<span class="hljs-string">&quot;/api/*&quot;</span>, apiOrigin, &#123;    <span class="hljs-attr">responseHeadersPolicy</span>: cfAPIRespHeadersPolicy,    <span class="hljs-attr">allowedMethods</span>: cf.<span class="hljs-property">AllowedMethods</span>.<span class="hljs-property">ALLOW_ALL</span>,    <span class="hljs-attr">cachePolicy</span>: cfApiCachePolicy,    <span class="hljs-attr">originRequestPolicy</span>: cfApiOriginReqPolicy,&#125;);</code></pre><p>It is important to explicitly allow all methods because CF by default permits only GET &amp; HEAD requests, and other HTTP verbs will be rejected.</p><p>Let&#39;s next look at the associated policies: </p><p>Following Response headers policy primary hints browsers to not cache the API responses:</p><pre><code class="hljs ts">cfAPIRespHeadersPolicy = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">ResponseHeadersPolicy</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;CFAPIRespHeadersPolicy&quot;</span>, &#123;    <span class="hljs-attr">customHeadersBehavior</span>: &#123;      <span class="hljs-attr">customHeaders</span>: [        &#123;          <span class="hljs-attr">header</span>: <span class="hljs-string">&quot;Cache-Control&quot;</span>,          <span class="hljs-attr">override</span>: <span class="hljs-literal">true</span>,          <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,        &#125;,      ],    &#125;,&#125;);</code></pre><p>The Cache policy will ensure that cloudfront itself does not cache the responses from our API backend: </p><pre><code class="hljs ts">cfApiCachePolicy = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">CachePolicy</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;ApiCachePolicy&quot;</span>, &#123;  <span class="hljs-attr">defaultTtl</span>: cdk.<span class="hljs-property">Duration</span>.<span class="hljs-title function_">seconds</span>(<span class="hljs-number">0</span>),  <span class="hljs-attr">maxTtl</span>: cdk.<span class="hljs-property">Duration</span>.<span class="hljs-title function_">seconds</span>(<span class="hljs-number">1</span>),  <span class="hljs-attr">queryStringBehavior</span>: cf.<span class="hljs-property">CacheQueryStringBehavior</span>.<span class="hljs-title function_">all</span>(),  <span class="hljs-attr">headerBehavior</span>: cf.<span class="hljs-property">CacheHeaderBehavior</span>.<span class="hljs-title function_">allowList</span>(<span class="hljs-string">&#x27;Authorization&#x27;</span>)&#125;);</code></pre><p>Note that we also need to explicitly allow the Authorization header otherwise it will be stripped by Cloudfront. </p><p>Currently there appears to be a bug which prevents us from being able to specify a header behavior if all the ttls are 0, so we keep the maxTtl as 1s.</p><p>Lastly, we need an OriginRequestPolicy that instructs Cloudfront to forward all query params &amp; cookies to the backend. In addition we can also specify any cloudfront specific headers here. In example below we add the <code>CloudFront-Viewer-Address</code> header which enables the backend to receive the actual IP of the user.</p><pre><code class="hljs ts">cfApiOriginReqPolicy = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">OriginRequestPolicy</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;ApiOriginReqPolicy&quot;</span>, &#123;    <span class="hljs-attr">originRequestPolicyName</span>: <span class="hljs-string">&quot;SampleApiOriginReqPolicy&quot;</span>,    <span class="hljs-attr">cookieBehavior</span>: cf.<span class="hljs-property">OriginRequestCookieBehavior</span>.<span class="hljs-title function_">all</span>(),    <span class="hljs-attr">headerBehavior</span>: cf.<span class="hljs-property">OriginRequestHeaderBehavior</span>.<span class="hljs-title function_">all</span>(      <span class="hljs-string">&quot;CloudFront-Viewer-Address&quot;</span>    ),    <span class="hljs-attr">queryStringBehavior</span>: cf.<span class="hljs-property">OriginRequestQueryStringBehavior</span>.<span class="hljs-title function_">all</span>(),&#125;);</code></pre><p>Our final integration looks like this:</p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cdk <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> s3 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib/aws-s3&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cf <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib/aws-cloudfront&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> origins <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib/aws-cloudfront-origins&quot;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FrontendStack</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">cdk.Stack</span> &#123;  publicAssetsS3Bucket = <span class="hljs-keyword">new</span> s3.<span class="hljs-title class_">Bucket</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;PublicAssetsS3Bucket&#x27;</span>, &#123;    <span class="hljs-attr">removalPolicy</span>: cdk.<span class="hljs-property">RemovalPolicy</span>.<span class="hljs-property">RETAIN</span>,    <span class="hljs-attr">publicReadAccess</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">websiteIndexDocument</span>: <span class="hljs-string">&quot;index.html&quot;</span>,    <span class="hljs-attr">versioned</span>: <span class="hljs-literal">false</span>,  &#125;)  cfApiCachePolicy = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">CachePolicy</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;ApiCachePolicy&quot;</span>, &#123;    <span class="hljs-attr">defaultTtl</span>: cdk.<span class="hljs-property">Duration</span>.<span class="hljs-title function_">seconds</span>(<span class="hljs-number">0</span>),    <span class="hljs-attr">maxTtl</span>: cdk.<span class="hljs-property">Duration</span>.<span class="hljs-title function_">seconds</span>(<span class="hljs-number">1</span>),    <span class="hljs-attr">queryStringBehavior</span>: cf.<span class="hljs-property">CacheQueryStringBehavior</span>.<span class="hljs-title function_">all</span>(),    <span class="hljs-attr">headerBehavior</span>: cf.<span class="hljs-property">CacheHeaderBehavior</span>.<span class="hljs-title function_">allowList</span>(<span class="hljs-string">&#x27;Authorization&#x27;</span>)  &#125;);  cfApiOriginReqPolicy = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">OriginRequestPolicy</span>(    <span class="hljs-variable language_">this</span>,    <span class="hljs-string">&quot;ApiOriginReqPolicy&quot;</span>,    &#123;      <span class="hljs-attr">originRequestPolicyName</span>: <span class="hljs-string">&quot;SampleApiOriginReqPolicy&quot;</span>,      <span class="hljs-attr">cookieBehavior</span>: cf.<span class="hljs-property">OriginRequestCookieBehavior</span>.<span class="hljs-title function_">all</span>(),      <span class="hljs-attr">headerBehavior</span>: cf.<span class="hljs-property">OriginRequestHeaderBehavior</span>.<span class="hljs-title function_">all</span>(        <span class="hljs-string">&quot;CloudFront-Viewer-Address&quot;</span>,        <span class="hljs-string">&quot;CloudFront-Viewer-Country&quot;</span>,        <span class="hljs-string">&quot;CloudFront-Viewer-City&quot;</span>,        <span class="hljs-string">&quot;CloudFront-Viewer-Country-Region&quot;</span>      ),      <span class="hljs-attr">queryStringBehavior</span>: cf.<span class="hljs-property">OriginRequestQueryStringBehavior</span>.<span class="hljs-title function_">all</span>(),    &#125;  );  s3Origin = <span class="hljs-keyword">new</span> origins.<span class="hljs-title function_">S3Origin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">publicAssetsS3Buckets</span>[idx]);  apiOrigin = <span class="hljs-keyword">new</span> origins.<span class="hljs-title class_">HttpOrigin</span>(serverHost!);    cfAPIRespHeadersPolicy = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">ResponseHeadersPolicy</span>(    <span class="hljs-variable language_">this</span>,    <span class="hljs-string">&quot;cfHTMLRespHeadersPolicy&quot;</span>,    &#123;      <span class="hljs-attr">customHeadersBehavior</span>: &#123;        <span class="hljs-attr">customHeaders</span>: [          &#123;            <span class="hljs-attr">header</span>: <span class="hljs-string">&quot;Cache-Control&quot;</span>,            <span class="hljs-attr">override</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,          &#125;,        ],      &#125;,    &#125;  );  configureCFDistribution = (): cf.<span class="hljs-property">Distribution</span> =&gt; &#123;      <span class="hljs-keyword">const</span> dist = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">Distribution</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;CFDistribution&#x27;</span>, &#123;        <span class="hljs-attr">defaultBehavior</span>: &#123;          <span class="hljs-attr">origin</span>: s3Origin,        &#125;,        <span class="hljs-comment">// Certificate and domain configuration omitted</span>      &#125;);      dist.<span class="hljs-title function_">addBehavior</span>(<span class="hljs-string">&quot;/api/*&quot;</span>, apiOrigin, &#123;        <span class="hljs-attr">responseHeadersPolicy</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfAPIRespHeadersPolicy</span>,        <span class="hljs-attr">allowedMethods</span>: cf.<span class="hljs-property">AllowedMethods</span>.<span class="hljs-property">ALLOW_ALL</span>,        <span class="hljs-attr">cachePolicy</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfApiCachePolicy</span>,        <span class="hljs-attr">originRequestPolicy</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfApiOriginReqPolicy</span>,      &#125;);      <span class="hljs-keyword">return</span> dist;  &#125;  cfDistribution = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">configureCFDistribution</span>()&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cloudfront is primarily a CDN, but it is often also convenient to use it as reverse proxy for a backend service. This is especially conve</summary>
      
    
    
    
    
    <category term="typescript" scheme="https://lorefnon.me/tags/typescript/"/>
    
    <category term="cloudfront" scheme="https://lorefnon.me/tags/cloudfront/"/>
    
    <category term="AWS" scheme="https://lorefnon.me/tags/AWS/"/>
    
    <category term="CDK" scheme="https://lorefnon.me/tags/CDK/"/>
    
  </entry>
  
  <entry>
    <title>Configuring cloudfront functions for SPA routing with CDK</title>
    <link href="https://lorefnon.me/configuring-cloudfront-functions-for-spa-routing-using-cdk/"/>
    <id>https://lorefnon.me/configuring-cloudfront-functions-for-spa-routing-using-cdk/</id>
    <published>2022-11-14T18:30:00.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p>When building <a href="https://en.wikipedia.org/wiki/Single-page_application" target="_blank" rel="noopener external nofollow noreferrer">single page applications</a>, it is convenient to serve the complete website including the HTML files from a CDN like AWS cloudfront. All the assets can then be potentially served from a location close to the user. This works particularly well for PWAs and dynamic client rendered websites. </p><p>It is also common to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API" target="_blank" rel="noopener external nofollow noreferrer">push based</a> routing in single page applications. However the first request would always go the server so we need to setup some server side routing as well to route these requests to an appropriate HTML file. In the simplest case we&#39;d route all incoming requests to our domain to a single index.html file, and the javascript referenced in the HTML file will take over once the browser renders it.</p><p>This is easily accomplished via <a href="https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html" target="_blank" rel="noopener external nofollow noreferrer">cloudfront functions</a>, which are a <a href="https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale/" target="_blank" rel="noopener external nofollow noreferrer">recently introduced</a> cost effective alternative to <a href="https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html" target="_blank" rel="noopener external nofollow noreferrer">lambda@edge</a>. </p><p>lambda@edge may be more suitable if you need to execute complex logic and need access to a more full-fledged execution environment like node.js (For example if you are doing server side rendering). However for simpler use cases like changing routes, adapting headers etc. cloudfront functions offer a simpler and more cost effective alternative.</p><p>Here is a simple function to route all requests which don&#39;t have an extension in the url to index.html: </p><pre><code class="hljs js"><span class="hljs-comment">// path-redir-rule.js</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params">event</span>) &#123;    <span class="hljs-keyword">var</span> request = event.<span class="hljs-property">request</span>    <span class="hljs-keyword">var</span> hasExtension = request.<span class="hljs-property">uri</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;.&#x27;</span>)    <span class="hljs-keyword">if</span> (!hasExtension) &#123;        request.<span class="hljs-property">uri</span> = <span class="hljs-string">&#x27;/app/index.html&#x27;</span>    &#125;    <span class="hljs-keyword">return</span> request;&#125;</code></pre><p>Because we love <a href="https://en.wikipedia.org/wiki/Infrastructure_as_code" target="_blank" rel="noopener external nofollow noreferrer">IaC</a>, we will use <a href="https://aws.amazon.com/cdk/" target="_blank" rel="noopener external nofollow noreferrer">CDK</a> to wire up our cloudfront. This post is not intended to be a good first intro to CDK, but here are a few if you are using it for first time: <a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-cdk-getting-started.html" target="_blank" rel="noopener external nofollow noreferrer">[1]</a>, <a href="https://dev.to/kevin_odongo35/getting-started-with-aws-cdk-2k19" target="_blank" rel="noopener external nofollow noreferrer">[2]</a>.</p><p>It should not surprise anyone that AWS CDK has good support for AWS Cloudfront. </p><p>Here is a simple stack that uses CDK with typescript to wire up a cloudfront stack backed by an S3 bucket. </p><pre><code class="hljs ts"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:path&quot;</span><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cdk <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> s3 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib/aws-s3&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cf <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib/aws-cloudfront&quot;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> origins <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;aws-cdk-lib/aws-cloudfront-origins&quot;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FrontendStack</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">cdk.Stack</span> &#123;  publicAssetsS3Bucket = <span class="hljs-keyword">new</span> s3.<span class="hljs-title class_">Bucket</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;PublicAssetsBucket&quot;</span>, &#123;    <span class="hljs-attr">removalPolicy</span>: cdk.<span class="hljs-property">RemovalPolicy</span>.<span class="hljs-property">RETAIN</span>,    <span class="hljs-attr">publicReadAccess</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">websiteIndexDocument</span>: <span class="hljs-string">&quot;index.html&quot;</span>,    <span class="hljs-attr">versioned</span>: <span class="hljs-literal">false</span>,  &#125;);  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfOrigin</span> = <span class="hljs-keyword">new</span> origins.<span class="hljs-title function_">S3Origin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">publicAssetsS3Bucket</span>);  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfDistribution</span> = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">Distribution</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;CFDistribution&quot;</span>, &#123;    <span class="hljs-attr">defaultBehavior</span>: &#123;      <span class="hljs-attr">origin</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfOrigin</span>    &#125;  &#125;);&#125;</code></pre><p>In a production application we will also configure certifications and domains for the distribution, which I have omited to keep the post focussed, but here is <a href="https://blog.dennisokeeffe.com/blog/2021-08-08-building-a-cdn-with-s3-cloudfront-and-the-aws-cdk" target="_blank" rel="noopener external nofollow noreferrer">another post</a> that convers those things too.</p><p>We can now update this CF distribution configuration to use our function.</p><pre><code class="hljs"><table class="hlcode-table"><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FrontendStack</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">cdk.Stack</span> {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  publicAssetsS3Bucket = <span class="hljs-keyword">new</span> s3.<span class="hljs-title class_">Bucket</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;PublicAssetsBucket&quot;</span>, {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-attr">removalPolicy</span>: cdk.<span class="hljs-property">RemovalPolicy</span>.<span class="hljs-property">RETAIN</span>,</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-attr">publicReadAccess</span>: <span class="hljs-literal">true</span>,</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-attr">websiteIndexDocument</span>: <span class="hljs-string">&quot;index.html&quot;</span>,</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-attr">versioned</span>: <span class="hljs-literal">false</span>,</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  })</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">  cfPathRedirFunction = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">Function</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;PathRedirFunction&quot;</span>, {</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">      <span class="hljs-attr">code</span>: cf.<span class="hljs-property">FunctionCode</span>.<span class="hljs-title function_">fromFile</span>({</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">        <span class="hljs-attr">filePath</span>: path.<span class="hljs-title function_">join</span>(</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">          __dirname,</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">          <span class="hljs-string">&quot;./cf-functions/path-redir-rule.js&quot;</span></td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">        ),</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">      }),</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">    });</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfOrigin</span> = <span class="hljs-keyword">new</span> origins.<span class="hljs-title function_">S3Origin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">publicAssetsS3Bucket</span>);</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfDistribution</span> = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">Distribution</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;CFDistribution&quot;</span>, {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-attr">defaultBehavior</span>: {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">      <span class="hljs-attr">origin</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfOrigin</span>,</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">      <span class="hljs-attr">functionAssociations</span>: [</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">        {</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">          <span class="hljs-attr">function</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfPathRedirFunction</span>,</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">          <span class="hljs-attr">eventType</span>: cf.<span class="hljs-property">FunctionEventType</span>.<span class="hljs-property">VIEWER_REQUEST</span>,</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">        }</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">      ],</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    }</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  });</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">}</td></tr></table></code></pre><p>Since this function will need to be run before the target is selected, we needed to use <code>VIEWER_REQUEST</code> event type.</p><p>We can also consider adding a response function which adds headers to prevent the browser from caching our html pages, as we can expect it to frequently change.</p><pre><code class="hljs ts"><span class="hljs-comment">// prevent-html-caching.js</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params">event</span>) &#123;    <span class="hljs-keyword">var</span> request = event.<span class="hljs-property">request</span>    <span class="hljs-keyword">var</span> parts = request.<span class="hljs-property">uri</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)    <span class="hljs-keyword">var</span> lastPart = parts[parts.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>]    <span class="hljs-keyword">var</span> response = event.<span class="hljs-property">response</span>;    <span class="hljs-keyword">var</span> headers = response.<span class="hljs-property">headers</span>;    <span class="hljs-keyword">if</span> (lastPart.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\.html$/</span>) || lastPart.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^[^.]*$/</span>)) &#123;        headers[<span class="hljs-string">&#x27;cache-control&#x27;</span>] = &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span> &#125;    &#125;    <span class="hljs-keyword">return</span> response&#125;</code></pre><p>Because this function needs access to the response being sent, the function event type needs to be <code>VIEWER_RESPONSE</code>.</p><pre><code class="hljs"><table class="hlcode-table"><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FrontendStack</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">cdk.Stack</span> {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  <span class="hljs-comment">// ...</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">  cfHtmlRespFunction = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">Function</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;HTMLRespFunction&quot;</span>, {</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-attr">code</span>: cf.<span class="hljs-property">FunctionCode</span>.<span class="hljs-title function_">fromFile</span>({</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">      <span class="hljs-attr">filePath</span>: path.<span class="hljs-title function_">join</span>(</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">        __dirname,</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">        <span class="hljs-string">&quot;./cf-functions/prevent-html-caching.js&quot;</span></td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">      ),</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">    }),</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">  });</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfOrigin</span> = <span class="hljs-keyword">new</span> origins.<span class="hljs-title function_">S3Origin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">publicAssetsS3Bucket</span>);</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfDistribution</span> = <span class="hljs-keyword">new</span> cf.<span class="hljs-title class_">Distribution</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;CFDistribution&quot;</span>, {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-attr">defaultBehavior</span>: {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">      <span class="hljs-attr">origin</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfDistribution</span>,</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">      <span class="hljs-attr">functionAssociations</span>: [</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">        {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">          <span class="hljs-attr">function</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfPathRedirFunction</span>,</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">          <span class="hljs-attr">eventType</span>: cf.<span class="hljs-property">FunctionEventType</span>.<span class="hljs-property">VIEWER_REQUEST</span>,</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">        },</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">        {</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">          <span class="hljs-attr">function</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cfHtmlRespFunction</span>,</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">          <span class="hljs-attr">eventType</span>: cf.<span class="hljs-property">FunctionEventType</span>.<span class="hljs-property">VIEWER_RESPONSE</span>,</td></tr><tr style="border:none;background:#fffacd;" class="hlcode-line  hlcode-line-highlight" ><td style="border:none" class="hlcode-code-cell">        },</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">      ],</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    }</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">  });</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">}</td></tr></table></code></pre><p>And that is it. Run <code>cdk synth</code> and <code>cdk deploy</code> to deploy or update your cloudfront setup.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;When building &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;</summary>
      
    
    
    
    
    <category term="cloudfront" scheme="https://lorefnon.me/tags/cloudfront/"/>
    
    <category term="AWS" scheme="https://lorefnon.me/tags/AWS/"/>
    
    <category term="CDK" scheme="https://lorefnon.me/tags/CDK/"/>
    
  </entry>
  
  <entry>
    <title>Embedding sql migrations in go binary</title>
    <link href="https://lorefnon.me/embedding-sql-migrations-in-go-binary/"/>
    <id>https://lorefnon.me/embedding-sql-migrations-in-go-binary/</id>
    <published>2022-09-30T18:30:00.000Z</published>
    <updated>2023-08-27T07:24:55.952Z</updated>
    
    <content type="html"><![CDATA[<p><a href="github.com/golang-migrate/migrate">Go-migrate</a> is a simple and easy to use database migration (schema evolution) library for go with good support for many mainstream databases. This post is a quick recipe on how we can bundle the migrations (sql patch files) within our go binary - this is particularly helpful when the app is distributed a single binary without dependencies.</p><p>Go stdlib includes an <a href="https://pkg.go.dev/embed" target="_blank" rel="noopener external nofollow noreferrer">embed package</a> that simplifies accessing files embedded in the running go program. Also go-migrate has support for httpfs as a source that makes it easy to integrate the two.</p><pre><code class="hljs"><table class="hlcode-table"><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-keyword">package</span> store</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-keyword">import</span> (</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-string">&quot;database/sql&quot;</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-string">&quot;embed&quot;</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-string">&quot;net/http&quot;</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-string">&quot;path/filepath&quot;</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-string">&quot;github.com/golang-migrate/migrate/v4&quot;</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-string">&quot;github.com/golang-migrate/migrate/v4/database/sqlite3&quot;</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-string">&quot;github.com/golang-migrate/migrate/v4/source/httpfs&quot;</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">_ <span class="hljs-string">&quot;github.com/mattn/go-sqlite3&quot;</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">)</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-comment">// Our migration files reside in db_migrations directory within this package</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-comment">// eg. db_migrations/</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-comment">//     |_ 001_create_tables.up.sql</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-comment">//     |_ 001_create_tables.down.sql</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-comment">//go:embed db_migrations</span></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-keyword">var</span> migrations embed.FS</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"></td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">migrateSchema</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> {</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    db, err := sql.Open(<span class="hljs-string">&quot;sqlite3&quot;</span>, dbFilePath)</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> { <span class="hljs-keyword">return</span> err }</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    driver, err := sqlite3.WithInstance(db, <span class="hljs-built_in">new</span>(sqlite3.Config))</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> { <span class="hljs-keyword">return</span> err }</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    sourceInstance, err := httpfs.New(http.FS(migrations), <span class="hljs-string">&quot;db_migrations&quot;</span>)    </td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> { <span class="hljs-keyword">return</span> err }</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    migrator, err := migrate.NewWithInstance(<span class="hljs-string">&quot;httpfs&quot;</span>, sourceInstance, <span class="hljs-string">&quot;sqlite3&quot;</span>, driver) </td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> { <span class="hljs-keyword">return</span> err }</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    err = migrator.Up()</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">    <span class="hljs-keyword">return</span> err</td></tr><tr style="border:none;" class="hlcode-line  " ><td style="border:none" class="hlcode-code-cell">}</td></tr></table></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;github.com/golang-migrate/migrate&quot;&gt;Go-migrate&lt;/a&gt; is a simple and easy to use database migration (schema evolution) library for </summary>
      
    
    
    
    
    <category term="go" scheme="https://lorefnon.me/tags/go/"/>
    
    <category term="sql" scheme="https://lorefnon.me/tags/sql/"/>
    
    <category term="go-migrate" scheme="https://lorefnon.me/tags/go-migrate/"/>
    
  </entry>
  
</feed>
